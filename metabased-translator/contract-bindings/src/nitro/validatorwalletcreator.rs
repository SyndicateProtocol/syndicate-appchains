/**

Generated by the following Solidity interface...
```solidity
interface ValidatorWalletCreator {
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event TemplateUpdated();
    event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy);

    constructor();

    function createWallet(address[] memory initialExecutorAllowedDests) external returns (address);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function setTemplate(address _template) external;
    function template() external view returns (address);
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createWallet",
    "inputs": [
      {
        "name": "initialExecutorAllowedDests",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setTemplate",
    "inputs": [
      {
        "name": "_template",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "template",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TemplateUpdated",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletCreated",
    "inputs": [
      {
        "name": "walletAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "executorAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "ownerAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "adminProxy",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ValidatorWalletCreator {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b50601633605d565b60405160209060ac565b604051809103905ff0801580156038573d5f803e3d5ffd5b50600180546001600160a01b0319166001600160a01b039290921691909117905560b9565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611bbe80611c2b83390190565b611b65806100c65f395ff3fe608060405234801561000f575f80fd5b506004361061006f575f3560e01c806389c716d11161004d57806389c716d1146100bf5780638da5cb5b146100d2578063f2fde38b146100e2575f80fd5b80631cf89b4b146100735780636f2ddd93146100a2578063715018a6146100b5575b5f80fd5b6100866100813660046104dd565b6100f5565b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b6100bd6102c1565b005b6100bd6100cd366004610567565b6102d4565b5f546001600160a01b0316610086565b6100bd6100f0366004610567565b61033a565b6040515f90339081908390610109906104c3565b604051809103905ff080158015610122573d5f803e3d5ffd5b506001546040519192505f916001600160a01b03909116908390610145906104d0565b6001600160a01b039283168152911660208201526060604082018190525f90820152608001604051809103905ff080158015610183573d5f803e3d5ffd5b506040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509083169063f2fde38b906024015f604051808303815f87803b1580156101e1575f80fd5b505af11580156101f3573d5f803e3d5ffd5b50506040517f77a24f360000000000000000000000000000000000000000000000000000000081526001600160a01b03841692506377a24f36915061024290879087908c908c90600401610587565b5f604051808303815f87803b158015610259575f80fd5b505af115801561026b573d5f803e3d5ffd5b50506040516001600160a01b038581168252808716935087811692508416907f7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee489060200160405180910390a49695505050505050565b6102c96103e9565b6102d25f61045c565b565b6102dc6103e9565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc905f90a150565b6103426103e9565b6001600160a01b0381166103dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103e68161045c565b50565b5f546001600160a01b031633146102d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d4565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107ba806105ed83390190565b610d8980610da783390190565b5f80602083850312156104ee575f80fd5b823567ffffffffffffffff80821115610505575f80fd5b818501915085601f830112610518575f80fd5b813581811115610526575f80fd5b8660208260051b850101111561053a575f80fd5b60209290920196919550909350505050565b80356001600160a01b0381168114610562575f80fd5b919050565b5f60208284031215610577575f80fd5b6105808261054c565b9392505050565b5f606082016001600160a01b0380881684526020818816602086015260606040860152828684526080860190508793505f5b878110156105de57836105cb8661054c565b16825293820193908201906001016105b9565b50999850505050505050505056fe6080604052348015600e575f80fd5b50601633601a565b6069565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610744806100765f395ff3fe608060405260043610610079575f3560e01c80639623609d1161004c5780639623609d1461010957806399a88ec41461011c578063f2fde38b1461013b578063f3b7dead1461015a575f80fd5b8063204e1c7a1461007d578063715018a6146100b85780637eff275e146100ce5780638da5cb5b146100ed575b5f80fd5b348015610088575f80fd5b5061009c610097366004610559565b610179565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c3575f80fd5b506100cc61021d565b005b3480156100d9575f80fd5b506100cc6100e836600461057b565b610230565b3480156100f8575f80fd5b505f546001600160a01b031661009c565b6100cc6101173660046105df565b6102ac565b348015610127575f80fd5b506100cc61013636600461057b565b610330565b348015610146575f80fd5b506100cc610155366004610559565b61037f565b348015610165575f80fd5b5061009c610174366004610559565b61042e565b5f805f836001600160a01b03166040516101b6907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b5f60405180830381855afa9150503d805f81146101ee576040519150601f19603f3d011682016040523d82523d5f602084013e6101f3565b606091505b509150915081610201575f80fd5b8080602001905181019061021591906106ae565b949350505050565b61022561046b565b61022e5f6104de565b565b61023861046b565b6040517f8f2839700000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690638f283970906024015b5f604051808303815f87803b158015610292575f80fd5b505af11580156102a4573d5f803e3d5ffd5b505050505050565b6102b461046b565b6040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef2869034906102fd90869086906004016106c9565b5f604051808303818588803b158015610314575f80fd5b505af1158015610326573d5f803e3d5ffd5b5050505050505050565b61033861046b565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690633659cfe69060240161027b565b61038761046b565b6001600160a01b038116610422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61042b816104de565b50565b5f805f836001600160a01b03166040516101b6907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b5f546001600160a01b0316331461022e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610419565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461042b575f80fd5b5f60208284031215610569575f80fd5b813561057481610545565b9392505050565b5f806040838503121561058c575f80fd5b823561059781610545565b915060208301356105a781610545565b809150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f805f606084860312156105f1575f80fd5b83356105fc81610545565b9250602084013561060c81610545565b9150604084013567ffffffffffffffff80821115610628575f80fd5b818601915086601f83011261063b575f80fd5b81358181111561064d5761064d6105b2565b604051601f8201601f19908116603f01168101908382118183101715610675576106756105b2565b8160405282815289602084870101111561068d575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f602082840312156106be575f80fd5b815161057481610545565b6001600160a01b0383168152604060208201525f82518060408401528060208501606085015e5f606082850101526060601f19601f830116840101915050939250505056fea2646970667358221220c06ba84d2559b8a91bff0a7385b8559982c5916dee57b94aa8b1b0b0e760f3e864736f6c634300081900336080604052604051610d89380380610d89833981016040819052610022916103b7565b828161002f82825f610043565b5061003b90508261006e565b5050506104cd565b61004c836100db565b5f825111806100585750805b1561006957610067838361011a565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6100ad5f80516020610d42833981519152546001600160a01b031690565b604080516001600160a01b03928316815291841660208301520160405180910390a16100d881610146565b50565b6100e4816101e1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b606061013f8383604051806060016040528060278152602001610d6260279139610275565b9392505050565b6001600160a01b0381166101b05760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b805f80516020610d428339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381163b61024e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101a7565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6101c0565b60606001600160a01b0384163b6102dd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101a7565b5f80856001600160a01b0316856040516102f79190610482565b5f60405180830381855af49150503d805f811461032f576040519150601f19603f3d011682016040523d82523d5f602084013e610334565b606091505b50909250905061034582828661034f565b9695505050505050565b6060831561035e57508161013f565b82511561036e5782518084602001fd5b8160405162461bcd60e51b81526004016101a79190610498565b80516001600160a01b038116811461039e575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f805f606084860312156103c9575f80fd5b6103d284610388565b92506103e060208501610388565b60408501519092506001600160401b03808211156103fc575f80fd5b818601915086601f83011261040f575f80fd5b815181811115610421576104216103a3565b604051601f8201601f19908116603f01168101908382118183101715610449576104496103a3565b81604052828152896020848701011115610461575f80fd5b8260208601602083015e5f6020848301015280955050505050509250925092565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b610868806104da5f395ff3fe60806040526004361061005d575f3560e01c80635c60da1b116100425780635c60da1b146100a65780638f283970146100d6578063f851a440146100f55761006c565b80633659cfe6146100745780634f1ef286146100935761006c565b3661006c5761006a610109565b005b61006a610109565b34801561007f575f80fd5b5061006a61008e36600461070d565b610123565b61006a6100a1366004610726565b61015e565b3480156100b1575f80fd5b506100ba6101c4565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e1575f80fd5b5061006a6100f036600461070d565b6101f4565b348015610100575f80fd5b506100ba610214565b610111610234565b61012161011c6102e4565b6102ed565b565b61012b61030b565b6001600160a01b03163303610156576101538160405180602001604052805f8152505f61033d565b50565b610153610109565b61016661030b565b6001600160a01b031633036101bc576101b78383838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506001925061033d915050565b505050565b6101b7610109565b5f6101cd61030b565b6001600160a01b031633036101e9576101e46102e4565b905090565b6101f1610109565b90565b6101fc61030b565b6001600160a01b031633036101565761015381610367565b5f61021d61030b565b6001600160a01b031633036101e9576101e461030b565b61023c61030b565b6001600160a01b031633036101215760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b5f6101e46103bb565b365f80375f80365f845af43d5f803e808015610307573d5ff35b3d5ffd5b5f7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b610346836103e2565b5f825111806103525750805b156101b7576103618383610421565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61039061030b565b604080516001600160a01b03928316815291841660208301520160405180910390a16101538161044d565b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61032e565b6103eb81610525565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b6060610446838360405180606001604052806027815260200161080c602791396105c9565b9392505050565b6001600160a01b0381166104c95760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102db565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6001600160a01b0381163b6105a25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016102db565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6104ec565b60606001600160a01b0384163b6106485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016102db565b5f80856001600160a01b03168560405161066291906107a2565b5f60405180830381855af49150503d805f811461069a576040519150601f19603f3d011682016040523d82523d5f602084013e61069f565b606091505b50915091506106af8282866106b9565b9695505050505050565b606083156106c8575081610446565b8251156106d85782518084602001fd5b8160405162461bcd60e51b81526004016102db91906107b8565b80356001600160a01b0381168114610708575f80fd5b919050565b5f6020828403121561071d575f80fd5b610446826106f2565b5f805f60408486031215610738575f80fd5b610741846106f2565b9250602084013567ffffffffffffffff8082111561075d575f80fd5b818601915086601f830112610770575f80fd5b81358181111561077e575f80fd5b87602082850101111561078f575f80fd5b6020830194508093505050509250925092565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205147d38957e9df6e1da1b98751987c55e32bdc4cb009ea7a145ab634aee1897364736f6c63430008190033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220195d9d8eea46ba1d24bad5a7d269a20e570d85198bfd6dcf8b0709a1c4bb533c64736f6c6343000819003360c0604052306080526202000060a0523480156019575f80fd5b5060805160a051611b7c6100425f395f8181610542015261111501525f610a0a0152611b7c5ff3fe6080604052600436106100dc575f3560e01c80638da5cb5b1161007c578063a158657c11610057578063a158657c14610237578063c179f1d914610256578063ce1d571f14610269578063f2fde38b1461027c575f80fd5b80638da5cb5b146101c35780639ac2a011146101ea5780639be7bbd214610218575f80fd5b80633a7c721a116100b75780633a7c721a1461015e578063715018a61461017d57806372f458661461019157806377a24f36146101a4575f80fd5b8063097da1f8146100e75780630a2435f8146100fc578063193c8edd1461011b575f80fd5b366100e357005b5f80fd5b6100fa6100f53660046114ee565b61029b565b005b348015610107575f80fd5b506100fa61011636600461159a565b610645565b348015610126575f80fd5b50610149610135366004611601565b60666020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610169575f80fd5b506100fa61017836600461159a565b6107c5565b348015610188575f80fd5b506100fa61090c565b6100fa61019f366004611623565b61091f565b3480156101af575f80fd5b506100fa6101be3660046116b6565b610936565b3480156101ce575f80fd5b506033546040516001600160a01b039091168152602001610155565b3480156101f5575f80fd5b50610149610204366004611601565b60656020525f908152604090205460ff1681565b348015610223575f80fd5b506100fa610232366004611601565b610c43565b348015610242575f80fd5b506100fa61025136600461170b565b610ccd565b6100fa610264366004611739565b610d6e565b6100fa6102773660046117de565b61121a565b348015610287575f80fd5b506100fa610296366004611601565b61122d565b335f9081526065602052604090205460ff161580156102c557506033546001600160a01b03163314155b1561030f57335b6040517ff26aea8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b845f805a90508515610372576001600160a01b0385163b6103725760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610306565b61037b85610c43565b5f856001600160a01b0316858989604051610397929190611837565b5f6040518083038185875af1925050503d805f81146103d1576040519150601f19603f3d011682016040523d82523d5f602084013e6103d6565b606091505b50509050806103eb576040513d805f833e8082fd5b506001600160a01b0383161561063b57365f602061040a83601f61185a565b6104149190611873565b9050610200610424600283611972565b61042e9190611873565b610439826006611980565b610443919061185a565b61044d908461185a565b92506104576112ba565b610463575f9150610591565b6001600160a01b0384161561059157836001600160a01b031663e83a2d826040518163ffffffff1660e01b81526004015f60405180830381865afa9250505080156104cf57506040513d5f823e601f3d908101601f191682016040526104cc91908101906119ab565b60015b156105915780511561058f575f856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610518573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061053c9190611a64565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161056d9190611980565b6105779190611980565b6105819190611873565b61058b908661185a565b9450505b505b846001600160a01b031663e3db8a49335a6105ac9087611a7b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303815f875af1158015610613573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106379190611a9b565b5050505b5050505050505050565b61064d6112ce565b8281146106775760405163088253c360e11b81526004810184905260248101829052604401610306565b5f5b67ffffffffffffffff81168411156107be5782828267ffffffffffffffff168181106106a7576106a7611ab6565b90506020020160208101906106bc9190611aca565b60655f87878567ffffffffffffffff168181106106db576106db611ab6565b90506020020160208101906106f09190611601565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055848467ffffffffffffffff831681811061073357610733611ab6565b90506020020160208101906107489190611601565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea284848467ffffffffffffffff1681811061078e5761078e611ab6565b90506020020160208101906107a39190611aca565b604051901515815260200160405180910390a2600101610679565b5050505050565b6107cd6112ce565b8281146107f75760405163088253c360e11b81526004810184905260248101829052604401610306565b5f5b838110156107be5782828281811061081357610813611ab6565b90506020020160208101906108289190611aca565b60665f87878581811061083d5761083d611ab6565b90506020020160208101906108529190611601565b6001600160a01b0316815260208101919091526040015f20805460ff191691151591909117905584848281811061088b5761088b611ab6565b90506020020160208101906108a09190611601565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a48484848181106108dc576108dc611ab6565b90506020020160208101906108f19190611aca565b604051901515815260200160405180910390a26001016107f9565b6109146112ce565b61091d5f611328565b565b61092e5f878787878787610d6e565b505050505050565b5f54610100900460ff161580801561095457505f54600160ff909116105b8061096d5750303b15801561096d57505f5460ff166001145b6109df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610306565b5f805460ff191660011790558015610a00575f805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a9e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610306565b610aa6611391565b610aaf8461122d565b6001600160a01b0385165f81815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a25f5b67ffffffffffffffff8116831115610bf757600160665f86868567ffffffffffffffff16818110610b3d57610b3d611ab6565b9050602002016020810190610b529190611601565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055838367ffffffffffffffff8316818110610b9557610b95611ab6565b9050602002016020810190610baa9190611601565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610be7911515815260200190565b60405180910390a2600101610b0a565b5080156107be575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b0381165f9081526066602052604090205460ff16158015610c7657506033546001600160a01b03163314155b15610cca576033546040517f41fc6f8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529082166044820152606401610306565b50565b610cd56112ce565b5f816001600160a01b0316836040515f6040518083038185875af1925050503d805f8114610d1e576040519150601f19603f3d011682016040523d82523d5f602084013e610d23565b606091505b5050905080610d69576040517f7edbb4980000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610306565b505050565b335f9081526065602052604090205460ff16158015610d9857506033546001600160a01b03163314155b15610da357336102cc565b865f805a905087868114610dd45760405163088253c360e11b81526004810182905260248101889052604401610306565b808514610dfe5760405163088253c360e11b81526004810182905260248101869052604401610306565b5f5b81811015610fbd575f8b8b83818110610e1b57610e1b611ab6565b9050602002810190610e2d9190611ae5565b90501115610eba57610e6e898983818110610e4a57610e4a611ab6565b9050602002016020810190610e5f9190611601565b6001600160a01b03163b151590565b610eba5760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610306565b610ee4898983818110610ecf57610ecf611ab6565b90506020020160208101906102329190611601565b5f898983818110610ef757610ef7611ab6565b9050602002016020810190610f0c9190611601565b6001600160a01b0316888884818110610f2757610f27611ab6565b905060200201358d8d85818110610f4057610f40611ab6565b9050602002810190610f529190611ae5565b604051610f60929190611837565b5f6040518083038185875af1925050503d805f8114610f9a576040519150601f19603f3d011682016040523d82523d5f602084013e610f9f565b606091505b5050905080610fb4576040513d805f833e8082fd5b50600101610e00565b50506001600160a01b0383161561120e57365f6020610fdd83601f61185a565b610fe79190611873565b9050610200610ff7600283611972565b6110019190611873565b61100c826006611980565b611016919061185a565b611020908461185a565b925061102a6112ba565b611036575f9150611164565b6001600160a01b0384161561116457836001600160a01b031663e83a2d826040518163ffffffff1660e01b81526004015f60405180830381865afa9250505080156110a257506040513d5f823e601f3d908101601f1916820160405261109f91908101906119ab565b60015b1561116457805115611162575f856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110eb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061110f9190611a64565b905048817f000000000000000000000000000000000000000000000000000000000000000084516111409190611980565b61114a9190611980565b6111549190611873565b61115e908661185a565b9450505b505b846001600160a01b031663e3db8a49335a61117f9087611a7b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303815f875af11580156111e6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061120a9190611a9b565b5050505b50505050505050505050565b6112275f8585858561029b565b50505050565b6112356112ce565b6001600160a01b0381166112b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610306565b610cca81611328565b5f33321480156112c95750333b155b905090565b6033546001600160a01b0316331461091d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff1661140d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610306565b61091d5f54610100900460ff1661148c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610306565b61091d33611328565b6001600160a01b0381168114610cca575f80fd5b5f8083601f8401126114b9575f80fd5b50813567ffffffffffffffff8111156114d0575f80fd5b6020830191508360208285010111156114e7575f80fd5b9250929050565b5f805f805f60808688031215611502575f80fd5b853561150d81611495565b9450602086013567ffffffffffffffff811115611528575f80fd5b611534888289016114a9565b909550935050604086013561154881611495565b949793965091946060013592915050565b5f8083601f840112611569575f80fd5b50813567ffffffffffffffff811115611580575f80fd5b6020830191508360208260051b85010111156114e7575f80fd5b5f805f80604085870312156115ad575f80fd5b843567ffffffffffffffff808211156115c4575f80fd5b6115d088838901611559565b909650945060208701359150808211156115e8575f80fd5b506115f587828801611559565b95989497509550505050565b5f60208284031215611611575f80fd5b813561161c81611495565b9392505050565b5f805f805f8060608789031215611638575f80fd5b863567ffffffffffffffff8082111561164f575f80fd5b61165b8a838b01611559565b90985096506020890135915080821115611673575f80fd5b61167f8a838b01611559565b90965094506040890135915080821115611697575f80fd5b506116a489828a01611559565b979a9699509497509295939492505050565b5f805f80606085870312156116c9575f80fd5b84356116d481611495565b935060208501356116e481611495565b9250604085013567ffffffffffffffff8111156116ff575f80fd5b6115f587828801611559565b5f806040838503121561171c575f80fd5b82359150602083013561172e81611495565b809150509250929050565b5f805f805f805f6080888a03121561174f575f80fd5b873561175a81611495565b9650602088013567ffffffffffffffff80821115611776575f80fd5b6117828b838c01611559565b909850965060408a013591508082111561179a575f80fd5b6117a68b838c01611559565b909650945060608a01359150808211156117be575f80fd5b506117cb8a828b01611559565b989b979a50959850939692959293505050565b5f805f80606085870312156117f1575f80fd5b843567ffffffffffffffff811115611807575f80fd5b611813878288016114a9565b909550935050602085013561182781611495565b9396929550929360400135925050565b818382375f9101908152919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561186d5761186d611846565b92915050565b5f8261188d57634e487b7160e01b5f52601260045260245ffd5b500490565b600181815b808511156118cc57815f19048211156118b2576118b2611846565b808516156118bf57918102915b93841c9390800290611897565b509250929050565b5f826118e25750600161186d565b816118ee57505f61186d565b8160018114611904576002811461190e5761192a565b600191505061186d565b60ff84111561191f5761191f611846565b50506001821b61186d565b5060208310610133831016604e8410600b841016171561194d575081810a61186d565b6119578383611892565b805f190482111561196a5761196a611846565b029392505050565b5f61161c60ff8416836118d4565b808202811582820484141761186d5761186d611846565b634e487b7160e01b5f52604160045260245ffd5b5f60208083850312156119bc575f80fd5b825167ffffffffffffffff808211156119d3575f80fd5b818501915085601f8301126119e6575f80fd5b8151818111156119f8576119f8611997565b8060051b604051601f19603f83011681018181108582111715611a1d57611a1d611997565b604052918252848201925083810185019188831115611a3a575f80fd5b938501935b82851015611a5857845184529385019392850192611a3f565b98975050505050505050565b5f60208284031215611a74575f80fd5b5051919050565b8181038181111561186d5761186d611846565b8015158114610cca575f80fd5b5f60208284031215611aab575f80fd5b815161161c81611a8e565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611ada575f80fd5b813561161c81611a8e565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b18575f80fd5b83018035915067ffffffffffffffff821115611b32575f80fd5b6020019150368190038213156114e7575f80fdfea264697066735822122019afab8899a1db0abd6dfe564bb7ed0438ed9d4060e42ab6308bb4f9058755e964736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[P`\x163`]V[`@Q` \x90`\xACV[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15`8W=_\x80>=_\xFD[P`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\xB9V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x1B\xBE\x80a\x1C+\x839\x01\x90V[a\x1Be\x80a\0\xC6_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0oW_5`\xE0\x1C\x80c\x89\xC7\x16\xD1\x11a\0MW\x80c\x89\xC7\x16\xD1\x14a\0\xBFW\x80c\x8D\xA5\xCB[\x14a\0\xD2W\x80c\xF2\xFD\xE3\x8B\x14a\0\xE2W_\x80\xFD[\x80c\x1C\xF8\x9BK\x14a\0sW\x80co-\xDD\x93\x14a\0\xA2W\x80cqP\x18\xA6\x14a\0\xB5W[_\x80\xFD[a\0\x86a\0\x816`\x04a\x04\xDDV[a\0\xF5V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\x86\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xBDa\x02\xC1V[\0[a\0\xBDa\0\xCD6`\x04a\x05gV[a\x02\xD4V[_T`\x01`\x01`\xA0\x1B\x03\x16a\0\x86V[a\0\xBDa\0\xF06`\x04a\x05gV[a\x03:V[`@Q_\x903\x90\x81\x90\x83\x90a\x01\t\x90a\x04\xC3V[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\"W=_\x80>=_\xFD[P`\x01T`@Q\x91\x92P_\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90\x83\x90a\x01E\x90a\x04\xD0V[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x16` \x82\x01R```@\x82\x01\x81\x90R_\x90\x82\x01R`\x80\x01`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\x83W=_\x80>=_\xFD[P`@Q\x7F\xF2\xFD\xE3\x8B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x91\x92P\x90\x83\x16\x90c\xF2\xFD\xE3\x8B\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xE1W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\xF3W=_\x80>=_\xFD[PP`@Q\x7Fw\xA2O6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x92Pcw\xA2O6\x91Pa\x02B\x90\x87\x90\x87\x90\x8C\x90\x8C\x90`\x04\x01a\x05\x87V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02YW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02kW=_\x80>=_\xFD[PP`@Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x82R\x80\x87\x16\x93P\x87\x81\x16\x92P\x84\x16\x90\x7Fzo\xE3\x9Eb\xE2\xAE\xED\xF6C\x08\x93\xF8\xCEg\xC6\xAA\x08\xC9-<}f\xC87\x06\x05~\xE1x\xEEH\x90` \x01`@Q\x80\x91\x03\x90\xA4\x96\x95PPPPPPV[a\x02\xC9a\x03\xE9V[a\x02\xD2_a\x04\\V[V[a\x02\xDCa\x03\xE9V[`\x01\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x17\x90U`@Q\x7Fn\xB2o\x17m\xD9\x18\x08I\xDDHt\xD3S\r\xE0\xE5\xC1\xF6*ng\x98\xD3N:\xBF\xC1\x1F\x1D\xB2\xCC\x90_\x90\xA1PV[a\x03Ba\x03\xE9V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03\xDDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\xE6\x81a\x04\\V[PV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02\xD2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x03\xD4V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x07\xBA\x80a\x05\xED\x839\x01\x90V[a\r\x89\x80a\r\xA7\x839\x01\x90V[_\x80` \x83\x85\x03\x12\x15a\x04\xEEW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05\x05W_\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x05\x18W_\x80\xFD[\x815\x81\x81\x11\x15a\x05&W_\x80\xFD[\x86` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x05:W_\x80\xFD[` \x92\x90\x92\x01\x96\x91\x95P\x90\x93PPPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05bW_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x05wW_\x80\xFD[a\x05\x80\x82a\x05LV[\x93\x92PPPV[_``\x82\x01`\x01`\x01`\xA0\x1B\x03\x80\x88\x16\x84R` \x81\x88\x16` \x86\x01R```@\x86\x01R\x82\x86\x84R`\x80\x86\x01\x90P\x87\x93P_[\x87\x81\x10\x15a\x05\xDEW\x83a\x05\xCB\x86a\x05LV[\x16\x82R\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01a\x05\xB9V[P\x99\x98PPPPPPPPPV\xFE`\x80`@R4\x80\x15`\x0EW_\x80\xFD[P`\x163`\x1AV[`iV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x07D\x80a\0v_9_\xF3\xFE`\x80`@R`\x046\x10a\0yW_5`\xE0\x1C\x80c\x96#`\x9D\x11a\0LW\x80c\x96#`\x9D\x14a\x01\tW\x80c\x99\xA8\x8E\xC4\x14a\x01\x1CW\x80c\xF2\xFD\xE3\x8B\x14a\x01;W\x80c\xF3\xB7\xDE\xAD\x14a\x01ZW_\x80\xFD[\x80c N\x1Cz\x14a\0}W\x80cqP\x18\xA6\x14a\0\xB8W\x80c~\xFF'^\x14a\0\xCEW\x80c\x8D\xA5\xCB[\x14a\0\xEDW[_\x80\xFD[4\x80\x15a\0\x88W_\x80\xFD[Pa\0\x9Ca\0\x976`\x04a\x05YV[a\x01yV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC3W_\x80\xFD[Pa\0\xCCa\x02\x1DV[\0[4\x80\x15a\0\xD9W_\x80\xFD[Pa\0\xCCa\0\xE86`\x04a\x05{V[a\x020V[4\x80\x15a\0\xF8W_\x80\xFD[P_T`\x01`\x01`\xA0\x1B\x03\x16a\0\x9CV[a\0\xCCa\x01\x176`\x04a\x05\xDFV[a\x02\xACV[4\x80\x15a\x01'W_\x80\xFD[Pa\0\xCCa\x0166`\x04a\x05{V[a\x030V[4\x80\x15a\x01FW_\x80\xFD[Pa\0\xCCa\x01U6`\x04a\x05YV[a\x03\x7FV[4\x80\x15a\x01eW_\x80\xFD[Pa\0\x9Ca\x01t6`\x04a\x05YV[a\x04.V[_\x80_\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xB6\x90\x7F\\`\xDA\x1B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01\x90V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x01\xEEW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xF3V[``\x91P[P\x91P\x91P\x81a\x02\x01W_\x80\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x02\x15\x91\x90a\x06\xAEV[\x94\x93PPPPV[a\x02%a\x04kV[a\x02._a\x04\xDEV[V[a\x028a\x04kV[`@Q\x7F\x8F(9p\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c\x8F(9p\x90`$\x01[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\x92W_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xA4W=_\x80>=_\xFD[PPPPPPV[a\x02\xB4a\x04kV[`@Q\x7FO\x1E\xF2\x86\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cO\x1E\xF2\x86\x904\x90a\x02\xFD\x90\x86\x90\x86\x90`\x04\x01a\x06\xC9V[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x03\x14W_\x80\xFD[PZ\xF1\x15\x80\x15a\x03&W=_\x80>=_\xFD[PPPPPPPPV[a\x038a\x04kV[`@Q\x7F6Y\xCF\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c6Y\xCF\xE6\x90`$\x01a\x02{V[a\x03\x87a\x04kV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x04\"W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x04+\x81a\x04\xDEV[PV[_\x80_\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xB6\x90\x7F\xF8Q\xA4@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01\x90V[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02.W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x04\x19V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x04+W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x05iW_\x80\xFD[\x815a\x05t\x81a\x05EV[\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x05\x8CW_\x80\xFD[\x825a\x05\x97\x81a\x05EV[\x91P` \x83\x015a\x05\xA7\x81a\x05EV[\x80\x91PP\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_\x80_``\x84\x86\x03\x12\x15a\x05\xF1W_\x80\xFD[\x835a\x05\xFC\x81a\x05EV[\x92P` \x84\x015a\x06\x0C\x81a\x05EV[\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x06(W_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x06;W_\x80\xFD[\x815\x81\x81\x11\x15a\x06MWa\x06Ma\x05\xB2V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x06uWa\x06ua\x05\xB2V[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15a\x06\x8DW_\x80\xFD[\x82` \x86\x01` \x83\x017_` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x06\xBEW_\x80\xFD[\x81Qa\x05t\x81a\x05EV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01R_\x82Q\x80`@\x84\x01R\x80` \x85\x01``\x85\x01^_``\x82\x85\x01\x01R```\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x93\x92PPPV\xFE\xA2dipfsX\"\x12 \xC0k\xA8M%Y\xB8\xA9\x1B\xFF\ns\x85\xB8U\x99\x82\xC5\x91m\xEEW\xB9J\xA8\xB1\xB0\xB0\xE7`\xF3\xE8dsolcC\0\x08\x19\x003`\x80`@R`@Qa\r\x898\x03\x80a\r\x89\x839\x81\x01`@\x81\x90Ra\0\"\x91a\x03\xB7V[\x82\x81a\0/\x82\x82_a\0CV[Pa\0;\x90P\x82a\0nV[PPPa\x04\xCDV[a\0L\x83a\0\xDBV[_\x82Q\x11\x80a\0XWP\x80[\x15a\0iWa\0g\x83\x83a\x01\x1AV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\0\xAD_\x80Q` a\rB\x839\x81Q\x91RT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\0\xD8\x81a\x01FV[PV[a\0\xE4\x81a\x01\xE1V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90_\x90\xA2PV[``a\x01?\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\rb`'\x919a\x02uV[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\xB0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[\x80_\x80Q` a\rB\x839\x81Q\x91R[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x02NW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x01\xA7V[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x01\xC0V[```\x01`\x01`\xA0\x1B\x03\x84\x16;a\x02\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01Re\x1B\x9D\x1C\x98X\xDD`\xD2\x1B`d\x82\x01R`\x84\x01a\x01\xA7V[_\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x02\xF7\x91\x90a\x04\x82V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\x03/W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x034V[``\x91P[P\x90\x92P\x90Pa\x03E\x82\x82\x86a\x03OV[\x96\x95PPPPPPV[``\x83\x15a\x03^WP\x81a\x01?V[\x82Q\x15a\x03nW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\xA7\x91\x90a\x04\x98V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\x9EW_\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x80_``\x84\x86\x03\x12\x15a\x03\xC9W_\x80\xFD[a\x03\xD2\x84a\x03\x88V[\x92Pa\x03\xE0` \x85\x01a\x03\x88V[`@\x85\x01Q\x90\x92P`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x03\xFCW_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x04\x0FW_\x80\xFD[\x81Q\x81\x81\x11\x15a\x04!Wa\x04!a\x03\xA3V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x04IWa\x04Ia\x03\xA3V[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15a\x04aW_\x80\xFD[\x82` \x86\x01` \x83\x01^_` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92P\x92V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[a\x08h\x80a\x04\xDA_9_\xF3\xFE`\x80`@R`\x046\x10a\0]W_5`\xE0\x1C\x80c\\`\xDA\x1B\x11a\0BW\x80c\\`\xDA\x1B\x14a\0\xA6W\x80c\x8F(9p\x14a\0\xD6W\x80c\xF8Q\xA4@\x14a\0\xF5Wa\0lV[\x80c6Y\xCF\xE6\x14a\0tW\x80cO\x1E\xF2\x86\x14a\0\x93Wa\0lV[6a\0lWa\0ja\x01\tV[\0[a\0ja\x01\tV[4\x80\x15a\0\x7FW_\x80\xFD[Pa\0ja\0\x8E6`\x04a\x07\rV[a\x01#V[a\0ja\0\xA16`\x04a\x07&V[a\x01^V[4\x80\x15a\0\xB1W_\x80\xFD[Pa\0\xBAa\x01\xC4V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xE1W_\x80\xFD[Pa\0ja\0\xF06`\x04a\x07\rV[a\x01\xF4V[4\x80\x15a\x01\0W_\x80\xFD[Pa\0\xBAa\x02\x14V[a\x01\x11a\x024V[a\x01!a\x01\x1Ca\x02\xE4V[a\x02\xEDV[V[a\x01+a\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01VWa\x01S\x81`@Q\x80` \x01`@R\x80_\x81RP_a\x03=V[PV[a\x01Sa\x01\tV[a\x01fa\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xBCWa\x01\xB7\x83\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP`\x01\x92Pa\x03=\x91PPV[PPPV[a\x01\xB7a\x01\tV[_a\x01\xCDa\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xE9Wa\x01\xE4a\x02\xE4V[\x90P\x90V[a\x01\xF1a\x01\tV[\x90V[a\x01\xFCa\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01VWa\x01S\x81a\x03gV[_a\x02\x1Da\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xE9Wa\x01\xE4a\x03\x0BV[a\x02<a\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01!W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`B`$\x82\x01R\x7FTransparentUpgradeableProxy: adm`D\x82\x01R\x7Fin cannot fallback to proxy targ`d\x82\x01R\x7Fet\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[_a\x01\xE4a\x03\xBBV[6_\x807_\x806_\x84Z\xF4=_\x80>\x80\x80\x15a\x03\x07W=_\xF3[=_\xFD[_\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[a\x03F\x83a\x03\xE2V[_\x82Q\x11\x80a\x03RWP\x80[\x15a\x01\xB7Wa\x03a\x83\x83a\x04!V[PPPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x03\x90a\x03\x0BV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\x01S\x81a\x04MV[_\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x03.V[a\x03\xEB\x81a\x05%V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90_\x90\xA2PV[``a\x04F\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\x08\x0C`'\x919a\x05\xC9V[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x04\xC9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\xDBV[\x80\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x05\xA2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01R\x7Fot a contract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\xDBV[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x04\xECV[```\x01`\x01`\xA0\x1B\x03\x84\x16;a\x06HW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01R\x7Fntract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\xDBV[_\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x06b\x91\x90a\x07\xA2V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\x06\x9AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06\x9FV[``\x91P[P\x91P\x91Pa\x06\xAF\x82\x82\x86a\x06\xB9V[\x96\x95PPPPPPV[``\x83\x15a\x06\xC8WP\x81a\x04FV[\x82Q\x15a\x06\xD8W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02\xDB\x91\x90a\x07\xB8V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07\x08W_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x07\x1DW_\x80\xFD[a\x04F\x82a\x06\xF2V[_\x80_`@\x84\x86\x03\x12\x15a\x078W_\x80\xFD[a\x07A\x84a\x06\xF2V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x07]W_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x07pW_\x80\xFD[\x815\x81\x81\x11\x15a\x07~W_\x80\xFD[\x87` \x82\x85\x01\x01\x11\x15a\x07\x8FW_\x80\xFD[` \x83\x01\x94P\x80\x93PPPP\x92P\x92P\x92V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 QG\xD3\x89W\xE9\xDFn\x1D\xA1\xB9\x87Q\x98|U\xE3+\xDCL\xB0\t\xEAz\x14Z\xB64\xAE\xE1\x89sdsolcC\0\x08\x19\x003\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03Address: low-level delegate call failed\xA2dipfsX\"\x12 \x19]\x9D\x8E\xEAF\xBA\x1D$\xBA\xD5\xA7\xD2i\xA2\x0EW\r\x85\x19\x8B\xFDm\xCF\x8B\x07\t\xA1\xC4\xBBS<dsolcC\0\x08\x19\x003`\xC0`@R0`\x80Rb\x02\0\0`\xA0R4\x80\x15`\x19W_\x80\xFD[P`\x80Q`\xA0Qa\x1B|a\0B_9_\x81\x81a\x05B\x01Ra\x11\x15\x01R_a\n\n\x01Ra\x1B|_\xF3\xFE`\x80`@R`\x046\x10a\0\xDCW_5`\xE0\x1C\x80c\x8D\xA5\xCB[\x11a\0|W\x80c\xA1Xe|\x11a\0WW\x80c\xA1Xe|\x14a\x027W\x80c\xC1y\xF1\xD9\x14a\x02VW\x80c\xCE\x1DW\x1F\x14a\x02iW\x80c\xF2\xFD\xE3\x8B\x14a\x02|W_\x80\xFD[\x80c\x8D\xA5\xCB[\x14a\x01\xC3W\x80c\x9A\xC2\xA0\x11\x14a\x01\xEAW\x80c\x9B\xE7\xBB\xD2\x14a\x02\x18W_\x80\xFD[\x80c:|r\x1A\x11a\0\xB7W\x80c:|r\x1A\x14a\x01^W\x80cqP\x18\xA6\x14a\x01}W\x80cr\xF4Xf\x14a\x01\x91W\x80cw\xA2O6\x14a\x01\xA4W_\x80\xFD[\x80c\t}\xA1\xF8\x14a\0\xE7W\x80c\n$5\xF8\x14a\0\xFCW\x80c\x19<\x8E\xDD\x14a\x01\x1BW_\x80\xFD[6a\0\xE3W\0[_\x80\xFD[a\0\xFAa\0\xF56`\x04a\x14\xEEV[a\x02\x9BV[\0[4\x80\x15a\x01\x07W_\x80\xFD[Pa\0\xFAa\x01\x166`\x04a\x15\x9AV[a\x06EV[4\x80\x15a\x01&W_\x80\xFD[Pa\x01Ia\x0156`\x04a\x16\x01V[`f` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01iW_\x80\xFD[Pa\0\xFAa\x01x6`\x04a\x15\x9AV[a\x07\xC5V[4\x80\x15a\x01\x88W_\x80\xFD[Pa\0\xFAa\t\x0CV[a\0\xFAa\x01\x9F6`\x04a\x16#V[a\t\x1FV[4\x80\x15a\x01\xAFW_\x80\xFD[Pa\0\xFAa\x01\xBE6`\x04a\x16\xB6V[a\t6V[4\x80\x15a\x01\xCEW_\x80\xFD[P`3T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01UV[4\x80\x15a\x01\xF5W_\x80\xFD[Pa\x01Ia\x02\x046`\x04a\x16\x01V[`e` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[4\x80\x15a\x02#W_\x80\xFD[Pa\0\xFAa\x0226`\x04a\x16\x01V[a\x0CCV[4\x80\x15a\x02BW_\x80\xFD[Pa\0\xFAa\x02Q6`\x04a\x17\x0BV[a\x0C\xCDV[a\0\xFAa\x02d6`\x04a\x179V[a\rnV[a\0\xFAa\x02w6`\x04a\x17\xDEV[a\x12\x1AV[4\x80\x15a\x02\x87W_\x80\xFD[Pa\0\xFAa\x02\x966`\x04a\x16\x01V[a\x12-V[3_\x90\x81R`e` R`@\x90 T`\xFF\x16\x15\x80\x15a\x02\xC5WP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\x03\x0FW3[`@Q\x7F\xF2j\xEA\x8B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[\x84_\x80Z\x90P\x85\x15a\x03rW`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x03rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FNO_CODE_AT_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x06V[a\x03{\x85a\x0CCV[_\x85`\x01`\x01`\xA0\x1B\x03\x16\x85\x89\x89`@Qa\x03\x97\x92\x91\x90a\x187V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x03\xD1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03\xD6V[``\x91P[PP\x90P\x80a\x03\xEBW`@Q=\x80_\x83>\x80\x82\xFD[P`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x06;W6_` a\x04\n\x83`\x1Fa\x18ZV[a\x04\x14\x91\x90a\x18sV[\x90Pa\x02\0a\x04$`\x02\x83a\x19rV[a\x04.\x91\x90a\x18sV[a\x049\x82`\x06a\x19\x80V[a\x04C\x91\x90a\x18ZV[a\x04M\x90\x84a\x18ZV[\x92Pa\x04Wa\x12\xBAV[a\x04cW_\x91Pa\x05\x91V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x05\x91W\x83`\x01`\x01`\xA0\x1B\x03\x16c\xE8:-\x82`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x04\xCFWP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04\xCC\x91\x90\x81\x01\x90a\x19\xABV[`\x01[\x15a\x05\x91W\x80Q\x15a\x05\x8FW_\x85`\x01`\x01`\xA0\x1B\x03\x16c\x1Fmn\xF7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x18W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05<\x91\x90a\x1AdV[\x90PH\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84Qa\x05m\x91\x90a\x19\x80V[a\x05w\x91\x90a\x19\x80V[a\x05\x81\x91\x90a\x18sV[a\x05\x8B\x90\x86a\x18ZV[\x94PP[P[\x84`\x01`\x01`\xA0\x1B\x03\x16c\xE3\xDB\x8AI3Za\x05\xAC\x90\x87a\x1A{V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\x13W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x067\x91\x90a\x1A\x9BV[PPP[PPPPPPPPV[a\x06Ma\x12\xCEV[\x82\x81\x14a\x06wW`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\x03\x06V[_[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x11\x15a\x07\xBEW\x82\x82\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x06\xA7Wa\x06\xA7a\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x06\xBC\x91\x90a\x1A\xCAV[`e_\x87\x87\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x06\xDBWa\x06\xDBa\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x06\xF0\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x84\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81\x81\x10a\x073Wa\x073a\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x07H\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\x9F\xDB\xC2\xD4\x8B\x8A\r\xB2\xF6&c\xBF\x93\x12\xAD\x02\xF5\xB1\xF6AJ\xD6\0\xB5Z$}\t\xAE\xEC>\xA2\x84\x84\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x07\x8EWa\x07\x8Ea\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x07\xA3\x91\x90a\x1A\xCAV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x06yV[PPPPPV[a\x07\xCDa\x12\xCEV[\x82\x81\x14a\x07\xF7W`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\x03\x06V[_[\x83\x81\x10\x15a\x07\xBEW\x82\x82\x82\x81\x81\x10a\x08\x13Wa\x08\x13a\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x08(\x91\x90a\x1A\xCAV[`f_\x87\x87\x85\x81\x81\x10a\x08=Wa\x08=a\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x08R\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x84\x84\x82\x81\x81\x10a\x08\x8BWa\x08\x8Ba\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x08\xA0\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\xAB\x06?\xE5u\xC4\xDF5\x9A\xAF73\xBC\xF1\x07\x06\xBA\xCF\xDD$U~g\n,\x1C\xBA\x12j\xE4\xD8\xA4\x84\x84\x84\x81\x81\x10a\x08\xDCWa\x08\xDCa\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x08\xF1\x91\x90a\x1A\xCAV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x07\xF9V[a\t\x14a\x12\xCEV[a\t\x1D_a\x13(V[V[a\t._\x87\x87\x87\x87\x87\x87a\rnV[PPPPPPV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\tTWP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\tmWP0;\x15\x80\x15a\tmWP_T`\xFF\x16`\x01\x14[a\t\xDFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01R\x7Fdy initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\n\0W_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\n\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\n\xA6a\x13\x91V[a\n\xAF\x84a\x12-V[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x81\x81R`e` \x90\x81R`@\x91\x82\x90 \x80T`\xFF\x19\x16`\x01\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x7F\x9F\xDB\xC2\xD4\x8B\x8A\r\xB2\xF6&c\xBF\x93\x12\xAD\x02\xF5\xB1\xF6AJ\xD6\0\xB5Z$}\t\xAE\xEC>\xA2\x91\x01`@Q\x80\x91\x03\x90\xA2_[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x83\x11\x15a\x0B\xF7W`\x01`f_\x86\x86\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x0B=Wa\x0B=a\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x0BR\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x83\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81\x81\x10a\x0B\x95Wa\x0B\x95a\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x0B\xAA\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\xAB\x06?\xE5u\xC4\xDF5\x9A\xAF73\xBC\xF1\x07\x06\xBA\xCF\xDD$U~g\n,\x1C\xBA\x12j\xE4\xD8\xA4`\x01`@Qa\x0B\xE7\x91\x15\x15\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x0B\nV[P\x80\x15a\x07\xBEW_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1PPPPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`f` R`@\x90 T`\xFF\x16\x15\x80\x15a\x0CvWP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\x0C\xCAW`3T`@Q\x7FA\xFCo\x8A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R3`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x03\x06V[PV[a\x0C\xD5a\x12\xCEV[_\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\r\x1EW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\r#V[``\x91P[PP\x90P\x80a\riW`@Q\x7F~\xDB\xB4\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x03\x06V[PPPV[3_\x90\x81R`e` R`@\x90 T`\xFF\x16\x15\x80\x15a\r\x98WP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\r\xA3W3a\x02\xCCV[\x86_\x80Z\x90P\x87\x86\x81\x14a\r\xD4W`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x88\x90R`D\x01a\x03\x06V[\x80\x85\x14a\r\xFEW`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x86\x90R`D\x01a\x03\x06V[_[\x81\x81\x10\x15a\x0F\xBDW_\x8B\x8B\x83\x81\x81\x10a\x0E\x1BWa\x0E\x1Ba\x1A\xB6V[\x90P` \x02\x81\x01\x90a\x0E-\x91\x90a\x1A\xE5V[\x90P\x11\x15a\x0E\xBAWa\x0En\x89\x89\x83\x81\x81\x10a\x0EJWa\x0EJa\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x0E_\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16;\x15\x15\x90V[a\x0E\xBAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FNO_CODE_AT_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x06V[a\x0E\xE4\x89\x89\x83\x81\x81\x10a\x0E\xCFWa\x0E\xCFa\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x022\x91\x90a\x16\x01V[_\x89\x89\x83\x81\x81\x10a\x0E\xF7Wa\x0E\xF7a\x1A\xB6V[\x90P` \x02\x01` \x81\x01\x90a\x0F\x0C\x91\x90a\x16\x01V[`\x01`\x01`\xA0\x1B\x03\x16\x88\x88\x84\x81\x81\x10a\x0F'Wa\x0F'a\x1A\xB6V[\x90P` \x02\x015\x8D\x8D\x85\x81\x81\x10a\x0F@Wa\x0F@a\x1A\xB6V[\x90P` \x02\x81\x01\x90a\x0FR\x91\x90a\x1A\xE5V[`@Qa\x0F`\x92\x91\x90a\x187V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0F\x9AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0F\x9FV[``\x91P[PP\x90P\x80a\x0F\xB4W`@Q=\x80_\x83>\x80\x82\xFD[P`\x01\x01a\x0E\0V[PP`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x12\x0EW6_` a\x0F\xDD\x83`\x1Fa\x18ZV[a\x0F\xE7\x91\x90a\x18sV[\x90Pa\x02\0a\x0F\xF7`\x02\x83a\x19rV[a\x10\x01\x91\x90a\x18sV[a\x10\x0C\x82`\x06a\x19\x80V[a\x10\x16\x91\x90a\x18ZV[a\x10 \x90\x84a\x18ZV[\x92Pa\x10*a\x12\xBAV[a\x106W_\x91Pa\x11dV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x11dW\x83`\x01`\x01`\xA0\x1B\x03\x16c\xE8:-\x82`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x10\xA2WP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x10\x9F\x91\x90\x81\x01\x90a\x19\xABV[`\x01[\x15a\x11dW\x80Q\x15a\x11bW_\x85`\x01`\x01`\xA0\x1B\x03\x16c\x1Fmn\xF7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\xEBW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x0F\x91\x90a\x1AdV[\x90PH\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84Qa\x11@\x91\x90a\x19\x80V[a\x11J\x91\x90a\x19\x80V[a\x11T\x91\x90a\x18sV[a\x11^\x90\x86a\x18ZV[\x94PP[P[\x84`\x01`\x01`\xA0\x1B\x03\x16c\xE3\xDB\x8AI3Za\x11\x7F\x90\x87a\x1A{V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x11\xE6W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\n\x91\x90a\x1A\x9BV[PPP[PPPPPPPPPPV[a\x12'_\x85\x85\x85\x85a\x02\x9BV[PPPPV[a\x125a\x12\xCEV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x12\xB1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\x0C\xCA\x81a\x13(V[_32\x14\x80\x15a\x12\xC9WP3;\x15[\x90P\x90V[`3T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\x1DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x03\x06V[`3\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90_\x90\xA3PPV[_Ta\x01\0\x90\x04`\xFF\x16a\x14\rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01R\x7Fnitializing\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\t\x1D_Ta\x01\0\x90\x04`\xFF\x16a\x14\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01R\x7Fnitializing\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\t\x1D3a\x13(V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0C\xCAW_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x14\xB9W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xD0W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14\xE7W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_`\x80\x86\x88\x03\x12\x15a\x15\x02W_\x80\xFD[\x855a\x15\r\x81a\x14\x95V[\x94P` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15(W_\x80\xFD[a\x154\x88\x82\x89\x01a\x14\xA9V[\x90\x95P\x93PP`@\x86\x015a\x15H\x81a\x14\x95V[\x94\x97\x93\x96P\x91\x94``\x015\x92\x91PPV[_\x80\x83`\x1F\x84\x01\x12a\x15iW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\x80W_\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x14\xE7W_\x80\xFD[_\x80_\x80`@\x85\x87\x03\x12\x15a\x15\xADW_\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x15\xC4W_\x80\xFD[a\x15\xD0\x88\x83\x89\x01a\x15YV[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a\x15\xE8W_\x80\xFD[Pa\x15\xF5\x87\x82\x88\x01a\x15YV[\x95\x98\x94\x97P\x95PPPPV[_` \x82\x84\x03\x12\x15a\x16\x11W_\x80\xFD[\x815a\x16\x1C\x81a\x14\x95V[\x93\x92PPPV[_\x80_\x80_\x80``\x87\x89\x03\x12\x15a\x168W_\x80\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x16OW_\x80\xFD[a\x16[\x8A\x83\x8B\x01a\x15YV[\x90\x98P\x96P` \x89\x015\x91P\x80\x82\x11\x15a\x16sW_\x80\xFD[a\x16\x7F\x8A\x83\x8B\x01a\x15YV[\x90\x96P\x94P`@\x89\x015\x91P\x80\x82\x11\x15a\x16\x97W_\x80\xFD[Pa\x16\xA4\x89\x82\x8A\x01a\x15YV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[_\x80_\x80``\x85\x87\x03\x12\x15a\x16\xC9W_\x80\xFD[\x845a\x16\xD4\x81a\x14\x95V[\x93P` \x85\x015a\x16\xE4\x81a\x14\x95V[\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\xFFW_\x80\xFD[a\x15\xF5\x87\x82\x88\x01a\x15YV[_\x80`@\x83\x85\x03\x12\x15a\x17\x1CW_\x80\xFD[\x825\x91P` \x83\x015a\x17.\x81a\x14\x95V[\x80\x91PP\x92P\x92\x90PV[_\x80_\x80_\x80_`\x80\x88\x8A\x03\x12\x15a\x17OW_\x80\xFD[\x875a\x17Z\x81a\x14\x95V[\x96P` \x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x17vW_\x80\xFD[a\x17\x82\x8B\x83\x8C\x01a\x15YV[\x90\x98P\x96P`@\x8A\x015\x91P\x80\x82\x11\x15a\x17\x9AW_\x80\xFD[a\x17\xA6\x8B\x83\x8C\x01a\x15YV[\x90\x96P\x94P``\x8A\x015\x91P\x80\x82\x11\x15a\x17\xBEW_\x80\xFD[Pa\x17\xCB\x8A\x82\x8B\x01a\x15YV[\x98\x9B\x97\x9AP\x95\x98P\x93\x96\x92\x95\x92\x93PPPV[_\x80_\x80``\x85\x87\x03\x12\x15a\x17\xF1W_\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\x07W_\x80\xFD[a\x18\x13\x87\x82\x88\x01a\x14\xA9V[\x90\x95P\x93PP` \x85\x015a\x18'\x81a\x14\x95V[\x93\x96\x92\x95P\x92\x93`@\x015\x92PPV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x18mWa\x18ma\x18FV[\x92\x91PPV[_\x82a\x18\x8DWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[`\x01\x81\x81[\x80\x85\x11\x15a\x18\xCCW\x81_\x19\x04\x82\x11\x15a\x18\xB2Wa\x18\xB2a\x18FV[\x80\x85\x16\x15a\x18\xBFW\x91\x81\x02\x91[\x93\x84\x1C\x93\x90\x80\x02\x90a\x18\x97V[P\x92P\x92\x90PV[_\x82a\x18\xE2WP`\x01a\x18mV[\x81a\x18\xEEWP_a\x18mV[\x81`\x01\x81\x14a\x19\x04W`\x02\x81\x14a\x19\x0EWa\x19*V[`\x01\x91PPa\x18mV[`\xFF\x84\x11\x15a\x19\x1FWa\x19\x1Fa\x18FV[PP`\x01\x82\x1Ba\x18mV[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x19MWP\x81\x81\na\x18mV[a\x19W\x83\x83a\x18\x92V[\x80_\x19\x04\x82\x11\x15a\x19jWa\x19ja\x18FV[\x02\x93\x92PPPV[_a\x16\x1C`\xFF\x84\x16\x83a\x18\xD4V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x18mWa\x18ma\x18FV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x80\x83\x85\x03\x12\x15a\x19\xBCW_\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x19\xD3W_\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x19\xE6W_\x80\xFD[\x81Q\x81\x81\x11\x15a\x19\xF8Wa\x19\xF8a\x19\x97V[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x85\x82\x11\x17\x15a\x1A\x1DWa\x1A\x1Da\x19\x97V[`@R\x91\x82R\x84\x82\x01\x92P\x83\x81\x01\x85\x01\x91\x88\x83\x11\x15a\x1A:W_\x80\xFD[\x93\x85\x01\x93[\x82\x85\x10\x15a\x1AXW\x84Q\x84R\x93\x85\x01\x93\x92\x85\x01\x92a\x1A?V[\x98\x97PPPPPPPPV[_` \x82\x84\x03\x12\x15a\x1AtW_\x80\xFD[PQ\x91\x90PV[\x81\x81\x03\x81\x81\x11\x15a\x18mWa\x18ma\x18FV[\x80\x15\x15\x81\x14a\x0C\xCAW_\x80\xFD[_` \x82\x84\x03\x12\x15a\x1A\xABW_\x80\xFD[\x81Qa\x16\x1C\x81a\x1A\x8EV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1A\xDAW_\x80\xFD[\x815a\x16\x1C\x81a\x1A\x8EV[_\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x1B\x18W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1B2W_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x14\xE7W_\x80\xFD\xFE\xA2dipfsX\"\x12 \x19\xAF\xAB\x88\x99\xA1\xDB\n\xBDm\xFEVK\xB7\xED\x048\xED\x9D@`\xE4*\xB60\x8B\xB4\xF9\x05\x87U\xE9dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061006f575f3560e01c806389c716d11161004d57806389c716d1146100bf5780638da5cb5b146100d2578063f2fde38b146100e2575f80fd5b80631cf89b4b146100735780636f2ddd93146100a2578063715018a6146100b5575b5f80fd5b6100866100813660046104dd565b6100f5565b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b6100bd6102c1565b005b6100bd6100cd366004610567565b6102d4565b5f546001600160a01b0316610086565b6100bd6100f0366004610567565b61033a565b6040515f90339081908390610109906104c3565b604051809103905ff080158015610122573d5f803e3d5ffd5b506001546040519192505f916001600160a01b03909116908390610145906104d0565b6001600160a01b039283168152911660208201526060604082018190525f90820152608001604051809103905ff080158015610183573d5f803e3d5ffd5b506040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509083169063f2fde38b906024015f604051808303815f87803b1580156101e1575f80fd5b505af11580156101f3573d5f803e3d5ffd5b50506040517f77a24f360000000000000000000000000000000000000000000000000000000081526001600160a01b03841692506377a24f36915061024290879087908c908c90600401610587565b5f604051808303815f87803b158015610259575f80fd5b505af115801561026b573d5f803e3d5ffd5b50506040516001600160a01b038581168252808716935087811692508416907f7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee489060200160405180910390a49695505050505050565b6102c96103e9565b6102d25f61045c565b565b6102dc6103e9565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc905f90a150565b6103426103e9565b6001600160a01b0381166103dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103e68161045c565b50565b5f546001600160a01b031633146102d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d4565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107ba806105ed83390190565b610d8980610da783390190565b5f80602083850312156104ee575f80fd5b823567ffffffffffffffff80821115610505575f80fd5b818501915085601f830112610518575f80fd5b813581811115610526575f80fd5b8660208260051b850101111561053a575f80fd5b60209290920196919550909350505050565b80356001600160a01b0381168114610562575f80fd5b919050565b5f60208284031215610577575f80fd5b6105808261054c565b9392505050565b5f606082016001600160a01b0380881684526020818816602086015260606040860152828684526080860190508793505f5b878110156105de57836105cb8661054c565b16825293820193908201906001016105b9565b50999850505050505050505056fe6080604052348015600e575f80fd5b50601633601a565b6069565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610744806100765f395ff3fe608060405260043610610079575f3560e01c80639623609d1161004c5780639623609d1461010957806399a88ec41461011c578063f2fde38b1461013b578063f3b7dead1461015a575f80fd5b8063204e1c7a1461007d578063715018a6146100b85780637eff275e146100ce5780638da5cb5b146100ed575b5f80fd5b348015610088575f80fd5b5061009c610097366004610559565b610179565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c3575f80fd5b506100cc61021d565b005b3480156100d9575f80fd5b506100cc6100e836600461057b565b610230565b3480156100f8575f80fd5b505f546001600160a01b031661009c565b6100cc6101173660046105df565b6102ac565b348015610127575f80fd5b506100cc61013636600461057b565b610330565b348015610146575f80fd5b506100cc610155366004610559565b61037f565b348015610165575f80fd5b5061009c610174366004610559565b61042e565b5f805f836001600160a01b03166040516101b6907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b5f60405180830381855afa9150503d805f81146101ee576040519150601f19603f3d011682016040523d82523d5f602084013e6101f3565b606091505b509150915081610201575f80fd5b8080602001905181019061021591906106ae565b949350505050565b61022561046b565b61022e5f6104de565b565b61023861046b565b6040517f8f2839700000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690638f283970906024015b5f604051808303815f87803b158015610292575f80fd5b505af11580156102a4573d5f803e3d5ffd5b505050505050565b6102b461046b565b6040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef2869034906102fd90869086906004016106c9565b5f604051808303818588803b158015610314575f80fd5b505af1158015610326573d5f803e3d5ffd5b5050505050505050565b61033861046b565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690633659cfe69060240161027b565b61038761046b565b6001600160a01b038116610422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61042b816104de565b50565b5f805f836001600160a01b03166040516101b6907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b5f546001600160a01b0316331461022e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610419565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461042b575f80fd5b5f60208284031215610569575f80fd5b813561057481610545565b9392505050565b5f806040838503121561058c575f80fd5b823561059781610545565b915060208301356105a781610545565b809150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f805f606084860312156105f1575f80fd5b83356105fc81610545565b9250602084013561060c81610545565b9150604084013567ffffffffffffffff80821115610628575f80fd5b818601915086601f83011261063b575f80fd5b81358181111561064d5761064d6105b2565b604051601f8201601f19908116603f01168101908382118183101715610675576106756105b2565b8160405282815289602084870101111561068d575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f602082840312156106be575f80fd5b815161057481610545565b6001600160a01b0383168152604060208201525f82518060408401528060208501606085015e5f606082850101526060601f19601f830116840101915050939250505056fea2646970667358221220c06ba84d2559b8a91bff0a7385b8559982c5916dee57b94aa8b1b0b0e760f3e864736f6c634300081900336080604052604051610d89380380610d89833981016040819052610022916103b7565b828161002f82825f610043565b5061003b90508261006e565b5050506104cd565b61004c836100db565b5f825111806100585750805b1561006957610067838361011a565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6100ad5f80516020610d42833981519152546001600160a01b031690565b604080516001600160a01b03928316815291841660208301520160405180910390a16100d881610146565b50565b6100e4816101e1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b606061013f8383604051806060016040528060278152602001610d6260279139610275565b9392505050565b6001600160a01b0381166101b05760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b805f80516020610d428339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381163b61024e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101a7565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6101c0565b60606001600160a01b0384163b6102dd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101a7565b5f80856001600160a01b0316856040516102f79190610482565b5f60405180830381855af49150503d805f811461032f576040519150601f19603f3d011682016040523d82523d5f602084013e610334565b606091505b50909250905061034582828661034f565b9695505050505050565b6060831561035e57508161013f565b82511561036e5782518084602001fd5b8160405162461bcd60e51b81526004016101a79190610498565b80516001600160a01b038116811461039e575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f805f606084860312156103c9575f80fd5b6103d284610388565b92506103e060208501610388565b60408501519092506001600160401b03808211156103fc575f80fd5b818601915086601f83011261040f575f80fd5b815181811115610421576104216103a3565b604051601f8201601f19908116603f01168101908382118183101715610449576104496103a3565b81604052828152896020848701011115610461575f80fd5b8260208601602083015e5f6020848301015280955050505050509250925092565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b610868806104da5f395ff3fe60806040526004361061005d575f3560e01c80635c60da1b116100425780635c60da1b146100a65780638f283970146100d6578063f851a440146100f55761006c565b80633659cfe6146100745780634f1ef286146100935761006c565b3661006c5761006a610109565b005b61006a610109565b34801561007f575f80fd5b5061006a61008e36600461070d565b610123565b61006a6100a1366004610726565b61015e565b3480156100b1575f80fd5b506100ba6101c4565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e1575f80fd5b5061006a6100f036600461070d565b6101f4565b348015610100575f80fd5b506100ba610214565b610111610234565b61012161011c6102e4565b6102ed565b565b61012b61030b565b6001600160a01b03163303610156576101538160405180602001604052805f8152505f61033d565b50565b610153610109565b61016661030b565b6001600160a01b031633036101bc576101b78383838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506001925061033d915050565b505050565b6101b7610109565b5f6101cd61030b565b6001600160a01b031633036101e9576101e46102e4565b905090565b6101f1610109565b90565b6101fc61030b565b6001600160a01b031633036101565761015381610367565b5f61021d61030b565b6001600160a01b031633036101e9576101e461030b565b61023c61030b565b6001600160a01b031633036101215760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b5f6101e46103bb565b365f80375f80365f845af43d5f803e808015610307573d5ff35b3d5ffd5b5f7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b610346836103e2565b5f825111806103525750805b156101b7576103618383610421565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61039061030b565b604080516001600160a01b03928316815291841660208301520160405180910390a16101538161044d565b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61032e565b6103eb81610525565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b6060610446838360405180606001604052806027815260200161080c602791396105c9565b9392505050565b6001600160a01b0381166104c95760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102db565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6001600160a01b0381163b6105a25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016102db565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6104ec565b60606001600160a01b0384163b6106485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016102db565b5f80856001600160a01b03168560405161066291906107a2565b5f60405180830381855af49150503d805f811461069a576040519150601f19603f3d011682016040523d82523d5f602084013e61069f565b606091505b50915091506106af8282866106b9565b9695505050505050565b606083156106c8575081610446565b8251156106d85782518084602001fd5b8160405162461bcd60e51b81526004016102db91906107b8565b80356001600160a01b0381168114610708575f80fd5b919050565b5f6020828403121561071d575f80fd5b610446826106f2565b5f805f60408486031215610738575f80fd5b610741846106f2565b9250602084013567ffffffffffffffff8082111561075d575f80fd5b818601915086601f830112610770575f80fd5b81358181111561077e575f80fd5b87602082850101111561078f575f80fd5b6020830194508093505050509250925092565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205147d38957e9df6e1da1b98751987c55e32bdc4cb009ea7a145ab634aee1897364736f6c63430008190033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220195d9d8eea46ba1d24bad5a7d269a20e570d85198bfd6dcf8b0709a1c4bb533c64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0oW_5`\xE0\x1C\x80c\x89\xC7\x16\xD1\x11a\0MW\x80c\x89\xC7\x16\xD1\x14a\0\xBFW\x80c\x8D\xA5\xCB[\x14a\0\xD2W\x80c\xF2\xFD\xE3\x8B\x14a\0\xE2W_\x80\xFD[\x80c\x1C\xF8\x9BK\x14a\0sW\x80co-\xDD\x93\x14a\0\xA2W\x80cqP\x18\xA6\x14a\0\xB5W[_\x80\xFD[a\0\x86a\0\x816`\x04a\x04\xDDV[a\0\xF5V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\x86\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xBDa\x02\xC1V[\0[a\0\xBDa\0\xCD6`\x04a\x05gV[a\x02\xD4V[_T`\x01`\x01`\xA0\x1B\x03\x16a\0\x86V[a\0\xBDa\0\xF06`\x04a\x05gV[a\x03:V[`@Q_\x903\x90\x81\x90\x83\x90a\x01\t\x90a\x04\xC3V[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\"W=_\x80>=_\xFD[P`\x01T`@Q\x91\x92P_\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90\x83\x90a\x01E\x90a\x04\xD0V[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x16` \x82\x01R```@\x82\x01\x81\x90R_\x90\x82\x01R`\x80\x01`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\x83W=_\x80>=_\xFD[P`@Q\x7F\xF2\xFD\xE3\x8B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x91\x92P\x90\x83\x16\x90c\xF2\xFD\xE3\x8B\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xE1W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\xF3W=_\x80>=_\xFD[PP`@Q\x7Fw\xA2O6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x92Pcw\xA2O6\x91Pa\x02B\x90\x87\x90\x87\x90\x8C\x90\x8C\x90`\x04\x01a\x05\x87V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02YW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02kW=_\x80>=_\xFD[PP`@Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x82R\x80\x87\x16\x93P\x87\x81\x16\x92P\x84\x16\x90\x7Fzo\xE3\x9Eb\xE2\xAE\xED\xF6C\x08\x93\xF8\xCEg\xC6\xAA\x08\xC9-<}f\xC87\x06\x05~\xE1x\xEEH\x90` \x01`@Q\x80\x91\x03\x90\xA4\x96\x95PPPPPPV[a\x02\xC9a\x03\xE9V[a\x02\xD2_a\x04\\V[V[a\x02\xDCa\x03\xE9V[`\x01\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x17\x90U`@Q\x7Fn\xB2o\x17m\xD9\x18\x08I\xDDHt\xD3S\r\xE0\xE5\xC1\xF6*ng\x98\xD3N:\xBF\xC1\x1F\x1D\xB2\xCC\x90_\x90\xA1PV[a\x03Ba\x03\xE9V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03\xDDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\xE6\x81a\x04\\V[PV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02\xD2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x03\xD4V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x07\xBA\x80a\x05\xED\x839\x01\x90V[a\r\x89\x80a\r\xA7\x839\x01\x90V[_\x80` \x83\x85\x03\x12\x15a\x04\xEEW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05\x05W_\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x05\x18W_\x80\xFD[\x815\x81\x81\x11\x15a\x05&W_\x80\xFD[\x86` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x05:W_\x80\xFD[` \x92\x90\x92\x01\x96\x91\x95P\x90\x93PPPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05bW_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x05wW_\x80\xFD[a\x05\x80\x82a\x05LV[\x93\x92PPPV[_``\x82\x01`\x01`\x01`\xA0\x1B\x03\x80\x88\x16\x84R` \x81\x88\x16` \x86\x01R```@\x86\x01R\x82\x86\x84R`\x80\x86\x01\x90P\x87\x93P_[\x87\x81\x10\x15a\x05\xDEW\x83a\x05\xCB\x86a\x05LV[\x16\x82R\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01a\x05\xB9V[P\x99\x98PPPPPPPPPV\xFE`\x80`@R4\x80\x15`\x0EW_\x80\xFD[P`\x163`\x1AV[`iV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x07D\x80a\0v_9_\xF3\xFE`\x80`@R`\x046\x10a\0yW_5`\xE0\x1C\x80c\x96#`\x9D\x11a\0LW\x80c\x96#`\x9D\x14a\x01\tW\x80c\x99\xA8\x8E\xC4\x14a\x01\x1CW\x80c\xF2\xFD\xE3\x8B\x14a\x01;W\x80c\xF3\xB7\xDE\xAD\x14a\x01ZW_\x80\xFD[\x80c N\x1Cz\x14a\0}W\x80cqP\x18\xA6\x14a\0\xB8W\x80c~\xFF'^\x14a\0\xCEW\x80c\x8D\xA5\xCB[\x14a\0\xEDW[_\x80\xFD[4\x80\x15a\0\x88W_\x80\xFD[Pa\0\x9Ca\0\x976`\x04a\x05YV[a\x01yV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC3W_\x80\xFD[Pa\0\xCCa\x02\x1DV[\0[4\x80\x15a\0\xD9W_\x80\xFD[Pa\0\xCCa\0\xE86`\x04a\x05{V[a\x020V[4\x80\x15a\0\xF8W_\x80\xFD[P_T`\x01`\x01`\xA0\x1B\x03\x16a\0\x9CV[a\0\xCCa\x01\x176`\x04a\x05\xDFV[a\x02\xACV[4\x80\x15a\x01'W_\x80\xFD[Pa\0\xCCa\x0166`\x04a\x05{V[a\x030V[4\x80\x15a\x01FW_\x80\xFD[Pa\0\xCCa\x01U6`\x04a\x05YV[a\x03\x7FV[4\x80\x15a\x01eW_\x80\xFD[Pa\0\x9Ca\x01t6`\x04a\x05YV[a\x04.V[_\x80_\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xB6\x90\x7F\\`\xDA\x1B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01\x90V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x01\xEEW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xF3V[``\x91P[P\x91P\x91P\x81a\x02\x01W_\x80\xFD[\x80\x80` \x01\x90Q\x81\x01\x90a\x02\x15\x91\x90a\x06\xAEV[\x94\x93PPPPV[a\x02%a\x04kV[a\x02._a\x04\xDEV[V[a\x028a\x04kV[`@Q\x7F\x8F(9p\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c\x8F(9p\x90`$\x01[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\x92W_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xA4W=_\x80>=_\xFD[PPPPPPV[a\x02\xB4a\x04kV[`@Q\x7FO\x1E\xF2\x86\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cO\x1E\xF2\x86\x904\x90a\x02\xFD\x90\x86\x90\x86\x90`\x04\x01a\x06\xC9V[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x03\x14W_\x80\xFD[PZ\xF1\x15\x80\x15a\x03&W=_\x80>=_\xFD[PPPPPPPPV[a\x038a\x04kV[`@Q\x7F6Y\xCF\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x16\x90c6Y\xCF\xE6\x90`$\x01a\x02{V[a\x03\x87a\x04kV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x04\"W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[a\x04+\x81a\x04\xDEV[PV[_\x80_\x83`\x01`\x01`\xA0\x1B\x03\x16`@Qa\x01\xB6\x90\x7F\xF8Q\xA4@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01\x90V[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02.W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x04\x19V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x04+W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x05iW_\x80\xFD[\x815a\x05t\x81a\x05EV[\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x05\x8CW_\x80\xFD[\x825a\x05\x97\x81a\x05EV[\x91P` \x83\x015a\x05\xA7\x81a\x05EV[\x80\x91PP\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_\x80_``\x84\x86\x03\x12\x15a\x05\xF1W_\x80\xFD[\x835a\x05\xFC\x81a\x05EV[\x92P` \x84\x015a\x06\x0C\x81a\x05EV[\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x06(W_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x06;W_\x80\xFD[\x815\x81\x81\x11\x15a\x06MWa\x06Ma\x05\xB2V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x06uWa\x06ua\x05\xB2V[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15a\x06\x8DW_\x80\xFD[\x82` \x86\x01` \x83\x017_` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x06\xBEW_\x80\xFD[\x81Qa\x05t\x81a\x05EV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01R_\x82Q\x80`@\x84\x01R\x80` \x85\x01``\x85\x01^_``\x82\x85\x01\x01R```\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x93\x92PPPV\xFE\xA2dipfsX\"\x12 \xC0k\xA8M%Y\xB8\xA9\x1B\xFF\ns\x85\xB8U\x99\x82\xC5\x91m\xEEW\xB9J\xA8\xB1\xB0\xB0\xE7`\xF3\xE8dsolcC\0\x08\x19\x003`\x80`@R`@Qa\r\x898\x03\x80a\r\x89\x839\x81\x01`@\x81\x90Ra\0\"\x91a\x03\xB7V[\x82\x81a\0/\x82\x82_a\0CV[Pa\0;\x90P\x82a\0nV[PPPa\x04\xCDV[a\0L\x83a\0\xDBV[_\x82Q\x11\x80a\0XWP\x80[\x15a\0iWa\0g\x83\x83a\x01\x1AV[P[PPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\0\xAD_\x80Q` a\rB\x839\x81Q\x91RT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\0\xD8\x81a\x01FV[PV[a\0\xE4\x81a\x01\xE1V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90_\x90\xA2PV[``a\x01?\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\rb`'\x919a\x02uV[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\xB0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01Reddress`\xD0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[\x80_\x80Q` a\rB\x839\x81Q\x91R[\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x02NW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01Rl\x1B\xDD\x08\x18H\x18\xDB\xDB\x9D\x1C\x98X\xDD`\x9A\x1B`d\x82\x01R`\x84\x01a\x01\xA7V[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x01\xC0V[```\x01`\x01`\xA0\x1B\x03\x84\x16;a\x02\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01Re\x1B\x9D\x1C\x98X\xDD`\xD2\x1B`d\x82\x01R`\x84\x01a\x01\xA7V[_\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x02\xF7\x91\x90a\x04\x82V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\x03/W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x034V[``\x91P[P\x90\x92P\x90Pa\x03E\x82\x82\x86a\x03OV[\x96\x95PPPPPPV[``\x83\x15a\x03^WP\x81a\x01?V[\x82Q\x15a\x03nW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x01\xA7\x91\x90a\x04\x98V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\x9EW_\x80\xFD[\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x80_``\x84\x86\x03\x12\x15a\x03\xC9W_\x80\xFD[a\x03\xD2\x84a\x03\x88V[\x92Pa\x03\xE0` \x85\x01a\x03\x88V[`@\x85\x01Q\x90\x92P`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x03\xFCW_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x04\x0FW_\x80\xFD[\x81Q\x81\x81\x11\x15a\x04!Wa\x04!a\x03\xA3V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x04IWa\x04Ia\x03\xA3V[\x81`@R\x82\x81R\x89` \x84\x87\x01\x01\x11\x15a\x04aW_\x80\xFD[\x82` \x86\x01` \x83\x01^_` \x84\x83\x01\x01R\x80\x95PPPPPP\x92P\x92P\x92V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[a\x08h\x80a\x04\xDA_9_\xF3\xFE`\x80`@R`\x046\x10a\0]W_5`\xE0\x1C\x80c\\`\xDA\x1B\x11a\0BW\x80c\\`\xDA\x1B\x14a\0\xA6W\x80c\x8F(9p\x14a\0\xD6W\x80c\xF8Q\xA4@\x14a\0\xF5Wa\0lV[\x80c6Y\xCF\xE6\x14a\0tW\x80cO\x1E\xF2\x86\x14a\0\x93Wa\0lV[6a\0lWa\0ja\x01\tV[\0[a\0ja\x01\tV[4\x80\x15a\0\x7FW_\x80\xFD[Pa\0ja\0\x8E6`\x04a\x07\rV[a\x01#V[a\0ja\0\xA16`\x04a\x07&V[a\x01^V[4\x80\x15a\0\xB1W_\x80\xFD[Pa\0\xBAa\x01\xC4V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xE1W_\x80\xFD[Pa\0ja\0\xF06`\x04a\x07\rV[a\x01\xF4V[4\x80\x15a\x01\0W_\x80\xFD[Pa\0\xBAa\x02\x14V[a\x01\x11a\x024V[a\x01!a\x01\x1Ca\x02\xE4V[a\x02\xEDV[V[a\x01+a\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01VWa\x01S\x81`@Q\x80` \x01`@R\x80_\x81RP_a\x03=V[PV[a\x01Sa\x01\tV[a\x01fa\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xBCWa\x01\xB7\x83\x83\x83\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP`\x01\x92Pa\x03=\x91PPV[PPPV[a\x01\xB7a\x01\tV[_a\x01\xCDa\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xE9Wa\x01\xE4a\x02\xE4V[\x90P\x90V[a\x01\xF1a\x01\tV[\x90V[a\x01\xFCa\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01VWa\x01S\x81a\x03gV[_a\x02\x1Da\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01\xE9Wa\x01\xE4a\x03\x0BV[a\x02<a\x03\x0BV[`\x01`\x01`\xA0\x1B\x03\x163\x03a\x01!W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`B`$\x82\x01R\x7FTransparentUpgradeableProxy: adm`D\x82\x01R\x7Fin cannot fallback to proxy targ`d\x82\x01R\x7Fet\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x84\x82\x01R`\xA4\x01[`@Q\x80\x91\x03\x90\xFD[_a\x01\xE4a\x03\xBBV[6_\x807_\x806_\x84Z\xF4=_\x80>\x80\x80\x15a\x03\x07W=_\xF3[=_\xFD[_\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[T`\x01`\x01`\xA0\x1B\x03\x16\x91\x90PV[a\x03F\x83a\x03\xE2V[_\x82Q\x11\x80a\x03RWP\x80[\x15a\x01\xB7Wa\x03a\x83\x83a\x04!V[PPPPV[\x7F~dMyB/\x17\xC0\x1EH\x94\xB5\xF4\xF5\x88\xD31\xEB\xFA(e=B\xAE\x83-\xC5\x9E8\xC9y\x8Fa\x03\x90a\x03\x0BV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x84\x16` \x83\x01R\x01`@Q\x80\x91\x03\x90\xA1a\x01S\x81a\x04MV[_\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x03.V[a\x03\xEB\x81a\x05%V[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90_\x90\xA2PV[``a\x04F\x83\x83`@Q\x80``\x01`@R\x80`'\x81R` \x01a\x08\x0C`'\x919a\x05\xC9V[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x04\xC9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FERC1967: new admin is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\xDBV[\x80\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03[\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x05\xA2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC1967: new implementation is n`D\x82\x01R\x7Fot a contract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\xDBV[\x80\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCa\x04\xECV[```\x01`\x01`\xA0\x1B\x03\x84\x16;a\x06HW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: delegate call to non-co`D\x82\x01R\x7Fntract\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\xDBV[_\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x06b\x91\x90a\x07\xA2V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\x06\x9AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06\x9FV[``\x91P[P\x91P\x91Pa\x06\xAF\x82\x82\x86a\x06\xB9V[\x96\x95PPPPPPV[``\x83\x15a\x06\xC8WP\x81a\x04FV[\x82Q\x15a\x06\xD8W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02\xDB\x91\x90a\x07\xB8V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07\x08W_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x07\x1DW_\x80\xFD[a\x04F\x82a\x06\xF2V[_\x80_`@\x84\x86\x03\x12\x15a\x078W_\x80\xFD[a\x07A\x84a\x06\xF2V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x07]W_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x07pW_\x80\xFD[\x815\x81\x81\x11\x15a\x07~W_\x80\xFD[\x87` \x82\x85\x01\x01\x11\x15a\x07\x8FW_\x80\xFD[` \x83\x01\x94P\x80\x93PPPP\x92P\x92P\x92V[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV\xFEAddress: low-level delegate call failed\xA2dipfsX\"\x12 QG\xD3\x89W\xE9\xDFn\x1D\xA1\xB9\x87Q\x98|U\xE3+\xDCL\xB0\t\xEAz\x14Z\xB64\xAE\xE1\x89sdsolcC\0\x08\x19\x003\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03Address: low-level delegate call failed\xA2dipfsX\"\x12 \x19]\x9D\x8E\xEAF\xBA\x1D$\xBA\xD5\xA7\xD2i\xA2\x0EW\r\x85\x19\x8B\xFDm\xCF\x8B\x07\t\xA1\xC4\xBBS<dsolcC\0\x08\x19\x003",
    );
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TemplateUpdated()` and selector `0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc`.
```solidity
event TemplateUpdated();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TemplateUpdated {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TemplateUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TemplateUpdated()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                110u8,
                178u8,
                111u8,
                23u8,
                109u8,
                217u8,
                24u8,
                8u8,
                73u8,
                221u8,
                72u8,
                116u8,
                211u8,
                83u8,
                13u8,
                224u8,
                229u8,
                193u8,
                246u8,
                42u8,
                110u8,
                103u8,
                152u8,
                211u8,
                78u8,
                58u8,
                191u8,
                193u8,
                31u8,
                29u8,
                178u8,
                204u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TemplateUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TemplateUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TemplateUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletCreated(address,address,address,address)` and selector `0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48`.
```solidity
event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletCreated {
        #[allow(missing_docs)]
        pub walletAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub executorAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub ownerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub adminProxy: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletCreated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletCreated(address,address,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                122u8,
                111u8,
                227u8,
                158u8,
                98u8,
                226u8,
                174u8,
                237u8,
                246u8,
                67u8,
                8u8,
                147u8,
                248u8,
                206u8,
                103u8,
                198u8,
                170u8,
                8u8,
                201u8,
                45u8,
                60u8,
                125u8,
                102u8,
                200u8,
                55u8,
                6u8,
                5u8,
                126u8,
                225u8,
                120u8,
                238u8,
                72u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    walletAddress: topics.1,
                    executorAddress: topics.2,
                    ownerAddress: topics.3,
                    adminProxy: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.adminProxy,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.walletAddress.clone(),
                    self.executorAddress.clone(),
                    self.ownerAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.walletAddress,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.executorAddress,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.ownerAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for WalletCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &WalletCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `createWallet(address[])` and selector `0x1cf89b4b`.
```solidity
function createWallet(address[] memory initialExecutorAllowedDests) external returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createWalletCall {
        #[allow(missing_docs)]
        pub initialExecutorAllowedDests: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`createWallet(address[])`](createWalletCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createWalletReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createWalletCall> for UnderlyingRustTuple<'_> {
                fn from(value: createWalletCall) -> Self {
                    (value.initialExecutorAllowedDests,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createWalletCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        initialExecutorAllowedDests: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createWalletReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createWalletReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createWalletReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createWalletCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createWalletReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createWallet(address[])";
            const SELECTOR: [u8; 4] = [28u8, 248u8, 155u8, 75u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.initialExecutorAllowedDests,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setTemplate(address)` and selector `0x89c716d1`.
```solidity
function setTemplate(address _template) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTemplateCall {
        #[allow(missing_docs)]
        pub _template: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setTemplate(address)`](setTemplateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTemplateReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTemplateCall> for UnderlyingRustTuple<'_> {
                fn from(value: setTemplateCall) -> Self {
                    (value._template,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTemplateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _template: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTemplateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setTemplateReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTemplateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTemplateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTemplateReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTemplate(address)";
            const SELECTOR: [u8; 4] = [137u8, 199u8, 22u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._template,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `template()` and selector `0x6f2ddd93`.
```solidity
function template() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct templateCall {}
    ///Container type for the return parameters of the [`template()`](templateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct templateReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<templateCall> for UnderlyingRustTuple<'_> {
                fn from(value: templateCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for templateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<templateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: templateReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for templateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for templateCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = templateReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "template()";
            const SELECTOR: [u8; 4] = [111u8, 45u8, 221u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ValidatorWalletCreator`](self) function calls.
    pub enum ValidatorWalletCreatorCalls {
        #[allow(missing_docs)]
        createWallet(createWalletCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        setTemplate(setTemplateCall),
        #[allow(missing_docs)]
        template(templateCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl ValidatorWalletCreatorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [28u8, 248u8, 155u8, 75u8],
            [111u8, 45u8, 221u8, 147u8],
            [113u8, 80u8, 24u8, 166u8],
            [137u8, 199u8, 22u8, 209u8],
            [141u8, 165u8, 203u8, 91u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ValidatorWalletCreatorCalls {
        const NAME: &'static str = "ValidatorWalletCreatorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createWallet(_) => {
                    <createWalletCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTemplate(_) => {
                    <setTemplateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::template(_) => <templateCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ValidatorWalletCreatorCalls>] = &[
                {
                    fn createWallet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCreatorCalls> {
                        <createWalletCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCreatorCalls::createWallet)
                    }
                    createWallet
                },
                {
                    fn template(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCreatorCalls> {
                        <templateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCreatorCalls::template)
                    }
                    template
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCreatorCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCreatorCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn setTemplate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCreatorCalls> {
                        <setTemplateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCreatorCalls::setTemplate)
                    }
                    setTemplate
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCreatorCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCreatorCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCreatorCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCreatorCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createWallet(inner) => {
                    <createWalletCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setTemplate(inner) => {
                    <setTemplateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::template(inner) => {
                    <templateCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createWallet(inner) => {
                    <createWalletCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setTemplate(inner) => {
                    <setTemplateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::template(inner) => {
                    <templateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ValidatorWalletCreator`](self) events.
    pub enum ValidatorWalletCreatorEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        TemplateUpdated(TemplateUpdated),
        #[allow(missing_docs)]
        WalletCreated(WalletCreated),
    }
    #[automatically_derived]
    impl ValidatorWalletCreatorEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                110u8,
                178u8,
                111u8,
                23u8,
                109u8,
                217u8,
                24u8,
                8u8,
                73u8,
                221u8,
                72u8,
                116u8,
                211u8,
                83u8,
                13u8,
                224u8,
                229u8,
                193u8,
                246u8,
                42u8,
                110u8,
                103u8,
                152u8,
                211u8,
                78u8,
                58u8,
                191u8,
                193u8,
                31u8,
                29u8,
                178u8,
                204u8,
            ],
            [
                122u8,
                111u8,
                227u8,
                158u8,
                98u8,
                226u8,
                174u8,
                237u8,
                246u8,
                67u8,
                8u8,
                147u8,
                248u8,
                206u8,
                103u8,
                198u8,
                170u8,
                8u8,
                201u8,
                45u8,
                60u8,
                125u8,
                102u8,
                200u8,
                55u8,
                6u8,
                5u8,
                126u8,
                225u8,
                120u8,
                238u8,
                72u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ValidatorWalletCreatorEvents {
        const NAME: &'static str = "ValidatorWalletCreatorEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(<TemplateUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TemplateUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TemplateUpdated)
                }
                Some(<WalletCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <WalletCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletCreated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ValidatorWalletCreatorEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TemplateUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TemplateUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ValidatorWalletCreator`](self) contract instance.

See the [wrapper's documentation](`ValidatorWalletCreatorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ValidatorWalletCreatorInstance<T, P, N> {
        ValidatorWalletCreatorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ValidatorWalletCreatorInstance<T, P, N>>,
    > {
        ValidatorWalletCreatorInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ValidatorWalletCreatorInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ValidatorWalletCreator`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ValidatorWalletCreator`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ValidatorWalletCreatorInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ValidatorWalletCreatorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ValidatorWalletCreatorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ValidatorWalletCreatorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ValidatorWalletCreator`](self) contract instance.

See the [wrapper's documentation](`ValidatorWalletCreatorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ValidatorWalletCreatorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ValidatorWalletCreatorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ValidatorWalletCreatorInstance<T, P, N> {
            ValidatorWalletCreatorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ValidatorWalletCreatorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createWallet`] function.
        pub fn createWallet(
            &self,
            initialExecutorAllowedDests: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, createWalletCall, N> {
            self.call_builder(
                &createWalletCall {
                    initialExecutorAllowedDests,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`setTemplate`] function.
        pub fn setTemplate(
            &self,
            _template: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setTemplateCall, N> {
            self.call_builder(&setTemplateCall { _template })
        }
        ///Creates a new call builder for the [`template`] function.
        pub fn template(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, templateCall, N> {
            self.call_builder(&templateCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ValidatorWalletCreatorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`TemplateUpdated`] event.
        pub fn TemplateUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TemplateUpdated, N> {
            self.event_filter::<TemplateUpdated>()
        }
        ///Creates a new event filter for the [`WalletCreated`] event.
        pub fn WalletCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletCreated, N> {
            self.event_filter::<WalletCreated>()
        }
    }
}
