/**

Generated by the following Solidity interface...
```solidity
interface CacheManager {
    struct Entry {
        bytes32 code;
        uint64 size;
        uint192 bid;
    }

    error AlreadyCached(bytes32 codehash);
    error AsmTooLarge(uint256 asm, uint256 queueSize, uint256 cacheSize);
    error BidTooLarge(uint256 bid);
    error BidTooSmall(uint192 bid, uint192 min);
    error BidsArePaused();
    error MakeSpaceTooLarge(uint64 size, uint64 limit);
    error NotChainOwner(address sender);

    event DeleteBid(bytes32 indexed codehash, uint192 bid, uint64 size);
    event Initialized(uint8 version);
    event InsertBid(bytes32 indexed codehash, address program, uint192 bid, uint64 size);
    event Pause();
    event SetCacheSize(uint64 size);
    event SetDecayRate(uint64 decay);
    event Unpause();

    function cacheSize() external view returns (uint64);
    function decay() external view returns (uint64);
    function entries(uint256) external view returns (bytes32 code, uint64 size, uint192 bid);
    function evictAll() external;
    function evictPrograms(uint256 count) external;
    function getEntries() external view returns (Entry[] memory);
    function getMinBid(address program) external view returns (uint192 min);
    function getMinBid(bytes32 codehash) external view returns (uint192 min);
    function getMinBid(uint64 size) external view returns (uint192 min);
    function getSmallestEntries(uint256 k) external view returns (Entry[] memory result);
    function initialize(uint64 initCacheSize, uint64 initDecay) external;
    function isPaused() external view returns (bool);
    function makeSpace(uint64 size) external payable returns (uint64 space);
    function paused() external;
    function placeBid(address program) external payable;
    function queueSize() external view returns (uint64);
    function setCacheSize(uint64 newSize) external;
    function setDecayRate(uint64 newDecay) external;
    function sweepFunds() external;
    function unpause() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "cacheSize",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "decay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "entries",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "code",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "size",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "bid",
        "type": "uint192",
        "internalType": "uint192"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "evictAll",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "evictPrograms",
    "inputs": [
      {
        "name": "count",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getEntries",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple[]",
        "internalType": "struct CacheManager.Entry[]",
        "components": [
          {
            "name": "code",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "size",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "bid",
            "type": "uint192",
            "internalType": "uint192"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getMinBid",
    "inputs": [
      {
        "name": "program",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "min",
        "type": "uint192",
        "internalType": "uint192"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getMinBid",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "min",
        "type": "uint192",
        "internalType": "uint192"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getMinBid",
    "inputs": [
      {
        "name": "size",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [
      {
        "name": "min",
        "type": "uint192",
        "internalType": "uint192"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSmallestEntries",
    "inputs": [
      {
        "name": "k",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "result",
        "type": "tuple[]",
        "internalType": "struct CacheManager.Entry[]",
        "components": [
          {
            "name": "code",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "size",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "bid",
            "type": "uint192",
            "internalType": "uint192"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "initCacheSize",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "initDecay",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isPaused",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "makeSpace",
    "inputs": [
      {
        "name": "size",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [
      {
        "name": "space",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "placeBid",
    "inputs": [
      {
        "name": "program",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "queueSize",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setCacheSize",
    "inputs": [
      {
        "name": "newSize",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDecayRate",
    "inputs": [
      {
        "name": "newDecay",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "sweepFunds",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "unpause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DeleteBid",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "bid",
        "type": "uint192",
        "indexed": false,
        "internalType": "uint192"
      },
      {
        "name": "size",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "InsertBid",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "program",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "bid",
        "type": "uint192",
        "indexed": false,
        "internalType": "uint192"
      },
      {
        "name": "size",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Pause",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SetCacheSize",
    "inputs": [
      {
        "name": "size",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SetDecayRate",
    "inputs": [
      {
        "name": "decay",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Unpause",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyCached",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AsmTooLarge",
    "inputs": [
      {
        "name": "asm",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "queueSize",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "cacheSize",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "BidTooLarge",
    "inputs": [
      {
        "name": "bid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "BidTooSmall",
    "inputs": [
      {
        "name": "bid",
        "type": "uint192",
        "internalType": "uint192"
      },
      {
        "name": "min",
        "type": "uint192",
        "internalType": "uint192"
      }
    ]
  },
  {
    "type": "error",
    "name": "BidsArePaused",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MakeSpaceTooLarge",
    "inputs": [
      {
        "name": "size",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "limit",
        "type": "uint64",
        "internalType": "uint64"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotChainOwner",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod CacheManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052306080523480156012575f5ffd5b50608051611fcf61002b5f395f6105d10152611fcf5ff3fe608060405260043610610157575f3560e01c8063b187bd26116100bb578063c77ed13e11610071578063d29b303e11610057578063d29b303e146103d1578063e4940157146103f0578063e9c1bc0f14610403575f5ffd5b8063c77ed13e14610393578063cadb43e2146103b2575f5ffd5b8063bae6c2ad116100a1578063bae6c2ad14610335578063c1c013c414610361578063c565a20814610374575f5ffd5b8063b187bd26146102b9578063b30906d4146102e9575f5ffd5b806354fac919116101105780635c975abb116100f65780635c975abb14610271578063674a64e014610285578063a8d6fe04146102a5575f5ffd5b806354fac919146102105780635c32e9431461025d575f5ffd5b80632dd4f566116101405780632dd4f566146101a657806332052a9b146101c55780633f4ba83a146101fc575f5ffd5b806317be85c31461015b57806320f2f34514610185575b5f5ffd5b348015610166575f5ffd5b5061016f610422565b60405161017c9190611d1b565b60405180910390f35b348015610190575f5ffd5b506101a461019f366004611da8565b6104b3565b005b3480156101b1575f5ffd5b506101a46101c0366004611dd9565b610717565b3480156101d0575f5ffd5b506101e46101df366004611e13565b6107eb565b6040516001600160c01b03909116815260200161017c565b348015610207575f5ffd5b506101a4610812565b34801561021b575f5ffd5b5060035461024490700100000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161017c565b348015610268575f5ffd5b506101a46108e1565b34801561027c575f5ffd5b506101a4610975565b348015610290575f5ffd5b506003546102449067ffffffffffffffff1681565b3480156102b0575f5ffd5b506101a4610a4a565b3480156102c4575f5ffd5b506003546102d990600160c01b900460ff1681565b604051901515815260200161017c565b3480156102f4575f5ffd5b50610308610303366004611e2e565b610b29565b6040805193845267ffffffffffffffff90921660208401526001600160c01b03169082015260600161017c565b348015610340575f5ffd5b506003546102449068010000000000000000900467ffffffffffffffff1681565b61024461036f366004611dd9565b610b76565b34801561037f575f5ffd5b506101e461038e366004611e2e565b610c48565b34801561039e575f5ffd5b506101a46103ad366004611dd9565b610c55565b3480156103bd575f5ffd5b506101a46103cc366004611e2e565b610d4f565b3480156103dc575f5ffd5b506101e46103eb366004611dd9565b610e1d565b6101a46103fe366004611e13565b611014565b34801561040e575f5ffd5b5061016f61041d366004611e2e565b6110e2565b60606002805480602002602001604051908101604052809291908181526020015f905b828210156104aa575f84815260209081902060408051606081018252600286029092018054835260019081015467ffffffffffffffff8116848601526801000000000000000090046001600160c01b0316918301919091529083529092019101610445565b50505050905090565b5f54610100900460ff16158080156104d157505f54600160ff909116105b806104ea5750303b1580156104ea57505f5460ff166001145b61057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156105ba575f805461ff0019166101001790555b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361067f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610572565b6003805467ffffffffffffffff848116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffff0000000000000000909216908616171790558015610712575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa158015610751573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107759190611e45565b61079457604051639531eff160e01b8152336004820152602401610572565b6003805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527fca22875e098f3b9c06ff3950c0cded621c968253a16623e890165451094c1839906020015b60405180910390a150565b5f61080c8273ffffffffffffffffffffffffffffffffffffffff163f610c48565b92915050565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa15801561084c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108709190611e45565b61088f57604051639531eff160e01b8152336004820152602401610572565b600380547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff1690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33905f90a1565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa15801561091b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061093f9190611e45565b61095e57604051639531eff160e01b8152336004820152602401610572565b6109685f19610d4f565b61097360025f611ce4565b565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa1580156109af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d39190611e45565b6109f257604051639531eff160e01b8152336004820152602401610572565b600380547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625905f90a1565b5f5f606b73ffffffffffffffffffffffffffffffffffffffff16632d9125e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a96573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aba9190611e64565b73ffffffffffffffffffffffffffffffffffffffff16476040515f6040518083038185875af1925050503d805f8114610b0e576040519150601f19603f3d011682016040523d82523d5f602084013e610b13565b606091505b509150915081610b2557805160208201fd5b5050565b60028181548110610b38575f80fd5b5f9182526020909120600290910201805460019091015490915067ffffffffffffffff8116906801000000000000000090046001600160c01b031683565b6003545f90600160c01b900460ff1615610bbc576040517f8f55c96c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6250000067ffffffffffffffff83161115610c18576040517fe6b801f300000000000000000000000000000000000000000000000000000000815267ffffffffffffffff83166004820152625000006024820152604401610572565b610c2182611242565b505060035461080c9067ffffffffffffffff68010000000000000000820481169116611e93565b5f61080c6103eb83611323565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa158015610c8f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb39190611e45565b610cd257604051639531eff160e01b8152336004820152602401610572565b600380547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000067ffffffffffffffff8416908102919091179091556040519081527fd5ad38a519f54c97117f5a79fa7e82b03f32d2719f3ce4a27d4b561217cfea0c906020016107e0565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa158015610d89573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dad9190611e45565b610dcc57604051639531eff160e01b8152336004820152602401610572565b60015415801590610ddc57505f81115b15610e1a575f5f610df8610df060016113c8565b604081901c91565b91509150610e0682826113d6565b610e11600184611eb3565b92505050610dcc565b50565b6003545f9067ffffffffffffffff9081169083161115610e87576003546040517fbcc27c3700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff80851660048301525f60248301529091166044820152606401610572565b61100067ffffffffffffffff83161015610ea357611000610ea5565b815b6003549092505f90610ece90849068010000000000000000900467ffffffffffffffff16611ec6565b60035467ffffffffffffffff9182169250168111610eee57505f92915050565b6003545f90610f079067ffffffffffffffff1683611eb3565b90505f6110006001610f198285611ee6565b610f239190611eb3565b610f2d9190611ef9565b90505f610f39826110e2565b90505f5b8151811015610fd657818181518110610f5857610f58611f18565b60200260200101516020015167ffffffffffffffff168411610f9957818181518110610f8657610f86611f18565b6020026020010151604001519550610fd6565b818181518110610fab57610fab611f18565b60200260200101516020015167ffffffffffffffff1684610fcc9190611eb3565b9350600101610f3d565b505f610fe0611594565b905080866001600160c01b03161015610fff57505f9695505050505050565b6110098187611f2c565b979650505050505050565b600354600160c01b900460ff1615611058576040517f8f55c96c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81163f611079816115c6565b156110b3576040517fc7e2d8e500000000000000000000000000000000000000000000000000000000815260048101829052602401610572565b5f6110bd82611323565b90505f5f6110ca83611242565b915091506110db8286868685611640565b5050505050565b6060816110ee60015490565b10156110fa5760015491505b5f61110660018461196b565b9050805167ffffffffffffffff81111561112257611122611f4b565b60405190808252806020026020018201604052801561116b57816020015b604080516060810182525f80825260208083018290529282015282525f199092019101816111405790505b5091505f5b815181101561123b575f61119f83838151811061118f5761118f611f18565b6020026020010151604081901c91565b91505060028167ffffffffffffffff16815481106111bf576111bf611f18565b5f91825260209182902060408051606081018252600293909302909101805483526001015467ffffffffffffffff811693830193909352680100000000000000009092046001600160c01b031691810191909152845185908490811061122757611227611f18565b602090810291909101015250600101611170565b5050919050565b5f5f61124d34611b27565b60025460035491935091505f9067ffffffffffffffff165b60035467ffffffffffffffff8083169161128d91889168010000000000000000900416611ec6565b67ffffffffffffffff1611156112bd576112aa610df060016113c8565b935091506112b882846113d6565b611265565b816001600160c01b0316846001600160c01b0316101561131c576040517fdf370e480000000000000000000000000000000000000000000000000000000081526001600160c01b03808616600483015283166024820152604401610572565b5050915091565b6040517f4089267f000000000000000000000000000000000000000000000000000000008152600481018290525f908190607190634089267f90602401602060405180830381865afa15801561137b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061139f9190611f5f565b905061100063ffffffff821610156113b9576110006113c1565b8063ffffffff165b9392505050565b5f6113c1825f5f6002611b81565b5f60028267ffffffffffffffff16815481106113f4576113f4611f18565b5f91825260209182902060408051606081018252600293909302909101805480845260019091015467ffffffffffffffff811694840194909452680100000000000000009093046001600160c01b031682820152517fce9720130000000000000000000000000000000000000000000000000000000081526004810192909252915060729063ce972013906024015f604051808303815f87803b158015611499575f5ffd5b505af11580156114ab573d5f5f3e3d5ffd5b505050508060200151600360088282829054906101000a900467ffffffffffffffff166114d89190611e93565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550805f01517f65905594d332f592fa6d4b86efc250c300a286b9d4f07f2ae89c3147dc4f39e78483602001516040516115559291906001600160c01b0392909216825267ffffffffffffffff16602082015260400190565b60405180910390a260028267ffffffffffffffff168154811061157a5761157a611f18565b5f9182526020822060029091020181815560010155505050565b6003545f906115c190700100000000000000000000000000000000900467ffffffffffffffff1642611f82565b905090565b6040517fa72f179b000000000000000000000000000000000000000000000000000000008152600481018290525f9060729063a72f179b90602401602060405180830381865afa15801561161c573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080c9190611e45565b60035467ffffffffffffffff8082169161166891859168010000000000000000900416611ec6565b67ffffffffffffffff1611156116d5576003546040517fbcc27c3700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8085166004830152680100000000000000008304811660248301529091166044820152606401610572565b6040805160608101825284815267ffffffffffffffff841660208201526001600160c01b0387168183015290517fe73ac9f200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260729063e73ac9f2906024015f604051808303815f87803b158015611764575f5ffd5b505af1158015611776573d5f5f3e3d5ffd5b506117a29250505067ffffffffffffffff19604088901b1667ffffffffffffffff841617600190611cd7565b82600360088282829054906101000a900467ffffffffffffffff166117c79190611ec6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506002805490508267ffffffffffffffff160361189157600280546001810182555f829052825191027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810191909155602082015160408301516001600160c01b0316680100000000000000000267ffffffffffffffff909116177f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf909101556118f9565b8060028367ffffffffffffffff16815481106118af576118af611f18565b5f9182526020918290208351600290920201908155908201516040909201516001600160c01b0316680100000000000000000267ffffffffffffffff909216919091176001909101555b6040805173ffffffffffffffffffffffffffffffffffffffff871681526001600160c01b038816602082015267ffffffffffffffff851681830152905185917fb9271ce6a232cb5e0010e10fc10b38fe5d25dd27f8c03beef068a581cfc21bec919081900360600190a2505050505050565b6060611a2a565b6001820360011c611989818360069190911b015190565b8510830261199757506119b8565b600681811b830180516020918201519286901b850190815201529150611972565b600682901b81018481526020018390525b50505050565b5f60015b83811015611a1d576001810184118101600690811b84015182821b8501511190910180821b840180516020918201519385901b860190815201919091529050600181811b016119d3565b506110db85858385611972565b50604080515f84815260208082208654815487821882891002821860051b86018085019182529096019390935292939084019190808314155b8015611af0578151845283602001935081840315611af057602082015160019060011b01838110611abf57600182039150611ab9611aa7838560069190911b015190565b600684901b85016020015184866119cf565b50611a63565b611ace818701548284866119cf565b600101838114611ab957611ae781870154828486611972565b50600101611a63565b5050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08382030160051c83526040525092915050565b5f5f611b31611594565b611b3b9084611ee6565b90506001600160c01b0381111561080c576040517ff6e86d2800000000000000000000000000000000000000000000000000000000815260048101829052602401610572565b5f5f8554865f5260205f205f5f1986611bd1578715611c4657878414611bb35750506001828101895593508181611c53565b8254898110611bc25750611c53565b60039650945060019050611c53565b60028711611c0c578315611c465760028703611c0057600184039350838a558383015498508894508315611c53575b50815493506001611c53565b60038703611c235750506001820188558181611c53565b8894508315611c53578254898110611c3b5750611c53565b945060019050611c53565b63a6ca772e5f526004601cfd5b5b83811015611c8d5780830154600182018085015480831087831011611c795750829050815b938501939093555050600181811b01611c54565b8115611cbb576001820360011c935083830154808a10611cad5750611cbb565b808385015550839150611c8d565b6001810115611cca5788828401555b5050505094509492505050565b6119c982825f6003611b81565b5080545f8255600202905f5260205f2090810190610e1a91905b80821115611d17575f8082556001820155600201611cfe565b5090565b602080825282518282018190525f918401906040840190835b81811015611d815783518051845267ffffffffffffffff60208201511660208501526001600160c01b03604082015116604085015250606083019250602084019350600181019050611d34565b509095945050505050565b803567ffffffffffffffff81168114611da3575f5ffd5b919050565b5f5f60408385031215611db9575f5ffd5b611dc283611d8c565b9150611dd060208401611d8c565b90509250929050565b5f60208284031215611de9575f5ffd5b6113c182611d8c565b73ffffffffffffffffffffffffffffffffffffffff81168114610e1a575f5ffd5b5f60208284031215611e23575f5ffd5b81356113c181611df2565b5f60208284031215611e3e575f5ffd5b5035919050565b5f60208284031215611e55575f5ffd5b815180151581146113c1575f5ffd5b5f60208284031215611e74575f5ffd5b81516113c181611df2565b634e487b7160e01b5f52601160045260245ffd5b67ffffffffffffffff828116828216039081111561080c5761080c611e7f565b8181038181111561080c5761080c611e7f565b67ffffffffffffffff818116838216019081111561080c5761080c611e7f565b8082018082111561080c5761080c611e7f565b5f82611f1357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b6001600160c01b03828116828216039081111561080c5761080c611e7f565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215611f6f575f5ffd5b815163ffffffff811681146113c1575f5ffd5b808202811582820484141761080c5761080c611e7f56fea2646970667358221220497a2b57aa1caa9c02c5fe03b5959dadce383bcad5092d558ee359b544348fdd64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0`\x80R4\x80\x15`\x12W__\xFD[P`\x80Qa\x1F\xCFa\0+_9_a\x05\xD1\x01Ra\x1F\xCF_\xF3\xFE`\x80`@R`\x046\x10a\x01WW_5`\xE0\x1C\x80c\xB1\x87\xBD&\x11a\0\xBBW\x80c\xC7~\xD1>\x11a\0qW\x80c\xD2\x9B0>\x11a\0WW\x80c\xD2\x9B0>\x14a\x03\xD1W\x80c\xE4\x94\x01W\x14a\x03\xF0W\x80c\xE9\xC1\xBC\x0F\x14a\x04\x03W__\xFD[\x80c\xC7~\xD1>\x14a\x03\x93W\x80c\xCA\xDBC\xE2\x14a\x03\xB2W__\xFD[\x80c\xBA\xE6\xC2\xAD\x11a\0\xA1W\x80c\xBA\xE6\xC2\xAD\x14a\x035W\x80c\xC1\xC0\x13\xC4\x14a\x03aW\x80c\xC5e\xA2\x08\x14a\x03tW__\xFD[\x80c\xB1\x87\xBD&\x14a\x02\xB9W\x80c\xB3\t\x06\xD4\x14a\x02\xE9W__\xFD[\x80cT\xFA\xC9\x19\x11a\x01\x10W\x80c\\\x97Z\xBB\x11a\0\xF6W\x80c\\\x97Z\xBB\x14a\x02qW\x80cgJd\xE0\x14a\x02\x85W\x80c\xA8\xD6\xFE\x04\x14a\x02\xA5W__\xFD[\x80cT\xFA\xC9\x19\x14a\x02\x10W\x80c\\2\xE9C\x14a\x02]W__\xFD[\x80c-\xD4\xF5f\x11a\x01@W\x80c-\xD4\xF5f\x14a\x01\xA6W\x80c2\x05*\x9B\x14a\x01\xC5W\x80c?K\xA8:\x14a\x01\xFCW__\xFD[\x80c\x17\xBE\x85\xC3\x14a\x01[W\x80c \xF2\xF3E\x14a\x01\x85W[__\xFD[4\x80\x15a\x01fW__\xFD[Pa\x01oa\x04\"V[`@Qa\x01|\x91\x90a\x1D\x1BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x90W__\xFD[Pa\x01\xA4a\x01\x9F6`\x04a\x1D\xA8V[a\x04\xB3V[\0[4\x80\x15a\x01\xB1W__\xFD[Pa\x01\xA4a\x01\xC06`\x04a\x1D\xD9V[a\x07\x17V[4\x80\x15a\x01\xD0W__\xFD[Pa\x01\xE4a\x01\xDF6`\x04a\x1E\x13V[a\x07\xEBV[`@Q`\x01`\x01`\xC0\x1B\x03\x90\x91\x16\x81R` \x01a\x01|V[4\x80\x15a\x02\x07W__\xFD[Pa\x01\xA4a\x08\x12V[4\x80\x15a\x02\x1BW__\xFD[P`\x03Ta\x02D\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01|V[4\x80\x15a\x02hW__\xFD[Pa\x01\xA4a\x08\xE1V[4\x80\x15a\x02|W__\xFD[Pa\x01\xA4a\tuV[4\x80\x15a\x02\x90W__\xFD[P`\x03Ta\x02D\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x02\xB0W__\xFD[Pa\x01\xA4a\nJV[4\x80\x15a\x02\xC4W__\xFD[P`\x03Ta\x02\xD9\x90`\x01`\xC0\x1B\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01|V[4\x80\x15a\x02\xF4W__\xFD[Pa\x03\x08a\x03\x036`\x04a\x1E.V[a\x0B)V[`@\x80Q\x93\x84Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16` \x84\x01R`\x01`\x01`\xC0\x1B\x03\x16\x90\x82\x01R``\x01a\x01|V[4\x80\x15a\x03@W__\xFD[P`\x03Ta\x02D\x90h\x01\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[a\x02Da\x03o6`\x04a\x1D\xD9V[a\x0BvV[4\x80\x15a\x03\x7FW__\xFD[Pa\x01\xE4a\x03\x8E6`\x04a\x1E.V[a\x0CHV[4\x80\x15a\x03\x9EW__\xFD[Pa\x01\xA4a\x03\xAD6`\x04a\x1D\xD9V[a\x0CUV[4\x80\x15a\x03\xBDW__\xFD[Pa\x01\xA4a\x03\xCC6`\x04a\x1E.V[a\rOV[4\x80\x15a\x03\xDCW__\xFD[Pa\x01\xE4a\x03\xEB6`\x04a\x1D\xD9V[a\x0E\x1DV[a\x01\xA4a\x03\xFE6`\x04a\x1E\x13V[a\x10\x14V[4\x80\x15a\x04\x0EW__\xFD[Pa\x01oa\x04\x1D6`\x04a\x1E.V[a\x10\xE2V[```\x02\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a\x04\xAAW_\x84\x81R` \x90\x81\x90 `@\x80Q``\x81\x01\x82R`\x02\x86\x02\x90\x92\x01\x80T\x83R`\x01\x90\x81\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x86\x01Rh\x01\0\0\0\0\0\0\0\0\x90\x04`\x01`\x01`\xC0\x1B\x03\x16\x91\x83\x01\x91\x90\x91R\x90\x83R\x90\x92\x01\x91\x01a\x04EV[PPPP\x90P\x90V[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x04\xD1WP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\x04\xEAWP0;\x15\x80\x15a\x04\xEAWP_T`\xFF\x16`\x01\x14[a\x05{W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01R\x7Fdy initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[_\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16`\x01\x17\x90U\x80\x15a\x05\xBAW_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\x06\x7FW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05rV[`\x03\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x81\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x90\x92\x16\x90\x86\x16\x17\x17\x90U\x80\x15a\x07\x12W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07QW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07u\x91\x90a\x1EEV[a\x07\x94W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\xCA\"\x87^\t\x8F;\x9C\x06\xFF9P\xC0\xCD\xEDb\x1C\x96\x82S\xA1f#\xE8\x90\x16TQ\tL\x189\x90` \x01[`@Q\x80\x91\x03\x90\xA1PV[_a\x08\x0C\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16?a\x0CHV[\x92\x91PPV[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08LW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08p\x91\x90a\x1EEV[a\x08\x8FW`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90U`@Q\x7Fx\x05\x86/h\x9E/\x13\xDF\x9F\x06/\xF4\x82\xAD:\xD1\x12\xAC\xA9\xE0\x84y\x11\xED\x83.\x15\x8CR[3\x90_\x90\xA1V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\x1BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t?\x91\x90a\x1EEV[a\t^W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[a\th_\x19a\rOV[a\ts`\x02_a\x1C\xE4V[V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xAFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD3\x91\x90a\x1EEV[a\t\xF2W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01`\xC0\x1B\x17\x90U`@Q\x7Fi\x85\xA0\"\x10\xA1h\xE6f\x02\xD3#\\\xB6\xDB\x0Ep\xF9+;\xA4\xD3v\xA3<\x0F=\x944\xBF\xF6%\x90_\x90\xA1V[__`ks\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c-\x91%\xE9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\x96W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xBA\x91\x90a\x1EdV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16G`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0B\x0EW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0B\x13V[``\x91P[P\x91P\x91P\x81a\x0B%W\x80Q` \x82\x01\xFD[PPV[`\x02\x81\x81T\x81\x10a\x0B8W_\x80\xFD[_\x91\x82R` \x90\x91 `\x02\x90\x91\x02\x01\x80T`\x01\x90\x91\x01T\x90\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x90h\x01\0\0\0\0\0\0\0\0\x90\x04`\x01`\x01`\xC0\x1B\x03\x16\x83V[`\x03T_\x90`\x01`\xC0\x1B\x90\x04`\xFF\x16\x15a\x0B\xBCW`@Q\x7F\x8FU\xC9l\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[bP\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x11\x15a\x0C\x18W`@Q\x7F\xE6\xB8\x01\xF3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`\x04\x82\x01RbP\0\0`$\x82\x01R`D\x01a\x05rV[a\x0C!\x82a\x12BV[PP`\x03Ta\x08\x0C\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16\x91\x16a\x1E\x93V[_a\x08\x0Ca\x03\xEB\x83a\x13#V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\x8FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xB3\x91\x90a\x1EEV[a\x0C\xD2W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x90\x81\x02\x91\x90\x91\x17\x90\x91U`@Q\x90\x81R\x7F\xD5\xAD8\xA5\x19\xF5L\x97\x11\x7FZy\xFA~\x82\xB0?2\xD2q\x9F<\xE4\xA2}KV\x12\x17\xCF\xEA\x0C\x90` \x01a\x07\xE0V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\x89W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\xAD\x91\x90a\x1EEV[a\r\xCCW`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x01T\x15\x80\x15\x90a\r\xDCWP_\x81\x11[\x15a\x0E\x1AW__a\r\xF8a\r\xF0`\x01a\x13\xC8V[`@\x81\x90\x1C\x91V[\x91P\x91Pa\x0E\x06\x82\x82a\x13\xD6V[a\x0E\x11`\x01\x84a\x1E\xB3V[\x92PPPa\r\xCCV[PV[`\x03T_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x90\x83\x16\x11\x15a\x0E\x87W`\x03T`@Q\x7F\xBC\xC2|7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x16`\x04\x83\x01R_`$\x83\x01R\x90\x91\x16`D\x82\x01R`d\x01a\x05rV[a\x10\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x10\x15a\x0E\xA3Wa\x10\0a\x0E\xA5V[\x81[`\x03T\x90\x92P_\x90a\x0E\xCE\x90\x84\x90h\x01\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1E\xC6V[`\x03Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x92P\x16\x81\x11a\x0E\xEEWP_\x92\x91PPV[`\x03T_\x90a\x0F\x07\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83a\x1E\xB3V[\x90P_a\x10\0`\x01a\x0F\x19\x82\x85a\x1E\xE6V[a\x0F#\x91\x90a\x1E\xB3V[a\x0F-\x91\x90a\x1E\xF9V[\x90P_a\x0F9\x82a\x10\xE2V[\x90P_[\x81Q\x81\x10\x15a\x0F\xD6W\x81\x81\x81Q\x81\x10a\x0FXWa\x0FXa\x1F\x18V[` \x02` \x01\x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x11a\x0F\x99W\x81\x81\x81Q\x81\x10a\x0F\x86Wa\x0F\x86a\x1F\x18V[` \x02` \x01\x01Q`@\x01Q\x95Pa\x0F\xD6V[\x81\x81\x81Q\x81\x10a\x0F\xABWa\x0F\xABa\x1F\x18V[` \x02` \x01\x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84a\x0F\xCC\x91\x90a\x1E\xB3V[\x93P`\x01\x01a\x0F=V[P_a\x0F\xE0a\x15\x94V[\x90P\x80\x86`\x01`\x01`\xC0\x1B\x03\x16\x10\x15a\x0F\xFFWP_\x96\x95PPPPPPV[a\x10\t\x81\x87a\x1F,V[\x97\x96PPPPPPPV[`\x03T`\x01`\xC0\x1B\x90\x04`\xFF\x16\x15a\x10XW`@Q\x7F\x8FU\xC9l\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16?a\x10y\x81a\x15\xC6V[\x15a\x10\xB3W`@Q\x7F\xC7\xE2\xD8\xE5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x05rV[_a\x10\xBD\x82a\x13#V[\x90P__a\x10\xCA\x83a\x12BV[\x91P\x91Pa\x10\xDB\x82\x86\x86\x86\x85a\x16@V[PPPPPV[``\x81a\x10\xEE`\x01T\x90V[\x10\x15a\x10\xFAW`\x01T\x91P[_a\x11\x06`\x01\x84a\x19kV[\x90P\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\"Wa\x11\"a\x1FKV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x11kW\x81` \x01[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x11@W\x90P[P\x91P_[\x81Q\x81\x10\x15a\x12;W_a\x11\x9F\x83\x83\x81Q\x81\x10a\x11\x8FWa\x11\x8Fa\x1F\x18V[` \x02` \x01\x01Q`@\x81\x90\x1C\x91V[\x91PP`\x02\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x11\xBFWa\x11\xBFa\x1F\x18V[_\x91\x82R` \x91\x82\x90 `@\x80Q``\x81\x01\x82R`\x02\x93\x90\x93\x02\x90\x91\x01\x80T\x83R`\x01\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x93\x83\x01\x93\x90\x93Rh\x01\0\0\0\0\0\0\0\0\x90\x92\x04`\x01`\x01`\xC0\x1B\x03\x16\x91\x81\x01\x91\x90\x91R\x84Q\x85\x90\x84\x90\x81\x10a\x12'Wa\x12'a\x1F\x18V[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\x11pV[PP\x91\x90PV[__a\x12M4a\x1B'V[`\x02T`\x03T\x91\x93P\x91P_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16[`\x03Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x83\x16\x91a\x12\x8D\x91\x88\x91h\x01\0\0\0\0\0\0\0\0\x90\x04\x16a\x1E\xC6V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15a\x12\xBDWa\x12\xAAa\r\xF0`\x01a\x13\xC8V[\x93P\x91Pa\x12\xB8\x82\x84a\x13\xD6V[a\x12eV[\x81`\x01`\x01`\xC0\x1B\x03\x16\x84`\x01`\x01`\xC0\x1B\x03\x16\x10\x15a\x13\x1CW`@Q\x7F\xDF7\x0EH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xC0\x1B\x03\x80\x86\x16`\x04\x83\x01R\x83\x16`$\x82\x01R`D\x01a\x05rV[PP\x91P\x91V[`@Q\x7F@\x89&\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R_\x90\x81\x90`q\x90c@\x89&\x7F\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x13{W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\x9F\x91\x90a\x1F_V[\x90Pa\x10\0c\xFF\xFF\xFF\xFF\x82\x16\x10\x15a\x13\xB9Wa\x10\0a\x13\xC1V[\x80c\xFF\xFF\xFF\xFF\x16[\x93\x92PPPV[_a\x13\xC1\x82__`\x02a\x1B\x81V[_`\x02\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x13\xF4Wa\x13\xF4a\x1F\x18V[_\x91\x82R` \x91\x82\x90 `@\x80Q``\x81\x01\x82R`\x02\x93\x90\x93\x02\x90\x91\x01\x80T\x80\x84R`\x01\x90\x91\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x94\x84\x01\x94\x90\x94Rh\x01\0\0\0\0\0\0\0\0\x90\x93\x04`\x01`\x01`\xC0\x1B\x03\x16\x82\x82\x01RQ\x7F\xCE\x97 \x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R\x91P`r\x90c\xCE\x97 \x13\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x14\x99W__\xFD[PZ\xF1\x15\x80\x15a\x14\xABW=__>=_\xFD[PPPP\x80` \x01Q`\x03`\x08\x82\x82\x82\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x14\xD8\x91\x90a\x1E\x93V[\x92Pa\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80_\x01Q\x7Fe\x90U\x94\xD32\xF5\x92\xFAmK\x86\xEF\xC2P\xC3\0\xA2\x86\xB9\xD4\xF0\x7F*\xE8\x9C1G\xDCO9\xE7\x84\x83` \x01Q`@Qa\x15U\x92\x91\x90`\x01`\x01`\xC0\x1B\x03\x92\x90\x92\x16\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA2`\x02\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x15zWa\x15za\x1F\x18V[_\x91\x82R` \x82 `\x02\x90\x91\x02\x01\x81\x81U`\x01\x01UPPPV[`\x03T_\x90a\x15\xC1\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16Ba\x1F\x82V[\x90P\x90V[`@Q\x7F\xA7/\x17\x9B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R_\x90`r\x90c\xA7/\x17\x9B\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x16\x1CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x0C\x91\x90a\x1EEV[`\x03Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x16\x91a\x16h\x91\x85\x91h\x01\0\0\0\0\0\0\0\0\x90\x04\x16a\x1E\xC6V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15a\x16\xD5W`\x03T`@Q\x7F\xBC\xC2|7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x16`\x04\x83\x01Rh\x01\0\0\0\0\0\0\0\0\x83\x04\x81\x16`$\x83\x01R\x90\x91\x16`D\x82\x01R`d\x01a\x05rV[`@\x80Q``\x81\x01\x82R\x84\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x82\x01R`\x01`\x01`\xC0\x1B\x03\x87\x16\x81\x83\x01R\x90Q\x7F\xE7:\xC9\xF2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16`\x04\x82\x01R`r\x90c\xE7:\xC9\xF2\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x17dW__\xFD[PZ\xF1\x15\x80\x15a\x17vW=__>=_\xFD[Pa\x17\xA2\x92PPPg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19`@\x88\x90\x1B\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x17`\x01\x90a\x1C\xD7V[\x82`\x03`\x08\x82\x82\x82\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x17\xC7\x91\x90a\x1E\xC6V[\x92Pa\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x02\x80T\x90P\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18\x91W`\x02\x80T`\x01\x81\x01\x82U_\x82\x90R\x82Q\x91\x02\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCE\x81\x01\x91\x90\x91U` \x82\x01Q`@\x83\x01Q`\x01`\x01`\xC0\x1B\x03\x16h\x01\0\0\0\0\0\0\0\0\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x17\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCF\x90\x91\x01Ua\x18\xF9V[\x80`\x02\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x18\xAFWa\x18\xAFa\x1F\x18V[_\x91\x82R` \x91\x82\x90 \x83Q`\x02\x90\x92\x02\x01\x90\x81U\x90\x82\x01Q`@\x90\x92\x01Q`\x01`\x01`\xC0\x1B\x03\x16h\x01\0\0\0\0\0\0\0\0\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17`\x01\x90\x91\x01U[`@\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x81R`\x01`\x01`\xC0\x1B\x03\x88\x16` \x82\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x81\x83\x01R\x90Q\x85\x91\x7F\xB9'\x1C\xE6\xA22\xCB^\0\x10\xE1\x0F\xC1\x0B8\xFE]%\xDD'\xF8\xC0;\xEE\xF0h\xA5\x81\xCF\xC2\x1B\xEC\x91\x90\x81\x90\x03``\x01\x90\xA2PPPPPPV[``a\x1A*V[`\x01\x82\x03`\x01\x1Ca\x19\x89\x81\x83`\x06\x91\x90\x91\x1B\x01Q\x90V[\x85\x10\x83\x02a\x19\x97WPa\x19\xB8V[`\x06\x81\x81\x1B\x83\x01\x80Q` \x91\x82\x01Q\x92\x86\x90\x1B\x85\x01\x90\x81R\x01R\x91Pa\x19rV[`\x06\x82\x90\x1B\x81\x01\x84\x81R` \x01\x83\x90R[PPPPV[_`\x01[\x83\x81\x10\x15a\x1A\x1DW`\x01\x81\x01\x84\x11\x81\x01`\x06\x90\x81\x1B\x84\x01Q\x82\x82\x1B\x85\x01Q\x11\x90\x91\x01\x80\x82\x1B\x84\x01\x80Q` \x91\x82\x01Q\x93\x85\x90\x1B\x86\x01\x90\x81R\x01\x91\x90\x91R\x90P`\x01\x81\x81\x1B\x01a\x19\xD3V[Pa\x10\xDB\x85\x85\x83\x85a\x19rV[P`@\x80Q_\x84\x81R` \x80\x82 \x86T\x81T\x87\x82\x18\x82\x89\x10\x02\x82\x18`\x05\x1B\x86\x01\x80\x85\x01\x91\x82R\x90\x96\x01\x93\x90\x93R\x92\x93\x90\x84\x01\x91\x90\x80\x83\x14\x15[\x80\x15a\x1A\xF0W\x81Q\x84R\x83` \x01\x93P\x81\x84\x03\x15a\x1A\xF0W` \x82\x01Q`\x01\x90`\x01\x1B\x01\x83\x81\x10a\x1A\xBFW`\x01\x82\x03\x91Pa\x1A\xB9a\x1A\xA7\x83\x85`\x06\x91\x90\x91\x1B\x01Q\x90V[`\x06\x84\x90\x1B\x85\x01` \x01Q\x84\x86a\x19\xCFV[Pa\x1AcV[a\x1A\xCE\x81\x87\x01T\x82\x84\x86a\x19\xCFV[`\x01\x01\x83\x81\x14a\x1A\xB9Wa\x1A\xE7\x81\x87\x01T\x82\x84\x86a\x19rV[P`\x01\x01a\x1AcV[PPP\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x83\x82\x03\x01`\x05\x1C\x83R`@RP\x92\x91PPV[__a\x1B1a\x15\x94V[a\x1B;\x90\x84a\x1E\xE6V[\x90P`\x01`\x01`\xC0\x1B\x03\x81\x11\x15a\x08\x0CW`@Q\x7F\xF6\xE8m(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x05rV[__\x85T\x86_R` _ __\x19\x86a\x1B\xD1W\x87\x15a\x1CFW\x87\x84\x14a\x1B\xB3WPP`\x01\x82\x81\x01\x89U\x93P\x81\x81a\x1CSV[\x82T\x89\x81\x10a\x1B\xC2WPa\x1CSV[`\x03\x96P\x94P`\x01\x90Pa\x1CSV[`\x02\x87\x11a\x1C\x0CW\x83\x15a\x1CFW`\x02\x87\x03a\x1C\0W`\x01\x84\x03\x93P\x83\x8AU\x83\x83\x01T\x98P\x88\x94P\x83\x15a\x1CSW[P\x81T\x93P`\x01a\x1CSV[`\x03\x87\x03a\x1C#WPP`\x01\x82\x01\x88U\x81\x81a\x1CSV[\x88\x94P\x83\x15a\x1CSW\x82T\x89\x81\x10a\x1C;WPa\x1CSV[\x94P`\x01\x90Pa\x1CSV[c\xA6\xCAw._R`\x04`\x1C\xFD[[\x83\x81\x10\x15a\x1C\x8DW\x80\x83\x01T`\x01\x82\x01\x80\x85\x01T\x80\x83\x10\x87\x83\x10\x11a\x1CyWP\x82\x90P\x81[\x93\x85\x01\x93\x90\x93UPP`\x01\x81\x81\x1B\x01a\x1CTV[\x81\x15a\x1C\xBBW`\x01\x82\x03`\x01\x1C\x93P\x83\x83\x01T\x80\x8A\x10a\x1C\xADWPa\x1C\xBBV[\x80\x83\x85\x01UP\x83\x91Pa\x1C\x8DV[`\x01\x81\x01\x15a\x1C\xCAW\x88\x82\x84\x01U[PPPP\x94P\x94\x92PPPV[a\x19\xC9\x82\x82_`\x03a\x1B\x81V[P\x80T_\x82U`\x02\x02\x90_R` _ \x90\x81\x01\x90a\x0E\x1A\x91\x90[\x80\x82\x11\x15a\x1D\x17W_\x80\x82U`\x01\x82\x01U`\x02\x01a\x1C\xFEV[P\x90V[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x1D\x81W\x83Q\x80Q\x84Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16` \x85\x01R`\x01`\x01`\xC0\x1B\x03`@\x82\x01Q\x16`@\x85\x01RP``\x83\x01\x92P` \x84\x01\x93P`\x01\x81\x01\x90Pa\x1D4V[P\x90\x95\x94PPPPPV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x1D\xA3W__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\x1D\xB9W__\xFD[a\x1D\xC2\x83a\x1D\x8CV[\x91Pa\x1D\xD0` \x84\x01a\x1D\x8CV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x1D\xE9W__\xFD[a\x13\xC1\x82a\x1D\x8CV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0E\x1AW__\xFD[_` \x82\x84\x03\x12\x15a\x1E#W__\xFD[\x815a\x13\xC1\x81a\x1D\xF2V[_` \x82\x84\x03\x12\x15a\x1E>W__\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1EUW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x13\xC1W__\xFD[_` \x82\x84\x03\x12\x15a\x1EtW__\xFD[\x81Qa\x13\xC1\x81a\x1D\xF2V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[\x81\x81\x03\x81\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[\x80\x82\x01\x80\x82\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[_\x82a\x1F\x13WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\x01`\x01`\xC0\x1B\x03\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1FoW__\xFD[\x81Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\xC1W__\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x08\x0CWa\x08\x0Ca\x1E\x7FV\xFE\xA2dipfsX\"\x12 Iz+W\xAA\x1C\xAA\x9C\x02\xC5\xFE\x03\xB5\x95\x9D\xAD\xCE8;\xCA\xD5\t-U\x8E\xE3Y\xB5D4\x8F\xDDdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610157575f3560e01c8063b187bd26116100bb578063c77ed13e11610071578063d29b303e11610057578063d29b303e146103d1578063e4940157146103f0578063e9c1bc0f14610403575f5ffd5b8063c77ed13e14610393578063cadb43e2146103b2575f5ffd5b8063bae6c2ad116100a1578063bae6c2ad14610335578063c1c013c414610361578063c565a20814610374575f5ffd5b8063b187bd26146102b9578063b30906d4146102e9575f5ffd5b806354fac919116101105780635c975abb116100f65780635c975abb14610271578063674a64e014610285578063a8d6fe04146102a5575f5ffd5b806354fac919146102105780635c32e9431461025d575f5ffd5b80632dd4f566116101405780632dd4f566146101a657806332052a9b146101c55780633f4ba83a146101fc575f5ffd5b806317be85c31461015b57806320f2f34514610185575b5f5ffd5b348015610166575f5ffd5b5061016f610422565b60405161017c9190611d1b565b60405180910390f35b348015610190575f5ffd5b506101a461019f366004611da8565b6104b3565b005b3480156101b1575f5ffd5b506101a46101c0366004611dd9565b610717565b3480156101d0575f5ffd5b506101e46101df366004611e13565b6107eb565b6040516001600160c01b03909116815260200161017c565b348015610207575f5ffd5b506101a4610812565b34801561021b575f5ffd5b5060035461024490700100000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161017c565b348015610268575f5ffd5b506101a46108e1565b34801561027c575f5ffd5b506101a4610975565b348015610290575f5ffd5b506003546102449067ffffffffffffffff1681565b3480156102b0575f5ffd5b506101a4610a4a565b3480156102c4575f5ffd5b506003546102d990600160c01b900460ff1681565b604051901515815260200161017c565b3480156102f4575f5ffd5b50610308610303366004611e2e565b610b29565b6040805193845267ffffffffffffffff90921660208401526001600160c01b03169082015260600161017c565b348015610340575f5ffd5b506003546102449068010000000000000000900467ffffffffffffffff1681565b61024461036f366004611dd9565b610b76565b34801561037f575f5ffd5b506101e461038e366004611e2e565b610c48565b34801561039e575f5ffd5b506101a46103ad366004611dd9565b610c55565b3480156103bd575f5ffd5b506101a46103cc366004611e2e565b610d4f565b3480156103dc575f5ffd5b506101e46103eb366004611dd9565b610e1d565b6101a46103fe366004611e13565b611014565b34801561040e575f5ffd5b5061016f61041d366004611e2e565b6110e2565b60606002805480602002602001604051908101604052809291908181526020015f905b828210156104aa575f84815260209081902060408051606081018252600286029092018054835260019081015467ffffffffffffffff8116848601526801000000000000000090046001600160c01b0316918301919091529083529092019101610445565b50505050905090565b5f54610100900460ff16158080156104d157505f54600160ff909116105b806104ea5750303b1580156104ea57505f5460ff166001145b61057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156105ba575f805461ff0019166101001790555b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361067f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610572565b6003805467ffffffffffffffff848116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffff0000000000000000909216908616171790558015610712575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa158015610751573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107759190611e45565b61079457604051639531eff160e01b8152336004820152602401610572565b6003805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527fca22875e098f3b9c06ff3950c0cded621c968253a16623e890165451094c1839906020015b60405180910390a150565b5f61080c8273ffffffffffffffffffffffffffffffffffffffff163f610c48565b92915050565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa15801561084c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108709190611e45565b61088f57604051639531eff160e01b8152336004820152602401610572565b600380547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff1690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33905f90a1565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa15801561091b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061093f9190611e45565b61095e57604051639531eff160e01b8152336004820152602401610572565b6109685f19610d4f565b61097360025f611ce4565b565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa1580156109af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d39190611e45565b6109f257604051639531eff160e01b8152336004820152602401610572565b600380547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625905f90a1565b5f5f606b73ffffffffffffffffffffffffffffffffffffffff16632d9125e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a96573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aba9190611e64565b73ffffffffffffffffffffffffffffffffffffffff16476040515f6040518083038185875af1925050503d805f8114610b0e576040519150601f19603f3d011682016040523d82523d5f602084013e610b13565b606091505b509150915081610b2557805160208201fd5b5050565b60028181548110610b38575f80fd5b5f9182526020909120600290910201805460019091015490915067ffffffffffffffff8116906801000000000000000090046001600160c01b031683565b6003545f90600160c01b900460ff1615610bbc576040517f8f55c96c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6250000067ffffffffffffffff83161115610c18576040517fe6b801f300000000000000000000000000000000000000000000000000000000815267ffffffffffffffff83166004820152625000006024820152604401610572565b610c2182611242565b505060035461080c9067ffffffffffffffff68010000000000000000820481169116611e93565b5f61080c6103eb83611323565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa158015610c8f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb39190611e45565b610cd257604051639531eff160e01b8152336004820152602401610572565b600380547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000067ffffffffffffffff8416908102919091179091556040519081527fd5ad38a519f54c97117f5a79fa7e82b03f32d2719f3ce4a27d4b561217cfea0c906020016107e0565b6040516304ddefed60e31b8152336004820152606b906326ef7f6890602401602060405180830381865afa158015610d89573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dad9190611e45565b610dcc57604051639531eff160e01b8152336004820152602401610572565b60015415801590610ddc57505f81115b15610e1a575f5f610df8610df060016113c8565b604081901c91565b91509150610e0682826113d6565b610e11600184611eb3565b92505050610dcc565b50565b6003545f9067ffffffffffffffff9081169083161115610e87576003546040517fbcc27c3700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff80851660048301525f60248301529091166044820152606401610572565b61100067ffffffffffffffff83161015610ea357611000610ea5565b815b6003549092505f90610ece90849068010000000000000000900467ffffffffffffffff16611ec6565b60035467ffffffffffffffff9182169250168111610eee57505f92915050565b6003545f90610f079067ffffffffffffffff1683611eb3565b90505f6110006001610f198285611ee6565b610f239190611eb3565b610f2d9190611ef9565b90505f610f39826110e2565b90505f5b8151811015610fd657818181518110610f5857610f58611f18565b60200260200101516020015167ffffffffffffffff168411610f9957818181518110610f8657610f86611f18565b6020026020010151604001519550610fd6565b818181518110610fab57610fab611f18565b60200260200101516020015167ffffffffffffffff1684610fcc9190611eb3565b9350600101610f3d565b505f610fe0611594565b905080866001600160c01b03161015610fff57505f9695505050505050565b6110098187611f2c565b979650505050505050565b600354600160c01b900460ff1615611058576040517f8f55c96c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81163f611079816115c6565b156110b3576040517fc7e2d8e500000000000000000000000000000000000000000000000000000000815260048101829052602401610572565b5f6110bd82611323565b90505f5f6110ca83611242565b915091506110db8286868685611640565b5050505050565b6060816110ee60015490565b10156110fa5760015491505b5f61110660018461196b565b9050805167ffffffffffffffff81111561112257611122611f4b565b60405190808252806020026020018201604052801561116b57816020015b604080516060810182525f80825260208083018290529282015282525f199092019101816111405790505b5091505f5b815181101561123b575f61119f83838151811061118f5761118f611f18565b6020026020010151604081901c91565b91505060028167ffffffffffffffff16815481106111bf576111bf611f18565b5f91825260209182902060408051606081018252600293909302909101805483526001015467ffffffffffffffff811693830193909352680100000000000000009092046001600160c01b031691810191909152845185908490811061122757611227611f18565b602090810291909101015250600101611170565b5050919050565b5f5f61124d34611b27565b60025460035491935091505f9067ffffffffffffffff165b60035467ffffffffffffffff8083169161128d91889168010000000000000000900416611ec6565b67ffffffffffffffff1611156112bd576112aa610df060016113c8565b935091506112b882846113d6565b611265565b816001600160c01b0316846001600160c01b0316101561131c576040517fdf370e480000000000000000000000000000000000000000000000000000000081526001600160c01b03808616600483015283166024820152604401610572565b5050915091565b6040517f4089267f000000000000000000000000000000000000000000000000000000008152600481018290525f908190607190634089267f90602401602060405180830381865afa15801561137b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061139f9190611f5f565b905061100063ffffffff821610156113b9576110006113c1565b8063ffffffff165b9392505050565b5f6113c1825f5f6002611b81565b5f60028267ffffffffffffffff16815481106113f4576113f4611f18565b5f91825260209182902060408051606081018252600293909302909101805480845260019091015467ffffffffffffffff811694840194909452680100000000000000009093046001600160c01b031682820152517fce9720130000000000000000000000000000000000000000000000000000000081526004810192909252915060729063ce972013906024015f604051808303815f87803b158015611499575f5ffd5b505af11580156114ab573d5f5f3e3d5ffd5b505050508060200151600360088282829054906101000a900467ffffffffffffffff166114d89190611e93565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550805f01517f65905594d332f592fa6d4b86efc250c300a286b9d4f07f2ae89c3147dc4f39e78483602001516040516115559291906001600160c01b0392909216825267ffffffffffffffff16602082015260400190565b60405180910390a260028267ffffffffffffffff168154811061157a5761157a611f18565b5f9182526020822060029091020181815560010155505050565b6003545f906115c190700100000000000000000000000000000000900467ffffffffffffffff1642611f82565b905090565b6040517fa72f179b000000000000000000000000000000000000000000000000000000008152600481018290525f9060729063a72f179b90602401602060405180830381865afa15801561161c573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080c9190611e45565b60035467ffffffffffffffff8082169161166891859168010000000000000000900416611ec6565b67ffffffffffffffff1611156116d5576003546040517fbcc27c3700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8085166004830152680100000000000000008304811660248301529091166044820152606401610572565b6040805160608101825284815267ffffffffffffffff841660208201526001600160c01b0387168183015290517fe73ac9f200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260729063e73ac9f2906024015f604051808303815f87803b158015611764575f5ffd5b505af1158015611776573d5f5f3e3d5ffd5b506117a29250505067ffffffffffffffff19604088901b1667ffffffffffffffff841617600190611cd7565b82600360088282829054906101000a900467ffffffffffffffff166117c79190611ec6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506002805490508267ffffffffffffffff160361189157600280546001810182555f829052825191027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810191909155602082015160408301516001600160c01b0316680100000000000000000267ffffffffffffffff909116177f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf909101556118f9565b8060028367ffffffffffffffff16815481106118af576118af611f18565b5f9182526020918290208351600290920201908155908201516040909201516001600160c01b0316680100000000000000000267ffffffffffffffff909216919091176001909101555b6040805173ffffffffffffffffffffffffffffffffffffffff871681526001600160c01b038816602082015267ffffffffffffffff851681830152905185917fb9271ce6a232cb5e0010e10fc10b38fe5d25dd27f8c03beef068a581cfc21bec919081900360600190a2505050505050565b6060611a2a565b6001820360011c611989818360069190911b015190565b8510830261199757506119b8565b600681811b830180516020918201519286901b850190815201529150611972565b600682901b81018481526020018390525b50505050565b5f60015b83811015611a1d576001810184118101600690811b84015182821b8501511190910180821b840180516020918201519385901b860190815201919091529050600181811b016119d3565b506110db85858385611972565b50604080515f84815260208082208654815487821882891002821860051b86018085019182529096019390935292939084019190808314155b8015611af0578151845283602001935081840315611af057602082015160019060011b01838110611abf57600182039150611ab9611aa7838560069190911b015190565b600684901b85016020015184866119cf565b50611a63565b611ace818701548284866119cf565b600101838114611ab957611ae781870154828486611972565b50600101611a63565b5050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08382030160051c83526040525092915050565b5f5f611b31611594565b611b3b9084611ee6565b90506001600160c01b0381111561080c576040517ff6e86d2800000000000000000000000000000000000000000000000000000000815260048101829052602401610572565b5f5f8554865f5260205f205f5f1986611bd1578715611c4657878414611bb35750506001828101895593508181611c53565b8254898110611bc25750611c53565b60039650945060019050611c53565b60028711611c0c578315611c465760028703611c0057600184039350838a558383015498508894508315611c53575b50815493506001611c53565b60038703611c235750506001820188558181611c53565b8894508315611c53578254898110611c3b5750611c53565b945060019050611c53565b63a6ca772e5f526004601cfd5b5b83811015611c8d5780830154600182018085015480831087831011611c795750829050815b938501939093555050600181811b01611c54565b8115611cbb576001820360011c935083830154808a10611cad5750611cbb565b808385015550839150611c8d565b6001810115611cca5788828401555b5050505094509492505050565b6119c982825f6003611b81565b5080545f8255600202905f5260205f2090810190610e1a91905b80821115611d17575f8082556001820155600201611cfe565b5090565b602080825282518282018190525f918401906040840190835b81811015611d815783518051845267ffffffffffffffff60208201511660208501526001600160c01b03604082015116604085015250606083019250602084019350600181019050611d34565b509095945050505050565b803567ffffffffffffffff81168114611da3575f5ffd5b919050565b5f5f60408385031215611db9575f5ffd5b611dc283611d8c565b9150611dd060208401611d8c565b90509250929050565b5f60208284031215611de9575f5ffd5b6113c182611d8c565b73ffffffffffffffffffffffffffffffffffffffff81168114610e1a575f5ffd5b5f60208284031215611e23575f5ffd5b81356113c181611df2565b5f60208284031215611e3e575f5ffd5b5035919050565b5f60208284031215611e55575f5ffd5b815180151581146113c1575f5ffd5b5f60208284031215611e74575f5ffd5b81516113c181611df2565b634e487b7160e01b5f52601160045260245ffd5b67ffffffffffffffff828116828216039081111561080c5761080c611e7f565b8181038181111561080c5761080c611e7f565b67ffffffffffffffff818116838216019081111561080c5761080c611e7f565b8082018082111561080c5761080c611e7f565b5f82611f1357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b6001600160c01b03828116828216039081111561080c5761080c611e7f565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215611f6f575f5ffd5b815163ffffffff811681146113c1575f5ffd5b808202811582820484141761080c5761080c611e7f56fea2646970667358221220497a2b57aa1caa9c02c5fe03b5959dadce383bcad5092d558ee359b544348fdd64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01WW_5`\xE0\x1C\x80c\xB1\x87\xBD&\x11a\0\xBBW\x80c\xC7~\xD1>\x11a\0qW\x80c\xD2\x9B0>\x11a\0WW\x80c\xD2\x9B0>\x14a\x03\xD1W\x80c\xE4\x94\x01W\x14a\x03\xF0W\x80c\xE9\xC1\xBC\x0F\x14a\x04\x03W__\xFD[\x80c\xC7~\xD1>\x14a\x03\x93W\x80c\xCA\xDBC\xE2\x14a\x03\xB2W__\xFD[\x80c\xBA\xE6\xC2\xAD\x11a\0\xA1W\x80c\xBA\xE6\xC2\xAD\x14a\x035W\x80c\xC1\xC0\x13\xC4\x14a\x03aW\x80c\xC5e\xA2\x08\x14a\x03tW__\xFD[\x80c\xB1\x87\xBD&\x14a\x02\xB9W\x80c\xB3\t\x06\xD4\x14a\x02\xE9W__\xFD[\x80cT\xFA\xC9\x19\x11a\x01\x10W\x80c\\\x97Z\xBB\x11a\0\xF6W\x80c\\\x97Z\xBB\x14a\x02qW\x80cgJd\xE0\x14a\x02\x85W\x80c\xA8\xD6\xFE\x04\x14a\x02\xA5W__\xFD[\x80cT\xFA\xC9\x19\x14a\x02\x10W\x80c\\2\xE9C\x14a\x02]W__\xFD[\x80c-\xD4\xF5f\x11a\x01@W\x80c-\xD4\xF5f\x14a\x01\xA6W\x80c2\x05*\x9B\x14a\x01\xC5W\x80c?K\xA8:\x14a\x01\xFCW__\xFD[\x80c\x17\xBE\x85\xC3\x14a\x01[W\x80c \xF2\xF3E\x14a\x01\x85W[__\xFD[4\x80\x15a\x01fW__\xFD[Pa\x01oa\x04\"V[`@Qa\x01|\x91\x90a\x1D\x1BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x90W__\xFD[Pa\x01\xA4a\x01\x9F6`\x04a\x1D\xA8V[a\x04\xB3V[\0[4\x80\x15a\x01\xB1W__\xFD[Pa\x01\xA4a\x01\xC06`\x04a\x1D\xD9V[a\x07\x17V[4\x80\x15a\x01\xD0W__\xFD[Pa\x01\xE4a\x01\xDF6`\x04a\x1E\x13V[a\x07\xEBV[`@Q`\x01`\x01`\xC0\x1B\x03\x90\x91\x16\x81R` \x01a\x01|V[4\x80\x15a\x02\x07W__\xFD[Pa\x01\xA4a\x08\x12V[4\x80\x15a\x02\x1BW__\xFD[P`\x03Ta\x02D\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01|V[4\x80\x15a\x02hW__\xFD[Pa\x01\xA4a\x08\xE1V[4\x80\x15a\x02|W__\xFD[Pa\x01\xA4a\tuV[4\x80\x15a\x02\x90W__\xFD[P`\x03Ta\x02D\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x02\xB0W__\xFD[Pa\x01\xA4a\nJV[4\x80\x15a\x02\xC4W__\xFD[P`\x03Ta\x02\xD9\x90`\x01`\xC0\x1B\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01|V[4\x80\x15a\x02\xF4W__\xFD[Pa\x03\x08a\x03\x036`\x04a\x1E.V[a\x0B)V[`@\x80Q\x93\x84Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16` \x84\x01R`\x01`\x01`\xC0\x1B\x03\x16\x90\x82\x01R``\x01a\x01|V[4\x80\x15a\x03@W__\xFD[P`\x03Ta\x02D\x90h\x01\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[a\x02Da\x03o6`\x04a\x1D\xD9V[a\x0BvV[4\x80\x15a\x03\x7FW__\xFD[Pa\x01\xE4a\x03\x8E6`\x04a\x1E.V[a\x0CHV[4\x80\x15a\x03\x9EW__\xFD[Pa\x01\xA4a\x03\xAD6`\x04a\x1D\xD9V[a\x0CUV[4\x80\x15a\x03\xBDW__\xFD[Pa\x01\xA4a\x03\xCC6`\x04a\x1E.V[a\rOV[4\x80\x15a\x03\xDCW__\xFD[Pa\x01\xE4a\x03\xEB6`\x04a\x1D\xD9V[a\x0E\x1DV[a\x01\xA4a\x03\xFE6`\x04a\x1E\x13V[a\x10\x14V[4\x80\x15a\x04\x0EW__\xFD[Pa\x01oa\x04\x1D6`\x04a\x1E.V[a\x10\xE2V[```\x02\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a\x04\xAAW_\x84\x81R` \x90\x81\x90 `@\x80Q``\x81\x01\x82R`\x02\x86\x02\x90\x92\x01\x80T\x83R`\x01\x90\x81\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x86\x01Rh\x01\0\0\0\0\0\0\0\0\x90\x04`\x01`\x01`\xC0\x1B\x03\x16\x91\x83\x01\x91\x90\x91R\x90\x83R\x90\x92\x01\x91\x01a\x04EV[PPPP\x90P\x90V[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x04\xD1WP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\x04\xEAWP0;\x15\x80\x15a\x04\xEAWP_T`\xFF\x16`\x01\x14[a\x05{W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01R\x7Fdy initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[_\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16`\x01\x17\x90U\x80\x15a\x05\xBAW_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\x06\x7FW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05rV[`\x03\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x81\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x90\x92\x16\x90\x86\x16\x17\x17\x90U\x80\x15a\x07\x12W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07QW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07u\x91\x90a\x1EEV[a\x07\x94W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\xCA\"\x87^\t\x8F;\x9C\x06\xFF9P\xC0\xCD\xEDb\x1C\x96\x82S\xA1f#\xE8\x90\x16TQ\tL\x189\x90` \x01[`@Q\x80\x91\x03\x90\xA1PV[_a\x08\x0C\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16?a\x0CHV[\x92\x91PPV[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08LW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08p\x91\x90a\x1EEV[a\x08\x8FW`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90U`@Q\x7Fx\x05\x86/h\x9E/\x13\xDF\x9F\x06/\xF4\x82\xAD:\xD1\x12\xAC\xA9\xE0\x84y\x11\xED\x83.\x15\x8CR[3\x90_\x90\xA1V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\x1BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t?\x91\x90a\x1EEV[a\t^W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[a\th_\x19a\rOV[a\ts`\x02_a\x1C\xE4V[V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xAFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD3\x91\x90a\x1EEV[a\t\xF2W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01`\xC0\x1B\x17\x90U`@Q\x7Fi\x85\xA0\"\x10\xA1h\xE6f\x02\xD3#\\\xB6\xDB\x0Ep\xF9+;\xA4\xD3v\xA3<\x0F=\x944\xBF\xF6%\x90_\x90\xA1V[__`ks\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c-\x91%\xE9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\x96W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xBA\x91\x90a\x1EdV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16G`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0B\x0EW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0B\x13V[``\x91P[P\x91P\x91P\x81a\x0B%W\x80Q` \x82\x01\xFD[PPV[`\x02\x81\x81T\x81\x10a\x0B8W_\x80\xFD[_\x91\x82R` \x90\x91 `\x02\x90\x91\x02\x01\x80T`\x01\x90\x91\x01T\x90\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x90h\x01\0\0\0\0\0\0\0\0\x90\x04`\x01`\x01`\xC0\x1B\x03\x16\x83V[`\x03T_\x90`\x01`\xC0\x1B\x90\x04`\xFF\x16\x15a\x0B\xBCW`@Q\x7F\x8FU\xC9l\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[bP\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x11\x15a\x0C\x18W`@Q\x7F\xE6\xB8\x01\xF3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`\x04\x82\x01RbP\0\0`$\x82\x01R`D\x01a\x05rV[a\x0C!\x82a\x12BV[PP`\x03Ta\x08\x0C\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16\x91\x16a\x1E\x93V[_a\x08\x0Ca\x03\xEB\x83a\x13#V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0C\x8FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xB3\x91\x90a\x1EEV[a\x0C\xD2W`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x90\x81\x02\x91\x90\x91\x17\x90\x91U`@Q\x90\x81R\x7F\xD5\xAD8\xA5\x19\xF5L\x97\x11\x7FZy\xFA~\x82\xB0?2\xD2q\x9F<\xE4\xA2}KV\x12\x17\xCF\xEA\x0C\x90` \x01a\x07\xE0V[`@Qc\x04\xDD\xEF\xED`\xE3\x1B\x81R3`\x04\x82\x01R`k\x90c&\xEF\x7Fh\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\x89W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\xAD\x91\x90a\x1EEV[a\r\xCCW`@Qc\x951\xEF\xF1`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\x05rV[`\x01T\x15\x80\x15\x90a\r\xDCWP_\x81\x11[\x15a\x0E\x1AW__a\r\xF8a\r\xF0`\x01a\x13\xC8V[`@\x81\x90\x1C\x91V[\x91P\x91Pa\x0E\x06\x82\x82a\x13\xD6V[a\x0E\x11`\x01\x84a\x1E\xB3V[\x92PPPa\r\xCCV[PV[`\x03T_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x90\x83\x16\x11\x15a\x0E\x87W`\x03T`@Q\x7F\xBC\xC2|7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x16`\x04\x83\x01R_`$\x83\x01R\x90\x91\x16`D\x82\x01R`d\x01a\x05rV[a\x10\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x10\x15a\x0E\xA3Wa\x10\0a\x0E\xA5V[\x81[`\x03T\x90\x92P_\x90a\x0E\xCE\x90\x84\x90h\x01\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1E\xC6V[`\x03Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x92P\x16\x81\x11a\x0E\xEEWP_\x92\x91PPV[`\x03T_\x90a\x0F\x07\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83a\x1E\xB3V[\x90P_a\x10\0`\x01a\x0F\x19\x82\x85a\x1E\xE6V[a\x0F#\x91\x90a\x1E\xB3V[a\x0F-\x91\x90a\x1E\xF9V[\x90P_a\x0F9\x82a\x10\xE2V[\x90P_[\x81Q\x81\x10\x15a\x0F\xD6W\x81\x81\x81Q\x81\x10a\x0FXWa\x0FXa\x1F\x18V[` \x02` \x01\x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x11a\x0F\x99W\x81\x81\x81Q\x81\x10a\x0F\x86Wa\x0F\x86a\x1F\x18V[` \x02` \x01\x01Q`@\x01Q\x95Pa\x0F\xD6V[\x81\x81\x81Q\x81\x10a\x0F\xABWa\x0F\xABa\x1F\x18V[` \x02` \x01\x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84a\x0F\xCC\x91\x90a\x1E\xB3V[\x93P`\x01\x01a\x0F=V[P_a\x0F\xE0a\x15\x94V[\x90P\x80\x86`\x01`\x01`\xC0\x1B\x03\x16\x10\x15a\x0F\xFFWP_\x96\x95PPPPPPV[a\x10\t\x81\x87a\x1F,V[\x97\x96PPPPPPPV[`\x03T`\x01`\xC0\x1B\x90\x04`\xFF\x16\x15a\x10XW`@Q\x7F\x8FU\xC9l\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16?a\x10y\x81a\x15\xC6V[\x15a\x10\xB3W`@Q\x7F\xC7\xE2\xD8\xE5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x05rV[_a\x10\xBD\x82a\x13#V[\x90P__a\x10\xCA\x83a\x12BV[\x91P\x91Pa\x10\xDB\x82\x86\x86\x86\x85a\x16@V[PPPPPV[``\x81a\x10\xEE`\x01T\x90V[\x10\x15a\x10\xFAW`\x01T\x91P[_a\x11\x06`\x01\x84a\x19kV[\x90P\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\"Wa\x11\"a\x1FKV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x11kW\x81` \x01[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x11@W\x90P[P\x91P_[\x81Q\x81\x10\x15a\x12;W_a\x11\x9F\x83\x83\x81Q\x81\x10a\x11\x8FWa\x11\x8Fa\x1F\x18V[` \x02` \x01\x01Q`@\x81\x90\x1C\x91V[\x91PP`\x02\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x11\xBFWa\x11\xBFa\x1F\x18V[_\x91\x82R` \x91\x82\x90 `@\x80Q``\x81\x01\x82R`\x02\x93\x90\x93\x02\x90\x91\x01\x80T\x83R`\x01\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x93\x83\x01\x93\x90\x93Rh\x01\0\0\0\0\0\0\0\0\x90\x92\x04`\x01`\x01`\xC0\x1B\x03\x16\x91\x81\x01\x91\x90\x91R\x84Q\x85\x90\x84\x90\x81\x10a\x12'Wa\x12'a\x1F\x18V[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\x11pV[PP\x91\x90PV[__a\x12M4a\x1B'V[`\x02T`\x03T\x91\x93P\x91P_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16[`\x03Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x83\x16\x91a\x12\x8D\x91\x88\x91h\x01\0\0\0\0\0\0\0\0\x90\x04\x16a\x1E\xC6V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15a\x12\xBDWa\x12\xAAa\r\xF0`\x01a\x13\xC8V[\x93P\x91Pa\x12\xB8\x82\x84a\x13\xD6V[a\x12eV[\x81`\x01`\x01`\xC0\x1B\x03\x16\x84`\x01`\x01`\xC0\x1B\x03\x16\x10\x15a\x13\x1CW`@Q\x7F\xDF7\x0EH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xC0\x1B\x03\x80\x86\x16`\x04\x83\x01R\x83\x16`$\x82\x01R`D\x01a\x05rV[PP\x91P\x91V[`@Q\x7F@\x89&\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R_\x90\x81\x90`q\x90c@\x89&\x7F\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x13{W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\x9F\x91\x90a\x1F_V[\x90Pa\x10\0c\xFF\xFF\xFF\xFF\x82\x16\x10\x15a\x13\xB9Wa\x10\0a\x13\xC1V[\x80c\xFF\xFF\xFF\xFF\x16[\x93\x92PPPV[_a\x13\xC1\x82__`\x02a\x1B\x81V[_`\x02\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x13\xF4Wa\x13\xF4a\x1F\x18V[_\x91\x82R` \x91\x82\x90 `@\x80Q``\x81\x01\x82R`\x02\x93\x90\x93\x02\x90\x91\x01\x80T\x80\x84R`\x01\x90\x91\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x94\x84\x01\x94\x90\x94Rh\x01\0\0\0\0\0\0\0\0\x90\x93\x04`\x01`\x01`\xC0\x1B\x03\x16\x82\x82\x01RQ\x7F\xCE\x97 \x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R\x91P`r\x90c\xCE\x97 \x13\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x14\x99W__\xFD[PZ\xF1\x15\x80\x15a\x14\xABW=__>=_\xFD[PPPP\x80` \x01Q`\x03`\x08\x82\x82\x82\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x14\xD8\x91\x90a\x1E\x93V[\x92Pa\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80_\x01Q\x7Fe\x90U\x94\xD32\xF5\x92\xFAmK\x86\xEF\xC2P\xC3\0\xA2\x86\xB9\xD4\xF0\x7F*\xE8\x9C1G\xDCO9\xE7\x84\x83` \x01Q`@Qa\x15U\x92\x91\x90`\x01`\x01`\xC0\x1B\x03\x92\x90\x92\x16\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA2`\x02\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x15zWa\x15za\x1F\x18V[_\x91\x82R` \x82 `\x02\x90\x91\x02\x01\x81\x81U`\x01\x01UPPPV[`\x03T_\x90a\x15\xC1\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16Ba\x1F\x82V[\x90P\x90V[`@Q\x7F\xA7/\x17\x9B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R_\x90`r\x90c\xA7/\x17\x9B\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x16\x1CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x0C\x91\x90a\x1EEV[`\x03Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x16\x91a\x16h\x91\x85\x91h\x01\0\0\0\0\0\0\0\0\x90\x04\x16a\x1E\xC6V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15a\x16\xD5W`\x03T`@Q\x7F\xBC\xC2|7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x16`\x04\x83\x01Rh\x01\0\0\0\0\0\0\0\0\x83\x04\x81\x16`$\x83\x01R\x90\x91\x16`D\x82\x01R`d\x01a\x05rV[`@\x80Q``\x81\x01\x82R\x84\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x82\x01R`\x01`\x01`\xC0\x1B\x03\x87\x16\x81\x83\x01R\x90Q\x7F\xE7:\xC9\xF2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16`\x04\x82\x01R`r\x90c\xE7:\xC9\xF2\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x17dW__\xFD[PZ\xF1\x15\x80\x15a\x17vW=__>=_\xFD[Pa\x17\xA2\x92PPPg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19`@\x88\x90\x1B\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x17`\x01\x90a\x1C\xD7V[\x82`\x03`\x08\x82\x82\x82\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x17\xC7\x91\x90a\x1E\xC6V[\x92Pa\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x02\x80T\x90P\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18\x91W`\x02\x80T`\x01\x81\x01\x82U_\x82\x90R\x82Q\x91\x02\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCE\x81\x01\x91\x90\x91U` \x82\x01Q`@\x83\x01Q`\x01`\x01`\xC0\x1B\x03\x16h\x01\0\0\0\0\0\0\0\0\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x17\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCF\x90\x91\x01Ua\x18\xF9V[\x80`\x02\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81T\x81\x10a\x18\xAFWa\x18\xAFa\x1F\x18V[_\x91\x82R` \x91\x82\x90 \x83Q`\x02\x90\x92\x02\x01\x90\x81U\x90\x82\x01Q`@\x90\x92\x01Q`\x01`\x01`\xC0\x1B\x03\x16h\x01\0\0\0\0\0\0\0\0\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17`\x01\x90\x91\x01U[`@\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x81R`\x01`\x01`\xC0\x1B\x03\x88\x16` \x82\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x81\x83\x01R\x90Q\x85\x91\x7F\xB9'\x1C\xE6\xA22\xCB^\0\x10\xE1\x0F\xC1\x0B8\xFE]%\xDD'\xF8\xC0;\xEE\xF0h\xA5\x81\xCF\xC2\x1B\xEC\x91\x90\x81\x90\x03``\x01\x90\xA2PPPPPPV[``a\x1A*V[`\x01\x82\x03`\x01\x1Ca\x19\x89\x81\x83`\x06\x91\x90\x91\x1B\x01Q\x90V[\x85\x10\x83\x02a\x19\x97WPa\x19\xB8V[`\x06\x81\x81\x1B\x83\x01\x80Q` \x91\x82\x01Q\x92\x86\x90\x1B\x85\x01\x90\x81R\x01R\x91Pa\x19rV[`\x06\x82\x90\x1B\x81\x01\x84\x81R` \x01\x83\x90R[PPPPV[_`\x01[\x83\x81\x10\x15a\x1A\x1DW`\x01\x81\x01\x84\x11\x81\x01`\x06\x90\x81\x1B\x84\x01Q\x82\x82\x1B\x85\x01Q\x11\x90\x91\x01\x80\x82\x1B\x84\x01\x80Q` \x91\x82\x01Q\x93\x85\x90\x1B\x86\x01\x90\x81R\x01\x91\x90\x91R\x90P`\x01\x81\x81\x1B\x01a\x19\xD3V[Pa\x10\xDB\x85\x85\x83\x85a\x19rV[P`@\x80Q_\x84\x81R` \x80\x82 \x86T\x81T\x87\x82\x18\x82\x89\x10\x02\x82\x18`\x05\x1B\x86\x01\x80\x85\x01\x91\x82R\x90\x96\x01\x93\x90\x93R\x92\x93\x90\x84\x01\x91\x90\x80\x83\x14\x15[\x80\x15a\x1A\xF0W\x81Q\x84R\x83` \x01\x93P\x81\x84\x03\x15a\x1A\xF0W` \x82\x01Q`\x01\x90`\x01\x1B\x01\x83\x81\x10a\x1A\xBFW`\x01\x82\x03\x91Pa\x1A\xB9a\x1A\xA7\x83\x85`\x06\x91\x90\x91\x1B\x01Q\x90V[`\x06\x84\x90\x1B\x85\x01` \x01Q\x84\x86a\x19\xCFV[Pa\x1AcV[a\x1A\xCE\x81\x87\x01T\x82\x84\x86a\x19\xCFV[`\x01\x01\x83\x81\x14a\x1A\xB9Wa\x1A\xE7\x81\x87\x01T\x82\x84\x86a\x19rV[P`\x01\x01a\x1AcV[PPP\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x83\x82\x03\x01`\x05\x1C\x83R`@RP\x92\x91PPV[__a\x1B1a\x15\x94V[a\x1B;\x90\x84a\x1E\xE6V[\x90P`\x01`\x01`\xC0\x1B\x03\x81\x11\x15a\x08\x0CW`@Q\x7F\xF6\xE8m(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x05rV[__\x85T\x86_R` _ __\x19\x86a\x1B\xD1W\x87\x15a\x1CFW\x87\x84\x14a\x1B\xB3WPP`\x01\x82\x81\x01\x89U\x93P\x81\x81a\x1CSV[\x82T\x89\x81\x10a\x1B\xC2WPa\x1CSV[`\x03\x96P\x94P`\x01\x90Pa\x1CSV[`\x02\x87\x11a\x1C\x0CW\x83\x15a\x1CFW`\x02\x87\x03a\x1C\0W`\x01\x84\x03\x93P\x83\x8AU\x83\x83\x01T\x98P\x88\x94P\x83\x15a\x1CSW[P\x81T\x93P`\x01a\x1CSV[`\x03\x87\x03a\x1C#WPP`\x01\x82\x01\x88U\x81\x81a\x1CSV[\x88\x94P\x83\x15a\x1CSW\x82T\x89\x81\x10a\x1C;WPa\x1CSV[\x94P`\x01\x90Pa\x1CSV[c\xA6\xCAw._R`\x04`\x1C\xFD[[\x83\x81\x10\x15a\x1C\x8DW\x80\x83\x01T`\x01\x82\x01\x80\x85\x01T\x80\x83\x10\x87\x83\x10\x11a\x1CyWP\x82\x90P\x81[\x93\x85\x01\x93\x90\x93UPP`\x01\x81\x81\x1B\x01a\x1CTV[\x81\x15a\x1C\xBBW`\x01\x82\x03`\x01\x1C\x93P\x83\x83\x01T\x80\x8A\x10a\x1C\xADWPa\x1C\xBBV[\x80\x83\x85\x01UP\x83\x91Pa\x1C\x8DV[`\x01\x81\x01\x15a\x1C\xCAW\x88\x82\x84\x01U[PPPP\x94P\x94\x92PPPV[a\x19\xC9\x82\x82_`\x03a\x1B\x81V[P\x80T_\x82U`\x02\x02\x90_R` _ \x90\x81\x01\x90a\x0E\x1A\x91\x90[\x80\x82\x11\x15a\x1D\x17W_\x80\x82U`\x01\x82\x01U`\x02\x01a\x1C\xFEV[P\x90V[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x1D\x81W\x83Q\x80Q\x84Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16` \x85\x01R`\x01`\x01`\xC0\x1B\x03`@\x82\x01Q\x16`@\x85\x01RP``\x83\x01\x92P` \x84\x01\x93P`\x01\x81\x01\x90Pa\x1D4V[P\x90\x95\x94PPPPPV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x1D\xA3W__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\x1D\xB9W__\xFD[a\x1D\xC2\x83a\x1D\x8CV[\x91Pa\x1D\xD0` \x84\x01a\x1D\x8CV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x1D\xE9W__\xFD[a\x13\xC1\x82a\x1D\x8CV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0E\x1AW__\xFD[_` \x82\x84\x03\x12\x15a\x1E#W__\xFD[\x815a\x13\xC1\x81a\x1D\xF2V[_` \x82\x84\x03\x12\x15a\x1E>W__\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\x1EUW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x13\xC1W__\xFD[_` \x82\x84\x03\x12\x15a\x1EtW__\xFD[\x81Qa\x13\xC1\x81a\x1D\xF2V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[\x81\x81\x03\x81\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[\x80\x82\x01\x80\x82\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[_\x82a\x1F\x13WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`\x01`\x01`\xC0\x1B\x03\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x08\x0CWa\x08\x0Ca\x1E\x7FV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1FoW__\xFD[\x81Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\xC1W__\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x08\x0CWa\x08\x0Ca\x1E\x7FV\xFE\xA2dipfsX\"\x12 Iz+W\xAA\x1C\xAA\x9C\x02\xC5\xFE\x03\xB5\x95\x9D\xAD\xCE8;\xCA\xD5\t-U\x8E\xE3Y\xB5D4\x8F\xDDdsolcC\0\x08\x1C\x003",
    );
    /**```solidity
struct Entry { bytes32 code; uint64 size; uint192 bid; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Entry {
        #[allow(missing_docs)]
        pub code: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U192,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<192>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            u64,
            alloy::sol_types::private::primitives::aliases::U192,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Entry> for UnderlyingRustTuple<'_> {
            fn from(value: Entry) -> Self {
                (value.code, value.size, value.bid)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Entry {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    code: tuple.0,
                    size: tuple.1,
                    bid: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Entry {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Entry {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.code),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        192,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Entry {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Entry {
            const NAME: &'static str = "Entry";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Entry(bytes32 code,uint64 size,uint192 bid)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.code)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        192,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.bid)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Entry {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.code)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        192,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.bid)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.code,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    192,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.bid, out);
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `AlreadyCached(bytes32)` and selector `0xc7e2d8e5`.
```solidity
error AlreadyCached(bytes32 codehash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyCached {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyCached> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyCached) -> Self {
                (value.codehash,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyCached {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { codehash: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyCached {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyCached(bytes32)";
            const SELECTOR: [u8; 4] = [199u8, 226u8, 216u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.codehash),
                )
            }
        }
    };
    /**Custom error with signature `AsmTooLarge(uint256,uint256,uint256)` and selector `0xbcc27c37`.
```solidity
error AsmTooLarge(uint256 asm, uint256 queueSize, uint256 cacheSize);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AsmTooLarge {
        #[allow(missing_docs)]
        pub asm: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub queueSize: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub cacheSize: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AsmTooLarge> for UnderlyingRustTuple<'_> {
            fn from(value: AsmTooLarge) -> Self {
                (value.asm, value.queueSize, value.cacheSize)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AsmTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    asm: tuple.0,
                    queueSize: tuple.1,
                    cacheSize: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AsmTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AsmTooLarge(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [188u8, 194u8, 124u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.asm),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.queueSize),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.cacheSize),
                )
            }
        }
    };
    /**Custom error with signature `BidTooLarge(uint256)` and selector `0xf6e86d28`.
```solidity
error BidTooLarge(uint256 bid);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BidTooLarge {
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BidTooLarge> for UnderlyingRustTuple<'_> {
            fn from(value: BidTooLarge) -> Self {
                (value.bid,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BidTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { bid: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BidTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BidTooLarge(uint256)";
            const SELECTOR: [u8; 4] = [246u8, 232u8, 109u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                )
            }
        }
    };
    /**Custom error with signature `BidTooSmall(uint192,uint192)` and selector `0xdf370e48`.
```solidity
error BidTooSmall(uint192 bid, uint192 min);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BidTooSmall {
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U192,
        #[allow(missing_docs)]
        pub min: alloy::sol_types::private::primitives::aliases::U192,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<192>,
            alloy::sol_types::sol_data::Uint<192>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U192,
            alloy::sol_types::private::primitives::aliases::U192,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BidTooSmall> for UnderlyingRustTuple<'_> {
            fn from(value: BidTooSmall) -> Self {
                (value.bid, value.min)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BidTooSmall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { bid: tuple.0, min: tuple.1 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BidTooSmall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BidTooSmall(uint192,uint192)";
            const SELECTOR: [u8; 4] = [223u8, 55u8, 14u8, 72u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        192,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                    <alloy::sol_types::sol_data::Uint<
                        192,
                    > as alloy_sol_types::SolType>::tokenize(&self.min),
                )
            }
        }
    };
    /**Custom error with signature `BidsArePaused()` and selector `0x8f55c96c`.
```solidity
error BidsArePaused();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BidsArePaused {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BidsArePaused> for UnderlyingRustTuple<'_> {
            fn from(value: BidsArePaused) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BidsArePaused {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BidsArePaused {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BidsArePaused()";
            const SELECTOR: [u8; 4] = [143u8, 85u8, 201u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MakeSpaceTooLarge(uint64,uint64)` and selector `0xe6b801f3`.
```solidity
error MakeSpaceTooLarge(uint64 size, uint64 limit);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MakeSpaceTooLarge {
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub limit: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u64, u64);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MakeSpaceTooLarge> for UnderlyingRustTuple<'_> {
            fn from(value: MakeSpaceTooLarge) -> Self {
                (value.size, value.limit)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MakeSpaceTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    limit: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MakeSpaceTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MakeSpaceTooLarge(uint64,uint64)";
            const SELECTOR: [u8; 4] = [230u8, 184u8, 1u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.limit),
                )
            }
        }
    };
    /**Custom error with signature `NotChainOwner(address)` and selector `0x9531eff1`.
```solidity
error NotChainOwner(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotChainOwner {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotChainOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotChainOwner) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotChainOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotChainOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotChainOwner(address)";
            const SELECTOR: [u8; 4] = [149u8, 49u8, 239u8, 241u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Event with signature `DeleteBid(bytes32,uint192,uint64)` and selector `0x65905594d332f592fa6d4b86efc250c300a286b9d4f07f2ae89c3147dc4f39e7`.
```solidity
event DeleteBid(bytes32 indexed codehash, uint192 bid, uint64 size);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DeleteBid {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U192,
        #[allow(missing_docs)]
        pub size: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DeleteBid {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<192>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "DeleteBid(bytes32,uint192,uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                101u8,
                144u8,
                85u8,
                148u8,
                211u8,
                50u8,
                245u8,
                146u8,
                250u8,
                109u8,
                75u8,
                134u8,
                239u8,
                194u8,
                80u8,
                195u8,
                0u8,
                162u8,
                134u8,
                185u8,
                212u8,
                240u8,
                127u8,
                42u8,
                232u8,
                156u8,
                49u8,
                71u8,
                220u8,
                79u8,
                57u8,
                231u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    codehash: topics.1,
                    bid: data.0,
                    size: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        192,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.codehash.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.codehash);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DeleteBid {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DeleteBid> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DeleteBid) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint8)` and selector `0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498`.
```solidity
event Initialized(uint8 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                127u8,
                38u8,
                184u8,
                63u8,
                249u8,
                110u8,
                31u8,
                43u8,
                106u8,
                104u8,
                47u8,
                19u8,
                56u8,
                82u8,
                246u8,
                121u8,
                138u8,
                9u8,
                196u8,
                101u8,
                218u8,
                149u8,
                146u8,
                20u8,
                96u8,
                206u8,
                251u8,
                56u8,
                71u8,
                64u8,
                36u8,
                152u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `InsertBid(bytes32,address,uint192,uint64)` and selector `0xb9271ce6a232cb5e0010e10fc10b38fe5d25dd27f8c03beef068a581cfc21bec`.
```solidity
event InsertBid(bytes32 indexed codehash, address program, uint192 bid, uint64 size);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct InsertBid {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U192,
        #[allow(missing_docs)]
        pub size: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for InsertBid {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<192>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "InsertBid(bytes32,address,uint192,uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                185u8,
                39u8,
                28u8,
                230u8,
                162u8,
                50u8,
                203u8,
                94u8,
                0u8,
                16u8,
                225u8,
                15u8,
                193u8,
                11u8,
                56u8,
                254u8,
                93u8,
                37u8,
                221u8,
                39u8,
                248u8,
                192u8,
                59u8,
                238u8,
                240u8,
                104u8,
                165u8,
                129u8,
                207u8,
                194u8,
                27u8,
                236u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    codehash: topics.1,
                    program: data.0,
                    bid: data.1,
                    size: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        192,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.codehash.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.codehash);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for InsertBid {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&InsertBid> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &InsertBid) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Pause()` and selector `0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625`.
```solidity
event Pause();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Pause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Pause {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Pause()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                105u8,
                133u8,
                160u8,
                34u8,
                16u8,
                161u8,
                104u8,
                230u8,
                102u8,
                2u8,
                211u8,
                35u8,
                92u8,
                182u8,
                219u8,
                14u8,
                112u8,
                249u8,
                43u8,
                59u8,
                164u8,
                211u8,
                118u8,
                163u8,
                60u8,
                15u8,
                61u8,
                148u8,
                52u8,
                191u8,
                246u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Pause {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Pause> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Pause) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SetCacheSize(uint64)` and selector `0xca22875e098f3b9c06ff3950c0cded621c968253a16623e890165451094c1839`.
```solidity
event SetCacheSize(uint64 size);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SetCacheSize {
        #[allow(missing_docs)]
        pub size: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SetCacheSize {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SetCacheSize(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                202u8,
                34u8,
                135u8,
                94u8,
                9u8,
                143u8,
                59u8,
                156u8,
                6u8,
                255u8,
                57u8,
                80u8,
                192u8,
                205u8,
                237u8,
                98u8,
                28u8,
                150u8,
                130u8,
                83u8,
                161u8,
                102u8,
                35u8,
                232u8,
                144u8,
                22u8,
                84u8,
                81u8,
                9u8,
                76u8,
                24u8,
                57u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { size: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SetCacheSize {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SetCacheSize> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SetCacheSize) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SetDecayRate(uint64)` and selector `0xd5ad38a519f54c97117f5a79fa7e82b03f32d2719f3ce4a27d4b561217cfea0c`.
```solidity
event SetDecayRate(uint64 decay);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SetDecayRate {
        #[allow(missing_docs)]
        pub decay: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SetDecayRate {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SetDecayRate(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                213u8,
                173u8,
                56u8,
                165u8,
                25u8,
                245u8,
                76u8,
                151u8,
                17u8,
                127u8,
                90u8,
                121u8,
                250u8,
                126u8,
                130u8,
                176u8,
                63u8,
                50u8,
                210u8,
                113u8,
                159u8,
                60u8,
                228u8,
                162u8,
                125u8,
                75u8,
                86u8,
                18u8,
                23u8,
                207u8,
                234u8,
                12u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { decay: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.decay),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SetDecayRate {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SetDecayRate> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SetDecayRate) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Unpause()` and selector `0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33`.
```solidity
event Unpause();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Unpause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Unpause {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Unpause()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                120u8,
                5u8,
                134u8,
                47u8,
                104u8,
                158u8,
                47u8,
                19u8,
                223u8,
                159u8,
                6u8,
                47u8,
                244u8,
                130u8,
                173u8,
                58u8,
                209u8,
                18u8,
                172u8,
                169u8,
                224u8,
                132u8,
                121u8,
                17u8,
                237u8,
                131u8,
                46u8,
                21u8,
                140u8,
                82u8,
                91u8,
                51u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Unpause {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Unpause> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Unpause) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `cacheSize()` and selector `0x674a64e0`.
```solidity
function cacheSize() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cacheSizeCall {}
    ///Container type for the return parameters of the [`cacheSize()`](cacheSizeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cacheSizeReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cacheSizeCall> for UnderlyingRustTuple<'_> {
                fn from(value: cacheSizeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for cacheSizeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cacheSizeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: cacheSizeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for cacheSizeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for cacheSizeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = cacheSizeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "cacheSize()";
            const SELECTOR: [u8; 4] = [103u8, 74u8, 100u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `decay()` and selector `0x54fac919`.
```solidity
function decay() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decayCall {}
    ///Container type for the return parameters of the [`decay()`](decayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decayReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decayCall> for UnderlyingRustTuple<'_> {
                fn from(value: decayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = decayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decay()";
            const SELECTOR: [u8; 4] = [84u8, 250u8, 201u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `entries(uint256)` and selector `0xb30906d4`.
```solidity
function entries(uint256) external view returns (bytes32 code, uint64 size, uint192 bid);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct entriesCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`entries(uint256)`](entriesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct entriesReturn {
        #[allow(missing_docs)]
        pub code: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U192,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<entriesCall> for UnderlyingRustTuple<'_> {
                fn from(value: entriesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for entriesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<192>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                u64,
                alloy::sol_types::private::primitives::aliases::U192,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<entriesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: entriesReturn) -> Self {
                    (value.code, value.size, value.bid)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for entriesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        code: tuple.0,
                        size: tuple.1,
                        bid: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for entriesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = entriesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<192>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "entries(uint256)";
            const SELECTOR: [u8; 4] = [179u8, 9u8, 6u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `evictAll()` and selector `0x5c32e943`.
```solidity
function evictAll() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct evictAllCall {}
    ///Container type for the return parameters of the [`evictAll()`](evictAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct evictAllReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<evictAllCall> for UnderlyingRustTuple<'_> {
                fn from(value: evictAllCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for evictAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<evictAllReturn> for UnderlyingRustTuple<'_> {
                fn from(value: evictAllReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for evictAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for evictAllCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = evictAllReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "evictAll()";
            const SELECTOR: [u8; 4] = [92u8, 50u8, 233u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `evictPrograms(uint256)` and selector `0xcadb43e2`.
```solidity
function evictPrograms(uint256 count) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct evictProgramsCall {
        #[allow(missing_docs)]
        pub count: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`evictPrograms(uint256)`](evictProgramsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct evictProgramsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<evictProgramsCall> for UnderlyingRustTuple<'_> {
                fn from(value: evictProgramsCall) -> Self {
                    (value.count,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for evictProgramsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { count: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<evictProgramsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: evictProgramsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for evictProgramsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for evictProgramsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = evictProgramsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "evictPrograms(uint256)";
            const SELECTOR: [u8; 4] = [202u8, 219u8, 67u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.count),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getEntries()` and selector `0x17be85c3`.
```solidity
function getEntries() external view returns (Entry[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEntriesCall {}
    ///Container type for the return parameters of the [`getEntries()`](getEntriesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEntriesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            <Entry as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEntriesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getEntriesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getEntriesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Entry>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Entry as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEntriesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getEntriesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getEntriesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getEntriesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getEntriesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<Entry>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getEntries()";
            const SELECTOR: [u8; 4] = [23u8, 190u8, 133u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getMinBid(address)` and selector `0x32052a9b`.
```solidity
function getMinBid(address program) external view returns (uint192 min);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinBid_0Call {
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getMinBid(address)`](getMinBid_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinBid_0Return {
        #[allow(missing_docs)]
        pub min: alloy::sol_types::private::primitives::aliases::U192,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinBid_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: getMinBid_0Call) -> Self {
                    (value.program,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMinBid_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { program: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<192>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U192,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinBid_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: getMinBid_0Return) -> Self {
                    (value.min,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMinBid_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { min: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getMinBid_0Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getMinBid_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<192>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getMinBid(address)";
            const SELECTOR: [u8; 4] = [50u8, 5u8, 42u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getMinBid(bytes32)` and selector `0xc565a208`.
```solidity
function getMinBid(bytes32 codehash) external view returns (uint192 min);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinBid_1Call {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getMinBid(bytes32)`](getMinBid_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinBid_1Return {
        #[allow(missing_docs)]
        pub min: alloy::sol_types::private::primitives::aliases::U192,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinBid_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: getMinBid_1Call) -> Self {
                    (value.codehash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMinBid_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { codehash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<192>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U192,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinBid_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: getMinBid_1Return) -> Self {
                    (value.min,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMinBid_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { min: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getMinBid_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getMinBid_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<192>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getMinBid(bytes32)";
            const SELECTOR: [u8; 4] = [197u8, 101u8, 162u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.codehash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getMinBid(uint64)` and selector `0xd29b303e`.
```solidity
function getMinBid(uint64 size) external view returns (uint192 min);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinBid_2Call {
        #[allow(missing_docs)]
        pub size: u64,
    }
    ///Container type for the return parameters of the [`getMinBid(uint64)`](getMinBid_2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinBid_2Return {
        #[allow(missing_docs)]
        pub min: alloy::sol_types::private::primitives::aliases::U192,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinBid_2Call> for UnderlyingRustTuple<'_> {
                fn from(value: getMinBid_2Call) -> Self {
                    (value.size,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMinBid_2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { size: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<192>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U192,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinBid_2Return> for UnderlyingRustTuple<'_> {
                fn from(value: getMinBid_2Return) -> Self {
                    (value.min,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMinBid_2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { min: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getMinBid_2Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getMinBid_2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<192>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getMinBid(uint64)";
            const SELECTOR: [u8; 4] = [210u8, 155u8, 48u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getSmallestEntries(uint256)` and selector `0xe9c1bc0f`.
```solidity
function getSmallestEntries(uint256 k) external view returns (Entry[] memory result);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSmallestEntriesCall {
        #[allow(missing_docs)]
        pub k: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getSmallestEntries(uint256)`](getSmallestEntriesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSmallestEntriesReturn {
        #[allow(missing_docs)]
        pub result: alloy::sol_types::private::Vec<
            <Entry as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSmallestEntriesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSmallestEntriesCall) -> Self {
                    (value.k,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSmallestEntriesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { k: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Entry>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Entry as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSmallestEntriesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSmallestEntriesReturn) -> Self {
                    (value.result,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSmallestEntriesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { result: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSmallestEntriesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getSmallestEntriesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<Entry>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSmallestEntries(uint256)";
            const SELECTOR: [u8; 4] = [233u8, 193u8, 188u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.k),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(uint64,uint64)` and selector `0x20f2f345`.
```solidity
function initialize(uint64 initCacheSize, uint64 initDecay) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub initCacheSize: u64,
        #[allow(missing_docs)]
        pub initDecay: u64,
    }
    ///Container type for the return parameters of the [`initialize(uint64,uint64)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, u64);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.initCacheSize, value.initDecay)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        initCacheSize: tuple.0,
                        initDecay: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(uint64,uint64)";
            const SELECTOR: [u8; 4] = [32u8, 242u8, 243u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.initCacheSize),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.initDecay),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPaused()` and selector `0xb187bd26`.
```solidity
function isPaused() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPausedCall {}
    ///Container type for the return parameters of the [`isPaused()`](isPausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPausedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isPausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isPausedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPausedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPaused()";
            const SELECTOR: [u8; 4] = [177u8, 135u8, 189u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `makeSpace(uint64)` and selector `0xc1c013c4`.
```solidity
function makeSpace(uint64 size) external payable returns (uint64 space);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct makeSpaceCall {
        #[allow(missing_docs)]
        pub size: u64,
    }
    ///Container type for the return parameters of the [`makeSpace(uint64)`](makeSpaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct makeSpaceReturn {
        #[allow(missing_docs)]
        pub space: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<makeSpaceCall> for UnderlyingRustTuple<'_> {
                fn from(value: makeSpaceCall) -> Self {
                    (value.size,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for makeSpaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { size: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<makeSpaceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: makeSpaceReturn) -> Self {
                    (value.space,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for makeSpaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { space: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for makeSpaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = makeSpaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "makeSpace(uint64)";
            const SELECTOR: [u8; 4] = [193u8, 192u8, 19u8, 196u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `paused()` and selector `0x5c975abb`.
```solidity
function paused() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedCall {}
    ///Container type for the return parameters of the [`paused()`](pausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: pausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pausedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pausedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused()";
            const SELECTOR: [u8; 4] = [92u8, 151u8, 90u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `placeBid(address)` and selector `0xe4940157`.
```solidity
function placeBid(address program) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct placeBidCall {
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`placeBid(address)`](placeBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct placeBidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<placeBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: placeBidCall) -> Self {
                    (value.program,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for placeBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { program: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<placeBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: placeBidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for placeBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for placeBidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = placeBidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "placeBid(address)";
            const SELECTOR: [u8; 4] = [228u8, 148u8, 1u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `queueSize()` and selector `0xbae6c2ad`.
```solidity
function queueSize() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct queueSizeCall {}
    ///Container type for the return parameters of the [`queueSize()`](queueSizeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct queueSizeReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<queueSizeCall> for UnderlyingRustTuple<'_> {
                fn from(value: queueSizeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for queueSizeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<queueSizeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: queueSizeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for queueSizeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for queueSizeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = queueSizeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "queueSize()";
            const SELECTOR: [u8; 4] = [186u8, 230u8, 194u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setCacheSize(uint64)` and selector `0x2dd4f566`.
```solidity
function setCacheSize(uint64 newSize) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCacheSizeCall {
        #[allow(missing_docs)]
        pub newSize: u64,
    }
    ///Container type for the return parameters of the [`setCacheSize(uint64)`](setCacheSizeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCacheSizeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCacheSizeCall> for UnderlyingRustTuple<'_> {
                fn from(value: setCacheSizeCall) -> Self {
                    (value.newSize,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setCacheSizeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newSize: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCacheSizeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setCacheSizeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setCacheSizeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setCacheSizeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setCacheSizeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setCacheSize(uint64)";
            const SELECTOR: [u8; 4] = [45u8, 212u8, 245u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.newSize),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDecayRate(uint64)` and selector `0xc77ed13e`.
```solidity
function setDecayRate(uint64 newDecay) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDecayRateCall {
        #[allow(missing_docs)]
        pub newDecay: u64,
    }
    ///Container type for the return parameters of the [`setDecayRate(uint64)`](setDecayRateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDecayRateReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDecayRateCall> for UnderlyingRustTuple<'_> {
                fn from(value: setDecayRateCall) -> Self {
                    (value.newDecay,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDecayRateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newDecay: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDecayRateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setDecayRateReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDecayRateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDecayRateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDecayRateReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDecayRate(uint64)";
            const SELECTOR: [u8; 4] = [199u8, 126u8, 209u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.newDecay),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sweepFunds()` and selector `0xa8d6fe04`.
```solidity
function sweepFunds() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sweepFundsCall {}
    ///Container type for the return parameters of the [`sweepFunds()`](sweepFundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sweepFundsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sweepFundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: sweepFundsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sweepFundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sweepFundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: sweepFundsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sweepFundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sweepFundsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sweepFundsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sweepFunds()";
            const SELECTOR: [u8; 4] = [168u8, 214u8, 254u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `unpause()` and selector `0x3f4ba83a`.
```solidity
function unpause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseCall {}
    ///Container type for the return parameters of the [`unpause()`](unpauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpause()";
            const SELECTOR: [u8; 4] = [63u8, 75u8, 168u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`CacheManager`](self) function calls.
    pub enum CacheManagerCalls {
        #[allow(missing_docs)]
        cacheSize(cacheSizeCall),
        #[allow(missing_docs)]
        decay(decayCall),
        #[allow(missing_docs)]
        entries(entriesCall),
        #[allow(missing_docs)]
        evictAll(evictAllCall),
        #[allow(missing_docs)]
        evictPrograms(evictProgramsCall),
        #[allow(missing_docs)]
        getEntries(getEntriesCall),
        #[allow(missing_docs)]
        getMinBid_0(getMinBid_0Call),
        #[allow(missing_docs)]
        getMinBid_1(getMinBid_1Call),
        #[allow(missing_docs)]
        getMinBid_2(getMinBid_2Call),
        #[allow(missing_docs)]
        getSmallestEntries(getSmallestEntriesCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isPaused(isPausedCall),
        #[allow(missing_docs)]
        makeSpace(makeSpaceCall),
        #[allow(missing_docs)]
        paused(pausedCall),
        #[allow(missing_docs)]
        placeBid(placeBidCall),
        #[allow(missing_docs)]
        queueSize(queueSizeCall),
        #[allow(missing_docs)]
        setCacheSize(setCacheSizeCall),
        #[allow(missing_docs)]
        setDecayRate(setDecayRateCall),
        #[allow(missing_docs)]
        sweepFunds(sweepFundsCall),
        #[allow(missing_docs)]
        unpause(unpauseCall),
    }
    #[automatically_derived]
    impl CacheManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [23u8, 190u8, 133u8, 195u8],
            [32u8, 242u8, 243u8, 69u8],
            [45u8, 212u8, 245u8, 102u8],
            [50u8, 5u8, 42u8, 155u8],
            [63u8, 75u8, 168u8, 58u8],
            [84u8, 250u8, 201u8, 25u8],
            [92u8, 50u8, 233u8, 67u8],
            [92u8, 151u8, 90u8, 187u8],
            [103u8, 74u8, 100u8, 224u8],
            [168u8, 214u8, 254u8, 4u8],
            [177u8, 135u8, 189u8, 38u8],
            [179u8, 9u8, 6u8, 212u8],
            [186u8, 230u8, 194u8, 173u8],
            [193u8, 192u8, 19u8, 196u8],
            [197u8, 101u8, 162u8, 8u8],
            [199u8, 126u8, 209u8, 62u8],
            [202u8, 219u8, 67u8, 226u8],
            [210u8, 155u8, 48u8, 62u8],
            [228u8, 148u8, 1u8, 87u8],
            [233u8, 193u8, 188u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CacheManagerCalls {
        const NAME: &'static str = "CacheManagerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 20usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::cacheSize(_) => {
                    <cacheSizeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::decay(_) => <decayCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::entries(_) => <entriesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::evictAll(_) => <evictAllCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::evictPrograms(_) => {
                    <evictProgramsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getEntries(_) => {
                    <getEntriesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getMinBid_0(_) => {
                    <getMinBid_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getMinBid_1(_) => {
                    <getMinBid_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getMinBid_2(_) => {
                    <getMinBid_2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSmallestEntries(_) => {
                    <getSmallestEntriesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isPaused(_) => <isPausedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::makeSpace(_) => {
                    <makeSpaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::paused(_) => <pausedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::placeBid(_) => <placeBidCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::queueSize(_) => {
                    <queueSizeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setCacheSize(_) => {
                    <setCacheSizeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDecayRate(_) => {
                    <setDecayRateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sweepFunds(_) => {
                    <sweepFundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpause(_) => <unpauseCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<CacheManagerCalls>] = &[
                {
                    fn getEntries(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <getEntriesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::getEntries)
                    }
                    getEntries
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::initialize)
                    }
                    initialize
                },
                {
                    fn setCacheSize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <setCacheSizeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::setCacheSize)
                    }
                    setCacheSize
                },
                {
                    fn getMinBid_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <getMinBid_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::getMinBid_0)
                    }
                    getMinBid_0
                },
                {
                    fn unpause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::unpause)
                    }
                    unpause
                },
                {
                    fn decay(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <decayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::decay)
                    }
                    decay
                },
                {
                    fn evictAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <evictAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::evictAll)
                    }
                    evictAll
                },
                {
                    fn paused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::paused)
                    }
                    paused
                },
                {
                    fn cacheSize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <cacheSizeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::cacheSize)
                    }
                    cacheSize
                },
                {
                    fn sweepFunds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <sweepFundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::sweepFunds)
                    }
                    sweepFunds
                },
                {
                    fn isPaused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <isPausedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::isPaused)
                    }
                    isPaused
                },
                {
                    fn entries(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <entriesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::entries)
                    }
                    entries
                },
                {
                    fn queueSize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <queueSizeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::queueSize)
                    }
                    queueSize
                },
                {
                    fn makeSpace(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <makeSpaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::makeSpace)
                    }
                    makeSpace
                },
                {
                    fn getMinBid_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <getMinBid_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::getMinBid_1)
                    }
                    getMinBid_1
                },
                {
                    fn setDecayRate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <setDecayRateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::setDecayRate)
                    }
                    setDecayRate
                },
                {
                    fn evictPrograms(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <evictProgramsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::evictPrograms)
                    }
                    evictPrograms
                },
                {
                    fn getMinBid_2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <getMinBid_2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::getMinBid_2)
                    }
                    getMinBid_2
                },
                {
                    fn placeBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <placeBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::placeBid)
                    }
                    placeBid
                },
                {
                    fn getSmallestEntries(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerCalls> {
                        <getSmallestEntriesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerCalls::getSmallestEntries)
                    }
                    getSmallestEntries
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::cacheSize(inner) => {
                    <cacheSizeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::decay(inner) => {
                    <decayCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::entries(inner) => {
                    <entriesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::evictAll(inner) => {
                    <evictAllCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::evictPrograms(inner) => {
                    <evictProgramsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getEntries(inner) => {
                    <getEntriesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getMinBid_0(inner) => {
                    <getMinBid_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getMinBid_1(inner) => {
                    <getMinBid_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getMinBid_2(inner) => {
                    <getMinBid_2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSmallestEntries(inner) => {
                    <getSmallestEntriesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isPaused(inner) => {
                    <isPausedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::makeSpace(inner) => {
                    <makeSpaceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::placeBid(inner) => {
                    <placeBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::queueSize(inner) => {
                    <queueSizeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setCacheSize(inner) => {
                    <setCacheSizeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDecayRate(inner) => {
                    <setDecayRateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sweepFunds(inner) => {
                    <sweepFundsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::cacheSize(inner) => {
                    <cacheSizeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::decay(inner) => {
                    <decayCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::entries(inner) => {
                    <entriesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::evictAll(inner) => {
                    <evictAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::evictPrograms(inner) => {
                    <evictProgramsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getEntries(inner) => {
                    <getEntriesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getMinBid_0(inner) => {
                    <getMinBid_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getMinBid_1(inner) => {
                    <getMinBid_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getMinBid_2(inner) => {
                    <getMinBid_2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSmallestEntries(inner) => {
                    <getSmallestEntriesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isPaused(inner) => {
                    <isPausedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::makeSpace(inner) => {
                    <makeSpaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::placeBid(inner) => {
                    <placeBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::queueSize(inner) => {
                    <queueSizeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setCacheSize(inner) => {
                    <setCacheSizeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDecayRate(inner) => {
                    <setDecayRateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sweepFunds(inner) => {
                    <sweepFundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`CacheManager`](self) custom errors.
    pub enum CacheManagerErrors {
        #[allow(missing_docs)]
        AlreadyCached(AlreadyCached),
        #[allow(missing_docs)]
        AsmTooLarge(AsmTooLarge),
        #[allow(missing_docs)]
        BidTooLarge(BidTooLarge),
        #[allow(missing_docs)]
        BidTooSmall(BidTooSmall),
        #[allow(missing_docs)]
        BidsArePaused(BidsArePaused),
        #[allow(missing_docs)]
        MakeSpaceTooLarge(MakeSpaceTooLarge),
        #[allow(missing_docs)]
        NotChainOwner(NotChainOwner),
    }
    #[automatically_derived]
    impl CacheManagerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [143u8, 85u8, 201u8, 108u8],
            [149u8, 49u8, 239u8, 241u8],
            [188u8, 194u8, 124u8, 55u8],
            [199u8, 226u8, 216u8, 229u8],
            [223u8, 55u8, 14u8, 72u8],
            [230u8, 184u8, 1u8, 243u8],
            [246u8, 232u8, 109u8, 40u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CacheManagerErrors {
        const NAME: &'static str = "CacheManagerErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyCached(_) => {
                    <AlreadyCached as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AsmTooLarge(_) => {
                    <AsmTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BidTooLarge(_) => {
                    <BidTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BidTooSmall(_) => {
                    <BidTooSmall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BidsArePaused(_) => {
                    <BidsArePaused as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MakeSpaceTooLarge(_) => {
                    <MakeSpaceTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotChainOwner(_) => {
                    <NotChainOwner as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<CacheManagerErrors>] = &[
                {
                    fn BidsArePaused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerErrors> {
                        <BidsArePaused as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerErrors::BidsArePaused)
                    }
                    BidsArePaused
                },
                {
                    fn NotChainOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerErrors> {
                        <NotChainOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerErrors::NotChainOwner)
                    }
                    NotChainOwner
                },
                {
                    fn AsmTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerErrors> {
                        <AsmTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerErrors::AsmTooLarge)
                    }
                    AsmTooLarge
                },
                {
                    fn AlreadyCached(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerErrors> {
                        <AlreadyCached as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerErrors::AlreadyCached)
                    }
                    AlreadyCached
                },
                {
                    fn BidTooSmall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerErrors> {
                        <BidTooSmall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerErrors::BidTooSmall)
                    }
                    BidTooSmall
                },
                {
                    fn MakeSpaceTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerErrors> {
                        <MakeSpaceTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerErrors::MakeSpaceTooLarge)
                    }
                    MakeSpaceTooLarge
                },
                {
                    fn BidTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CacheManagerErrors> {
                        <BidTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CacheManagerErrors::BidTooLarge)
                    }
                    BidTooLarge
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyCached(inner) => {
                    <AlreadyCached as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::AsmTooLarge(inner) => {
                    <AsmTooLarge as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::BidTooLarge(inner) => {
                    <BidTooLarge as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::BidTooSmall(inner) => {
                    <BidTooSmall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::BidsArePaused(inner) => {
                    <BidsArePaused as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::MakeSpaceTooLarge(inner) => {
                    <MakeSpaceTooLarge as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotChainOwner(inner) => {
                    <NotChainOwner as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyCached(inner) => {
                    <AlreadyCached as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AsmTooLarge(inner) => {
                    <AsmTooLarge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BidTooLarge(inner) => {
                    <BidTooLarge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BidTooSmall(inner) => {
                    <BidTooSmall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BidsArePaused(inner) => {
                    <BidsArePaused as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MakeSpaceTooLarge(inner) => {
                    <MakeSpaceTooLarge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotChainOwner(inner) => {
                    <NotChainOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`CacheManager`](self) events.
    pub enum CacheManagerEvents {
        #[allow(missing_docs)]
        DeleteBid(DeleteBid),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        InsertBid(InsertBid),
        #[allow(missing_docs)]
        Pause(Pause),
        #[allow(missing_docs)]
        SetCacheSize(SetCacheSize),
        #[allow(missing_docs)]
        SetDecayRate(SetDecayRate),
        #[allow(missing_docs)]
        Unpause(Unpause),
    }
    #[automatically_derived]
    impl CacheManagerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                101u8,
                144u8,
                85u8,
                148u8,
                211u8,
                50u8,
                245u8,
                146u8,
                250u8,
                109u8,
                75u8,
                134u8,
                239u8,
                194u8,
                80u8,
                195u8,
                0u8,
                162u8,
                134u8,
                185u8,
                212u8,
                240u8,
                127u8,
                42u8,
                232u8,
                156u8,
                49u8,
                71u8,
                220u8,
                79u8,
                57u8,
                231u8,
            ],
            [
                105u8,
                133u8,
                160u8,
                34u8,
                16u8,
                161u8,
                104u8,
                230u8,
                102u8,
                2u8,
                211u8,
                35u8,
                92u8,
                182u8,
                219u8,
                14u8,
                112u8,
                249u8,
                43u8,
                59u8,
                164u8,
                211u8,
                118u8,
                163u8,
                60u8,
                15u8,
                61u8,
                148u8,
                52u8,
                191u8,
                246u8,
                37u8,
            ],
            [
                120u8,
                5u8,
                134u8,
                47u8,
                104u8,
                158u8,
                47u8,
                19u8,
                223u8,
                159u8,
                6u8,
                47u8,
                244u8,
                130u8,
                173u8,
                58u8,
                209u8,
                18u8,
                172u8,
                169u8,
                224u8,
                132u8,
                121u8,
                17u8,
                237u8,
                131u8,
                46u8,
                21u8,
                140u8,
                82u8,
                91u8,
                51u8,
            ],
            [
                127u8,
                38u8,
                184u8,
                63u8,
                249u8,
                110u8,
                31u8,
                43u8,
                106u8,
                104u8,
                47u8,
                19u8,
                56u8,
                82u8,
                246u8,
                121u8,
                138u8,
                9u8,
                196u8,
                101u8,
                218u8,
                149u8,
                146u8,
                20u8,
                96u8,
                206u8,
                251u8,
                56u8,
                71u8,
                64u8,
                36u8,
                152u8,
            ],
            [
                185u8,
                39u8,
                28u8,
                230u8,
                162u8,
                50u8,
                203u8,
                94u8,
                0u8,
                16u8,
                225u8,
                15u8,
                193u8,
                11u8,
                56u8,
                254u8,
                93u8,
                37u8,
                221u8,
                39u8,
                248u8,
                192u8,
                59u8,
                238u8,
                240u8,
                104u8,
                165u8,
                129u8,
                207u8,
                194u8,
                27u8,
                236u8,
            ],
            [
                202u8,
                34u8,
                135u8,
                94u8,
                9u8,
                143u8,
                59u8,
                156u8,
                6u8,
                255u8,
                57u8,
                80u8,
                192u8,
                205u8,
                237u8,
                98u8,
                28u8,
                150u8,
                130u8,
                83u8,
                161u8,
                102u8,
                35u8,
                232u8,
                144u8,
                22u8,
                84u8,
                81u8,
                9u8,
                76u8,
                24u8,
                57u8,
            ],
            [
                213u8,
                173u8,
                56u8,
                165u8,
                25u8,
                245u8,
                76u8,
                151u8,
                17u8,
                127u8,
                90u8,
                121u8,
                250u8,
                126u8,
                130u8,
                176u8,
                63u8,
                50u8,
                210u8,
                113u8,
                159u8,
                60u8,
                228u8,
                162u8,
                125u8,
                75u8,
                86u8,
                18u8,
                23u8,
                207u8,
                234u8,
                12u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for CacheManagerEvents {
        const NAME: &'static str = "CacheManagerEvents";
        const COUNT: usize = 7usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<DeleteBid as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DeleteBid as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DeleteBid)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(<InsertBid as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <InsertBid as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::InsertBid)
                }
                Some(<Pause as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Pause as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Pause)
                }
                Some(<SetCacheSize as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <SetCacheSize as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SetCacheSize)
                }
                Some(<SetDecayRate as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <SetDecayRate as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SetDecayRate)
                }
                Some(<Unpause as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Unpause as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Unpause)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for CacheManagerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DeleteBid(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::InsertBid(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Pause(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SetCacheSize(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SetDecayRate(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Unpause(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DeleteBid(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::InsertBid(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Pause(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SetCacheSize(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SetDecayRate(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Unpause(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`CacheManager`](self) contract instance.

See the [wrapper's documentation](`CacheManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CacheManagerInstance<T, P, N> {
        CacheManagerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<CacheManagerInstance<T, P, N>>,
    > {
        CacheManagerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        CacheManagerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`CacheManager`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`CacheManager`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CacheManagerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for CacheManagerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CacheManagerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CacheManagerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`CacheManager`](self) contract instance.

See the [wrapper's documentation](`CacheManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<CacheManagerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> CacheManagerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CacheManagerInstance<T, P, N> {
            CacheManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CacheManagerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`cacheSize`] function.
        pub fn cacheSize(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, cacheSizeCall, N> {
            self.call_builder(&cacheSizeCall {})
        }
        ///Creates a new call builder for the [`decay`] function.
        pub fn decay(&self) -> alloy_contract::SolCallBuilder<T, &P, decayCall, N> {
            self.call_builder(&decayCall {})
        }
        ///Creates a new call builder for the [`entries`] function.
        pub fn entries(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, entriesCall, N> {
            self.call_builder(&entriesCall { _0 })
        }
        ///Creates a new call builder for the [`evictAll`] function.
        pub fn evictAll(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, evictAllCall, N> {
            self.call_builder(&evictAllCall {})
        }
        ///Creates a new call builder for the [`evictPrograms`] function.
        pub fn evictPrograms(
            &self,
            count: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, evictProgramsCall, N> {
            self.call_builder(&evictProgramsCall { count })
        }
        ///Creates a new call builder for the [`getEntries`] function.
        pub fn getEntries(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getEntriesCall, N> {
            self.call_builder(&getEntriesCall {})
        }
        ///Creates a new call builder for the [`getMinBid_0`] function.
        pub fn getMinBid_0(
            &self,
            program: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getMinBid_0Call, N> {
            self.call_builder(&getMinBid_0Call { program })
        }
        ///Creates a new call builder for the [`getMinBid_1`] function.
        pub fn getMinBid_1(
            &self,
            codehash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getMinBid_1Call, N> {
            self.call_builder(&getMinBid_1Call { codehash })
        }
        ///Creates a new call builder for the [`getMinBid_2`] function.
        pub fn getMinBid_2(
            &self,
            size: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, getMinBid_2Call, N> {
            self.call_builder(&getMinBid_2Call { size })
        }
        ///Creates a new call builder for the [`getSmallestEntries`] function.
        pub fn getSmallestEntries(
            &self,
            k: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getSmallestEntriesCall, N> {
            self.call_builder(&getSmallestEntriesCall { k })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            initCacheSize: u64,
            initDecay: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    initCacheSize,
                    initDecay,
                },
            )
        }
        ///Creates a new call builder for the [`isPaused`] function.
        pub fn isPaused(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPausedCall, N> {
            self.call_builder(&isPausedCall {})
        }
        ///Creates a new call builder for the [`makeSpace`] function.
        pub fn makeSpace(
            &self,
            size: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, makeSpaceCall, N> {
            self.call_builder(&makeSpaceCall { size })
        }
        ///Creates a new call builder for the [`paused`] function.
        pub fn paused(&self) -> alloy_contract::SolCallBuilder<T, &P, pausedCall, N> {
            self.call_builder(&pausedCall {})
        }
        ///Creates a new call builder for the [`placeBid`] function.
        pub fn placeBid(
            &self,
            program: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, placeBidCall, N> {
            self.call_builder(&placeBidCall { program })
        }
        ///Creates a new call builder for the [`queueSize`] function.
        pub fn queueSize(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, queueSizeCall, N> {
            self.call_builder(&queueSizeCall {})
        }
        ///Creates a new call builder for the [`setCacheSize`] function.
        pub fn setCacheSize(
            &self,
            newSize: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, setCacheSizeCall, N> {
            self.call_builder(&setCacheSizeCall { newSize })
        }
        ///Creates a new call builder for the [`setDecayRate`] function.
        pub fn setDecayRate(
            &self,
            newDecay: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDecayRateCall, N> {
            self.call_builder(&setDecayRateCall { newDecay })
        }
        ///Creates a new call builder for the [`sweepFunds`] function.
        pub fn sweepFunds(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, sweepFundsCall, N> {
            self.call_builder(&sweepFundsCall {})
        }
        ///Creates a new call builder for the [`unpause`] function.
        pub fn unpause(&self) -> alloy_contract::SolCallBuilder<T, &P, unpauseCall, N> {
            self.call_builder(&unpauseCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CacheManagerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DeleteBid`] event.
        pub fn DeleteBid_filter(&self) -> alloy_contract::Event<T, &P, DeleteBid, N> {
            self.event_filter::<DeleteBid>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`InsertBid`] event.
        pub fn InsertBid_filter(&self) -> alloy_contract::Event<T, &P, InsertBid, N> {
            self.event_filter::<InsertBid>()
        }
        ///Creates a new event filter for the [`Pause`] event.
        pub fn Pause_filter(&self) -> alloy_contract::Event<T, &P, Pause, N> {
            self.event_filter::<Pause>()
        }
        ///Creates a new event filter for the [`SetCacheSize`] event.
        pub fn SetCacheSize_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SetCacheSize, N> {
            self.event_filter::<SetCacheSize>()
        }
        ///Creates a new event filter for the [`SetDecayRate`] event.
        pub fn SetDecayRate_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SetDecayRate, N> {
            self.event_filter::<SetDecayRate>()
        }
        ///Creates a new event filter for the [`Unpause`] event.
        pub fn Unpause_filter(&self) -> alloy_contract::Event<T, &P, Unpause, N> {
            self.event_filter::<Unpause>()
        }
    }
}
