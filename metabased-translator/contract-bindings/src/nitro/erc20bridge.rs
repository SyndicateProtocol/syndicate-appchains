/**

Generated by the following Solidity interface...
```solidity
interface ERC20Bridge {
    error BadSequencerMessageNumber(uint256 stored, uint256 received);
    error CallNotAllowed();
    error CallTargetNotAllowed(address target);
    error InvalidOutboxSet(address outbox);
    error InvalidTokenSet(address token);
    error NativeTokenDecimalsTooLarge(uint256 decimals);
    error NotContract(address addr);
    error NotDelayedInbox(address sender);
    error NotOutbox(address sender);
    error NotRollupOrOwner(address sender, address rollup, address owner);
    error NotSequencerInbox(address sender);

    event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data);
    event InboxToggle(address indexed inbox, bool enabled);
    event Initialized(uint8 version);
    event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp);
    event OutboxToggle(address indexed outbox, bool enabled);
    event RollupUpdated(address rollup);
    event SequencerInboxUpdated(address newSequencerInbox);

    function acceptFundsFromOldBridge() external payable;
    function activeOutbox() external view returns (address);
    function allowedDelayedInboxList(uint256) external view returns (address);
    function allowedDelayedInboxes(address inbox) external view returns (bool);
    function allowedOutboxList(uint256) external view returns (address);
    function allowedOutboxes(address outbox) external view returns (bool);
    function delayedInboxAccs(uint256) external view returns (bytes32);
    function delayedMessageCount() external view returns (uint256);
    function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash, uint256 tokenFeeAmount) external returns (uint256);
    function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) external returns (uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc);
    function executeCall(address to, uint256 value, bytes memory data) external returns (bool success, bytes memory returnData);
    function initialize(address rollup_, address nativeToken_) external;
    function nativeToken() external view returns (address);
    function nativeTokenDecimals() external view returns (uint8);
    function rollup() external view returns (address);
    function sequencerInbox() external view returns (address);
    function sequencerInboxAccs(uint256) external view returns (bytes32);
    function sequencerMessageCount() external view returns (uint256);
    function sequencerReportedSubMessageCount() external view returns (uint256);
    function setDelayedInbox(address inbox, bool enabled) external;
    function setOutbox(address outbox, bool enabled) external;
    function setSequencerInbox(address _sequencerInbox) external;
    function setSequencerReportedSubMessageCount(uint256 newMsgCount) external;
    function submitBatchSpendingReport(address sender, bytes32 messageDataHash) external returns (uint256);
    function updateRollupAddress(address _rollup) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "acceptFundsFromOldBridge",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "activeOutbox",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowedDelayedInboxList",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowedDelayedInboxes",
    "inputs": [
      {
        "name": "inbox",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowedOutboxList",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowedOutboxes",
    "inputs": [
      {
        "name": "outbox",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "delayedInboxAccs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "delayedMessageCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "enqueueDelayedMessage",
    "inputs": [
      {
        "name": "kind",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "messageDataHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "tokenFeeAmount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "enqueueSequencerMessage",
    "inputs": [
      {
        "name": "dataHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "afterDelayedMessagesRead",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "prevMessageCount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newMessageCount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "seqMessageIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "beforeAcc",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "delayedAcc",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "acc",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "executeCall",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "success",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "returnData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "rollup_",
        "type": "address",
        "internalType": "contract IOwnable"
      },
      {
        "name": "nativeToken_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "nativeToken",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nativeTokenDecimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "rollup",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOwnable"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sequencerInbox",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sequencerInboxAccs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sequencerMessageCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sequencerReportedSubMessageCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setDelayedInbox",
    "inputs": [
      {
        "name": "inbox",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "enabled",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setOutbox",
    "inputs": [
      {
        "name": "outbox",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "enabled",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSequencerInbox",
    "inputs": [
      {
        "name": "_sequencerInbox",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSequencerReportedSubMessageCount",
    "inputs": [
      {
        "name": "newMsgCount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "submitBatchSpendingReport",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "messageDataHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupAddress",
    "inputs": [
      {
        "name": "_rollup",
        "type": "address",
        "internalType": "contract IOwnable"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "BridgeCallTriggered",
    "inputs": [
      {
        "name": "outbox",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "InboxToggle",
    "inputs": [
      {
        "name": "inbox",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "enabled",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "MessageDelivered",
    "inputs": [
      {
        "name": "messageIndex",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "beforeInboxAcc",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "inbox",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "kind",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "messageDataHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "baseFeeL1",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OutboxToggle",
    "inputs": [
      {
        "name": "outbox",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "enabled",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupUpdated",
    "inputs": [
      {
        "name": "rollup",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SequencerInboxUpdated",
    "inputs": [
      {
        "name": "newSequencerInbox",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "BadSequencerMessageNumber",
    "inputs": [
      {
        "name": "stored",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "received",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "CallNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CallTargetNotAllowed",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidOutboxSet",
    "inputs": [
      {
        "name": "outbox",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidTokenSet",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NativeTokenDecimalsTooLarge",
    "inputs": [
      {
        "name": "decimals",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotContract",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotDelayedInbox",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotOutbox",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotRollupOrOwner",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "rollup",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotSequencerInbox",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ERC20Bridge {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052306080523480156012575f80fd5b5060805161218861002b5f395f6108f901526121885ff3fe60806040526004361061018d575f3560e01c80639e5d4c49116100dc578063d5719dc211610087578063e77145f411610062578063e77145f41461023c578063eca067ad146104be578063ee35f327146104d2578063f81ff3b3146104f1575f80fd5b8063d5719dc214610461578063e1758bd814610480578063e76f5c8d1461049f575f80fd5b8063ae60bd13116100b7578063ae60bd13146103e8578063cb23bcb514610423578063cee3d72814610442575f80fd5b80639e5d4c4914610364578063ab5d894314610391578063ad48cb5e146103a5575f80fd5b80635fca4a161161013c57806386598a561161011757806386598a56146102cf578063919cc7061461030e578063945e11471461032d575f80fd5b80635fca4a161461027c57806375d81e25146102915780637a88b107146102b0575f80fd5b806347fb24c51161016c57806347fb24c51461021d578063485cc9551461023e5780634f61f8501461025d575f80fd5b806284120c1461019157806316bf5579146101b4578063413b35bd146101d3575b5f80fd5b34801561019c575f80fd5b506007545b6040519081526020015b60405180910390f35b3480156101bf575f80fd5b506101a16101ce366004611e1c565b610510565b3480156101de575f80fd5b5061020d6101ed366004611e47565b6001600160a01b03165f9081526002602052604090206001015460ff1690565b60405190151581526020016101ab565b348015610228575f80fd5b5061023c610237366004611e6f565b61052f565b005b348015610249575f80fd5b5061023c610258366004611ea6565b610825565b348015610268575f80fd5b5061023c610277366004611e47565b610b96565b348015610287575f80fd5b506101a1600a5481565b34801561029c575f80fd5b506101a16102ab366004611ee0565b610cbf565b3480156102bb575f80fd5b506101a16102ca366004611f23565b610cd5565b3480156102da575f80fd5b506102ee6102e9366004611f4d565b610d35565b6040805194855260208501939093529183015260608201526080016101ab565b348015610319575f80fd5b5061023c610328366004611e47565b610ec5565b348015610338575f80fd5b5061034c610347366004611e1c565b610fe7565b6040516001600160a01b0390911681526020016101ab565b34801561036f575f80fd5b5061038361037e366004611f7c565b61100f565b6040516101ab92919061202c565b34801561039c575f80fd5b5061034c6111a3565b3480156103b0575f80fd5b506033546103d69074010000000000000000000000000000000000000000900460ff1681565b60405160ff90911681526020016101ab565b3480156103f3575f80fd5b5061020d610402366004611e47565b6001600160a01b03165f908152600160208190526040909120015460ff1690565b34801561042e575f80fd5b5060085461034c906001600160a01b031681565b34801561044d575f80fd5b5061023c61045c366004611e6f565b6111e4565b34801561046c575f80fd5b506101a161047b366004611e1c565b611543565b34801561048b575f80fd5b5060335461034c906001600160a01b031681565b3480156104aa575f80fd5b5061034c6104b9366004611e1c565b611552565b3480156104c9575f80fd5b506006546101a1565b3480156104dd575f80fd5b5060095461034c906001600160a01b031681565b3480156104fc575f80fd5b5061023c61050b366004611e1c565b611561565b6007818154811061051f575f80fd5b5f91825260209091200154905081565b6008546001600160a01b031633146105fb5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610588573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ac9190612046565b9050336001600160a01b038216146105f957600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064015b60405180910390fd5b505b6001600160a01b0382165f818152600160208181526040928390209182015492518515158152919360ff90931692917f6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521910160405180910390a2821515811515036106665750505050565b821561070057604080518082018252600380548252600160208084018281526001600160a01b038a165f818152928490529582209451855551938201805460ff1916941515949094179093558154908101825591527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff1916909117905561081f565b6003805461071090600190612061565b8154811061072057610720612080565b5f918252602090912001548254600380546001600160a01b0390931692909190811061074e5761074e612080565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550815f015460015f6003855f01548154811061079657610796612080565b5f9182526020808320909101546001600160a01b0316835282019290925260400190205560038054806107cb576107cb612094565b5f828152602080822083015f19908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03861682526001908190526040822091825501805460ff191690555b50505050565b5f54610100900460ff161580801561084357505f54600160ff909116105b8061085c5750303b15801561085c57505f5460ff166001145b6108ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105f0565b5f805460ff1916600117905580156108ef575f805461ff0019166101001790555b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361098d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016105f0565b6001600160a01b0382166109d8576040517f06dff6d60000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016105f0565b603380546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff199283168117909355600580548316821790556008805491871691909216179055604080517f313ce567000000000000000000000000000000000000000000000000000000008152905163313ce567916004808201926020929091908290030181865afa925050508015610a8d575060408051601f3d908101601f19168201909252610a8a918101906120a8565b60015b610abe57603380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055610b4c565b602460ff82161115610b01576040517f0e0c276200000000000000000000000000000000000000000000000000000000815260ff821660048201526024016105f0565b6033805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9092169190911790555b8015610b91575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6008546001600160a01b03163314610c5d5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610bef573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c139190612046565b9050336001600160a01b03821614610c5b57600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a906020015b60405180910390a150565b5f610ccc8585858561162d565b95945050505050565b6009545f906001600160a01b03163314610d1d576040517f88f84f040000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b610d2c600d8443424887611694565b90505b92915050565b6009545f908190819081906001600160a01b03163314610d83576040517f88f84f040000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b85600a5414158015610d9457508515155b8015610da15750600a5415155b15610de657600a546040517fe2051feb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018790526044016105f0565b600a85905560075493508315610e1f576007610e03600186612061565b81548110610e1357610e13612080565b905f5260205f20015492505b8615610e4e576006610e32600189612061565b81548110610e4257610e42612080565b905f5260205f20015491505b60408051602081018590529081018990526060810183905260800160408051601f198184030181529190528051602090910120600780546001810182555f919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018190559398929750909550919350915050565b6008546001600160a01b03163314610f8c5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610f1e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f429190612046565b9050336001600160a01b03821614610f8a57600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a90602001610cb4565b60048181548110610ff6575f80fd5b5f918252602090912001546001600160a01b0316905081565b335f9081526002602052604081206001015460609060ff1661105f576040517f32ea82ab0000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b821580159061107657506001600160a01b0386163b155b156110b8576040517fb5cf5b8f0000000000000000000000000000000000000000000000000000000081526001600160a01b03871660048201526024016105f0565b6005805473ffffffffffffffffffffffffffffffffffffffff1981163317909155604080516020601f87018190048102820181019092528581526001600160a01b0390921691611125918991899189908990819084018382808284375f9201919091525061186192505050565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915560405192955090935088169033907f2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d46690611191908a908a908a906120c3565b60405180910390a35094509492505050565b6005545f906001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000181016111df575f91505090565b919050565b6008546001600160a01b031633146112ab5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561123d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112619190612046565b9050336001600160a01b038216146112a957600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b03831601611318576040517f77abed100000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016105f0565b6001600160a01b0382165f81815260026020908152604091829020600181015492518515158152909360ff90931692917f49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa910160405180910390a2821515811515036113845750505050565b821561141f57604080518082018252600480548252600160208084018281526001600160a01b038a165f81815260029093529582209451855551938201805460ff1916941515949094179093558154908101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff1916909117905561081f565b6004805461142f90600190612061565b8154811061143f5761143f612080565b5f918252602090912001548254600480546001600160a01b0390931692909190811061146d5761146d612080565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550815f015460025f6004855f0154815481106114b5576114b5612080565b5f9182526020808320909101546001600160a01b0316835282019290925260400190205560048054806114ea576114ea612094565b5f828152602080822083015f19908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03861682526002905260408120908155600101805460ff1916905550505050565b6006818154811061051f575f80fd5b60038181548110610ff6575f80fd5b6008546001600160a01b031633146116285760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156115ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115de9190612046565b9050336001600160a01b0382161461162657600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b600a55565b335f9081526001602081905260408220015460ff1661167a576040517fb6c60ea30000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b5f611689868643428589611694565b9050610ccc83611a88565b600654604080517fff0000000000000000000000000000000000000000000000000000000000000060f88a901b166020808301919091527fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b1660218301527fffffffffffffffff00000000000000000000000000000000000000000000000060c089811b8216603585015288901b16603d830152604582018490526065820186905260858083018690528351808403909101815260a590920190925280519101205f91905f821561178d576006611771600185612061565b8154811061178157611781612080565b905f5260205f20015490505b6040805160208082018490528183018590528251808303840181526060830180855281519190920120600680546001810182555f919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f015533905260ff8c1660808201526001600160a01b038b1660a082015260c0810187905260e0810188905267ffffffffffffffff89166101008201529051829185917f5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1918190036101200190a3509098975050505050505050565b6033545f906060906001600160a01b039081169086168190036118bb576040517fe16cd2080000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016105f0565b84156118d5576118d56001600160a01b0382168787611aa9565b83516001935015611a7f576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f906001600160a01b038316906370a0823190602401602060405180830381865afa15801561193d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061196191906120f8565b9050866001600160a01b03168560405161197b919061210f565b5f604051808303815f865af19150503d805f81146119b4576040519150601f19603f3d011682016040523d82523d5f602084013e6119b9565b606091505b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291955093505f906001600160a01b038416906370a0823190602401602060405180830381865afa158015611a1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a4091906120f8565b905081811015611a7c576040517f576b38b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b50935093915050565b8015611aa657603354611aa6906001600160a01b0316333084611b52565b50565b6040516001600160a01b038316602482015260448101829052610b919084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611ba3565b6040516001600160a01b038085166024830152831660448201526064810182905261081f9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611aee565b5f611bf7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c879092919063ffffffff16565b805190915015610b915780806020019051810190611c159190612125565b610b915760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105f0565b6060611c9584845f85611c9f565b90505b9392505050565b606082471015611d175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105f0565b6001600160a01b0385163b611d6e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f0565b5f80866001600160a01b03168587604051611d89919061210f565b5f6040518083038185875af1925050503d805f8114611dc3576040519150601f19603f3d011682016040523d82523d5f602084013e611dc8565b606091505b5091509150611dd8828286611de3565b979650505050505050565b60608315611df2575081611c98565b825115611e025782518084602001fd5b8160405162461bcd60e51b81526004016105f09190612140565b5f60208284031215611e2c575f80fd5b5035919050565b6001600160a01b0381168114611aa6575f80fd5b5f60208284031215611e57575f80fd5b8135611c9881611e33565b8015158114611aa6575f80fd5b5f8060408385031215611e80575f80fd5b8235611e8b81611e33565b91506020830135611e9b81611e62565b809150509250929050565b5f8060408385031215611eb7575f80fd5b8235611ec281611e33565b91506020830135611e9b81611e33565b60ff81168114611aa6575f80fd5b5f805f8060808587031215611ef3575f80fd5b8435611efe81611ed2565b93506020850135611f0e81611e33565b93969395505050506040820135916060013590565b5f8060408385031215611f34575f80fd5b8235611f3f81611e33565b946020939093013593505050565b5f805f8060808587031215611f60575f80fd5b5050823594602084013594506040840135936060013592509050565b5f805f8060608587031215611f8f575f80fd5b8435611f9a81611e33565b935060208501359250604085013567ffffffffffffffff80821115611fbd575f80fd5b818701915087601f830112611fd0575f80fd5b813581811115611fde575f80fd5b886020828501011115611fef575f80fd5b95989497505060200194505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201525f611c956040830184611ffe565b5f60208284031215612056575f80fd5b8151611c9881611e33565b81810381811115610d2f57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b5f602082840312156120b8575f80fd5b8151611c9881611ed2565b83815260406020820152816040820152818360608301375f818301606090810191909152601f909201601f1916010192915050565b5f60208284031215612108575f80fd5b5051919050565b5f82518060208501845e5f920191825250919050565b5f60208284031215612135575f80fd5b8151611c9881611e62565b602081525f610d2c6020830184611ffe56fea26469706673582212209c60c9468019fb3d8b7147fdc292d126579fe11a7ea460c568050f783f965aa864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0`\x80R4\x80\x15`\x12W_\x80\xFD[P`\x80Qa!\x88a\0+_9_a\x08\xF9\x01Ra!\x88_\xF3\xFE`\x80`@R`\x046\x10a\x01\x8DW_5`\xE0\x1C\x80c\x9E]LI\x11a\0\xDCW\x80c\xD5q\x9D\xC2\x11a\0\x87W\x80c\xE7qE\xF4\x11a\0bW\x80c\xE7qE\xF4\x14a\x02<W\x80c\xEC\xA0g\xAD\x14a\x04\xBEW\x80c\xEE5\xF3'\x14a\x04\xD2W\x80c\xF8\x1F\xF3\xB3\x14a\x04\xF1W_\x80\xFD[\x80c\xD5q\x9D\xC2\x14a\x04aW\x80c\xE1u\x8B\xD8\x14a\x04\x80W\x80c\xE7o\\\x8D\x14a\x04\x9FW_\x80\xFD[\x80c\xAE`\xBD\x13\x11a\0\xB7W\x80c\xAE`\xBD\x13\x14a\x03\xE8W\x80c\xCB#\xBC\xB5\x14a\x04#W\x80c\xCE\xE3\xD7(\x14a\x04BW_\x80\xFD[\x80c\x9E]LI\x14a\x03dW\x80c\xAB]\x89C\x14a\x03\x91W\x80c\xADH\xCB^\x14a\x03\xA5W_\x80\xFD[\x80c_\xCAJ\x16\x11a\x01<W\x80c\x86Y\x8AV\x11a\x01\x17W\x80c\x86Y\x8AV\x14a\x02\xCFW\x80c\x91\x9C\xC7\x06\x14a\x03\x0EW\x80c\x94^\x11G\x14a\x03-W_\x80\xFD[\x80c_\xCAJ\x16\x14a\x02|W\x80cu\xD8\x1E%\x14a\x02\x91W\x80cz\x88\xB1\x07\x14a\x02\xB0W_\x80\xFD[\x80cG\xFB$\xC5\x11a\x01lW\x80cG\xFB$\xC5\x14a\x02\x1DW\x80cH\\\xC9U\x14a\x02>W\x80cOa\xF8P\x14a\x02]W_\x80\xFD[\x80b\x84\x12\x0C\x14a\x01\x91W\x80c\x16\xBFUy\x14a\x01\xB4W\x80cA;5\xBD\x14a\x01\xD3W[_\x80\xFD[4\x80\x15a\x01\x9CW_\x80\xFD[P`\x07T[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBFW_\x80\xFD[Pa\x01\xA1a\x01\xCE6`\x04a\x1E\x1CV[a\x05\x10V[4\x80\x15a\x01\xDEW_\x80\xFD[Pa\x02\ra\x01\xED6`\x04a\x1EGV[`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x02` R`@\x90 `\x01\x01T`\xFF\x16\x90V[`@Q\x90\x15\x15\x81R` \x01a\x01\xABV[4\x80\x15a\x02(W_\x80\xFD[Pa\x02<a\x0276`\x04a\x1EoV[a\x05/V[\0[4\x80\x15a\x02IW_\x80\xFD[Pa\x02<a\x02X6`\x04a\x1E\xA6V[a\x08%V[4\x80\x15a\x02hW_\x80\xFD[Pa\x02<a\x02w6`\x04a\x1EGV[a\x0B\x96V[4\x80\x15a\x02\x87W_\x80\xFD[Pa\x01\xA1`\nT\x81V[4\x80\x15a\x02\x9CW_\x80\xFD[Pa\x01\xA1a\x02\xAB6`\x04a\x1E\xE0V[a\x0C\xBFV[4\x80\x15a\x02\xBBW_\x80\xFD[Pa\x01\xA1a\x02\xCA6`\x04a\x1F#V[a\x0C\xD5V[4\x80\x15a\x02\xDAW_\x80\xFD[Pa\x02\xEEa\x02\xE96`\x04a\x1FMV[a\r5V[`@\x80Q\x94\x85R` \x85\x01\x93\x90\x93R\x91\x83\x01R``\x82\x01R`\x80\x01a\x01\xABV[4\x80\x15a\x03\x19W_\x80\xFD[Pa\x02<a\x03(6`\x04a\x1EGV[a\x0E\xC5V[4\x80\x15a\x038W_\x80\xFD[Pa\x03La\x03G6`\x04a\x1E\x1CV[a\x0F\xE7V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\xABV[4\x80\x15a\x03oW_\x80\xFD[Pa\x03\x83a\x03~6`\x04a\x1F|V[a\x10\x0FV[`@Qa\x01\xAB\x92\x91\x90a ,V[4\x80\x15a\x03\x9CW_\x80\xFD[Pa\x03La\x11\xA3V[4\x80\x15a\x03\xB0W_\x80\xFD[P`3Ta\x03\xD6\x90t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x81V[`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01\xABV[4\x80\x15a\x03\xF3W_\x80\xFD[Pa\x02\ra\x04\x026`\x04a\x1EGV[`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x01` \x81\x90R`@\x90\x91 \x01T`\xFF\x16\x90V[4\x80\x15a\x04.W_\x80\xFD[P`\x08Ta\x03L\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04MW_\x80\xFD[Pa\x02<a\x04\\6`\x04a\x1EoV[a\x11\xE4V[4\x80\x15a\x04lW_\x80\xFD[Pa\x01\xA1a\x04{6`\x04a\x1E\x1CV[a\x15CV[4\x80\x15a\x04\x8BW_\x80\xFD[P`3Ta\x03L\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04\xAAW_\x80\xFD[Pa\x03La\x04\xB96`\x04a\x1E\x1CV[a\x15RV[4\x80\x15a\x04\xC9W_\x80\xFD[P`\x06Ta\x01\xA1V[4\x80\x15a\x04\xDDW_\x80\xFD[P`\tTa\x03L\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04\xFCW_\x80\xFD[Pa\x02<a\x05\x0B6`\x04a\x1E\x1CV[a\x15aV[`\x07\x81\x81T\x81\x10a\x05\x1FW_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05\xFBW`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x05\x88W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xAC\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x05\xF9W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[P[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x81\x81R`\x01` \x81\x81R`@\x92\x83\x90 \x91\x82\x01T\x92Q\x85\x15\x15\x81R\x91\x93`\xFF\x90\x93\x16\x92\x91\x7Ffu\xCE\x88\x82\xCBqc}\xE5\x90:\x19=!\x8C\xC0TK\xE9\xC0e\x0C\xB8>\tU\xF6\xAA+\xF5!\x91\x01`@Q\x80\x91\x03\x90\xA2\x82\x15\x15\x81\x15\x15\x03a\x06fWPPPPV[\x82\x15a\x07\0W`@\x80Q\x80\x82\x01\x82R`\x03\x80T\x82R`\x01` \x80\x84\x01\x82\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16_\x81\x81R\x92\x84\x90R\x95\x82 \x94Q\x85UQ\x93\x82\x01\x80T`\xFF\x19\x16\x94\x15\x15\x94\x90\x94\x17\x90\x93U\x81T\x90\x81\x01\x82U\x91R\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8[\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90Ua\x08\x1FV[`\x03\x80Ta\x07\x10\x90`\x01\x90a aV[\x81T\x81\x10a\x07 Wa\x07 a \x80V[_\x91\x82R` \x90\x91 \x01T\x82T`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x92\x90\x91\x90\x81\x10a\x07NWa\x07Na \x80V[\x90_R` _ \x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP\x81_\x01T`\x01_`\x03\x85_\x01T\x81T\x81\x10a\x07\x96Wa\x07\x96a \x80V[_\x91\x82R` \x80\x83 \x90\x91\x01T`\x01`\x01`\xA0\x1B\x03\x16\x83R\x82\x01\x92\x90\x92R`@\x01\x90 U`\x03\x80T\x80a\x07\xCBWa\x07\xCBa \x94V[_\x82\x81R` \x80\x82 \x83\x01_\x19\x90\x81\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90U\x90\x92\x01\x90\x92U`\x01`\x01`\xA0\x1B\x03\x86\x16\x82R`\x01\x90\x81\x90R`@\x82 \x91\x82U\x01\x80T`\xFF\x19\x16\x90U[PPPPV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x08CWP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\x08\\WP0;\x15\x80\x15a\x08\\WP_T`\xFF\x16`\x01\x14[a\x08\xCEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01R\x7Fdy initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x08\xEFW_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\t\x8DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\t\xD8W`@Q\x7F\x06\xDF\xF6\xD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`3\x80T`\x01`\x01`\xA0\x1B\x03\x80\x85\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x92\x83\x16\x81\x17\x90\x93U`\x05\x80T\x83\x16\x82\x17\x90U`\x08\x80T\x91\x87\x16\x91\x90\x92\x16\x17\x90U`@\x80Q\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90Qc1<\xE5g\x91`\x04\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x92PPP\x80\x15a\n\x8DWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\n\x8A\x91\x81\x01\x90a \xA8V[`\x01[a\n\xBEW`3\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90Ua\x0BLV[`$`\xFF\x82\x16\x11\x15a\x0B\x01W`@Q\x7F\x0E\x0C'b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\xFF\x82\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`3\x80T`\xFF\x90\x92\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x90U[\x80\x15a\x0B\x91W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0C]W`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0B\xEFW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x13\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x0C[W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[`\t\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\x8C\x1E`\x03\xED3\xCAgH\xD4\xAD=\xD4\xEC\xC9I\x06\\\x89\xDC\xEB1\xFD\xF5F\xA5(\x92\x02v<j\x90` \x01[`@Q\x80\x91\x03\x90\xA1PV[_a\x0C\xCC\x85\x85\x85\x85a\x16-V[\x95\x94PPPPPV[`\tT_\x90`\x01`\x01`\xA0\x1B\x03\x163\x14a\r\x1DW`@Q\x7F\x88\xF8O\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[a\r,`\r\x84CBH\x87a\x16\x94V[\x90P[\x92\x91PPV[`\tT_\x90\x81\x90\x81\x90\x81\x90`\x01`\x01`\xA0\x1B\x03\x163\x14a\r\x83W`@Q\x7F\x88\xF8O\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[\x85`\nT\x14\x15\x80\x15a\r\x94WP\x85\x15\x15[\x80\x15a\r\xA1WP`\nT\x15\x15[\x15a\r\xE6W`\nT`@Q\x7F\xE2\x05\x1F\xEB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x91\x90\x91R`$\x81\x01\x87\x90R`D\x01a\x05\xF0V[`\n\x85\x90U`\x07T\x93P\x83\x15a\x0E\x1FW`\x07a\x0E\x03`\x01\x86a aV[\x81T\x81\x10a\x0E\x13Wa\x0E\x13a \x80V[\x90_R` _ \x01T\x92P[\x86\x15a\x0ENW`\x06a\x0E2`\x01\x89a aV[\x81T\x81\x10a\x0EBWa\x0EBa \x80V[\x90_R` _ \x01T\x91P[`@\x80Q` \x81\x01\x85\x90R\x90\x81\x01\x89\x90R``\x81\x01\x83\x90R`\x80\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 `\x07\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\xA6l\xC9(\xB5\xED\xB8*\xF9\xBDI\x92)T\x15Z\xB7\xB0\x94&\x94\xBE\xA4\xCEDf\x1D\x9A\x876\xC6\x88\x01\x81\x90U\x93\x98\x92\x97P\x90\x95P\x91\x93P\x91PPV[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0F\x8CW`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0F\x1EW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0FB\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x0F\x8AW`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[`\x08\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\xAE\x1FZ\xA1_o\xF8D\x89cG\xCE\xCA*<$\xC8\xD3\xA2w\x85\xEF\xDE\xAC\xD5\x81\xA0\xA9QrxJ\x90` \x01a\x0C\xB4V[`\x04\x81\x81T\x81\x10a\x0F\xF6W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x90P\x81V[3_\x90\x81R`\x02` R`@\x81 `\x01\x01T``\x90`\xFF\x16a\x10_W`@Q\x7F2\xEA\x82\xAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[\x82\x15\x80\x15\x90a\x10vWP`\x01`\x01`\xA0\x1B\x03\x86\x16;\x15[\x15a\x10\xB8W`@Q\x7F\xB5\xCF[\x8F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x87\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`\x05\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x81\x163\x17\x90\x91U`@\x80Q` `\x1F\x87\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x85\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91a\x11%\x91\x89\x91\x89\x91\x89\x90\x89\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x18a\x92PPPV[`\x05\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x91\x90\x91\x17\x90\x91U`@Q\x92\x95P\x90\x93P\x88\x16\x903\x90\x7F-\x9D\x11^\xF3\xE4\xA6\x06\xD6\x98\x91;\x1E\xAE\x83\x1A<\xDF\xE2\r\x9A\x83\xD4\x80\x07\xB0RgI\xC3\xD4f\x90a\x11\x91\x90\x8A\x90\x8A\x90\x8A\x90a \xC3V[`@Q\x80\x91\x03\x90\xA3P\x94P\x94\x92PPPV[`\x05T_\x90`\x01`\x01`\xA0\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x11\xDFW_\x91PP\x90V[\x91\x90PV[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x12\xABW`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x12=W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12a\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x12\xA9W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01`\x01`\x01`\xA0\x1B\x03\x83\x16\x01a\x13\x18W`@Q\x7Fw\xAB\xED\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x81\x81R`\x02` \x90\x81R`@\x91\x82\x90 `\x01\x81\x01T\x92Q\x85\x15\x15\x81R\x90\x93`\xFF\x90\x93\x16\x92\x91\x7FIG~sV\xDB\xCBeJ\xB8]u4\xB5\x01&w-\x93\x810\xD15\x0E#\xE2T\x03p\xC8\xDF\xFA\x91\x01`@Q\x80\x91\x03\x90\xA2\x82\x15\x15\x81\x15\x15\x03a\x13\x84WPPPPV[\x82\x15a\x14\x1FW`@\x80Q\x80\x82\x01\x82R`\x04\x80T\x82R`\x01` \x80\x84\x01\x82\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16_\x81\x81R`\x02\x90\x93R\x95\x82 \x94Q\x85UQ\x93\x82\x01\x80T`\xFF\x19\x16\x94\x15\x15\x94\x90\x94\x17\x90\x93U\x81T\x90\x81\x01\x82U\x91R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90Ua\x08\x1FV[`\x04\x80Ta\x14/\x90`\x01\x90a aV[\x81T\x81\x10a\x14?Wa\x14?a \x80V[_\x91\x82R` \x90\x91 \x01T\x82T`\x04\x80T`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x92\x90\x91\x90\x81\x10a\x14mWa\x14ma \x80V[\x90_R` _ \x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP\x81_\x01T`\x02_`\x04\x85_\x01T\x81T\x81\x10a\x14\xB5Wa\x14\xB5a \x80V[_\x91\x82R` \x80\x83 \x90\x91\x01T`\x01`\x01`\xA0\x1B\x03\x16\x83R\x82\x01\x92\x90\x92R`@\x01\x90 U`\x04\x80T\x80a\x14\xEAWa\x14\xEAa \x94V[_\x82\x81R` \x80\x82 \x83\x01_\x19\x90\x81\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90U\x90\x92\x01\x90\x92U`\x01`\x01`\xA0\x1B\x03\x86\x16\x82R`\x02\x90R`@\x81 \x90\x81U`\x01\x01\x80T`\xFF\x19\x16\x90UPPPPV[`\x06\x81\x81T\x81\x10a\x05\x1FW_\x80\xFD[`\x03\x81\x81T\x81\x10a\x0F\xF6W_\x80\xFD[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x16(W`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x15\xBAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x15\xDE\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x16&W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[`\nUV[3_\x90\x81R`\x01` \x81\x90R`@\x82 \x01T`\xFF\x16a\x16zW`@Q\x7F\xB6\xC6\x0E\xA3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[_a\x16\x89\x86\x86CB\x85\x89a\x16\x94V[\x90Pa\x0C\xCC\x83a\x1A\x88V[`\x06T`@\x80Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x8A\x90\x1B\x16` \x80\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0``\x8A\x90\x1B\x16`!\x83\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x89\x81\x1B\x82\x16`5\x85\x01R\x88\x90\x1B\x16`=\x83\x01R`E\x82\x01\x84\x90R`e\x82\x01\x86\x90R`\x85\x80\x83\x01\x86\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`\xA5\x90\x92\x01\x90\x92R\x80Q\x91\x01 _\x91\x90_\x82\x15a\x17\x8DW`\x06a\x17q`\x01\x85a aV[\x81T\x81\x10a\x17\x81Wa\x17\x81a \x80V[\x90_R` _ \x01T\x90P[`@\x80Q` \x80\x82\x01\x84\x90R\x81\x83\x01\x85\x90R\x82Q\x80\x83\x03\x84\x01\x81R``\x83\x01\x80\x85R\x81Q\x91\x90\x92\x01 `\x06\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\xF6R\"#\x13\xE2\x84YR\x8D\x92\x0Be\x11\\\x16\xC0O>\xFC\x82\xAA\xED\xC9{\xE5\x9F?7|\r?\x01U3\x90R`\xFF\x8C\x16`\x80\x82\x01R`\x01`\x01`\xA0\x1B\x03\x8B\x16`\xA0\x82\x01R`\xC0\x81\x01\x87\x90R`\xE0\x81\x01\x88\x90Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16a\x01\0\x82\x01R\x90Q\x82\x91\x85\x91\x7F^<\x13\x11\xEAD&d\xE8\xB1a\x1B\xFA\xBE\xF6Y\x12\x0E\xA7\xA0\xA2\xCF\xC0fw\0\xBE\xBCi\xCB\xFF\xE1\x91\x81\x90\x03a\x01 \x01\x90\xA3P\x90\x98\x97PPPPPPPPV[`3T_\x90``\x90`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x90\x86\x16\x81\x90\x03a\x18\xBBW`@Q\x7F\xE1l\xD2\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x01a\x05\xF0V[\x84\x15a\x18\xD5Wa\x18\xD5`\x01`\x01`\xA0\x1B\x03\x82\x16\x87\x87a\x1A\xA9V[\x83Q`\x01\x93P\x15a\x1A\x7FW`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R_\x90`\x01`\x01`\xA0\x1B\x03\x83\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x19=W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x19a\x91\x90a \xF8V[\x90P\x86`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x19{\x91\x90a!\x0FV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x19\xB4W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x19\xB9V[``\x91P[P`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R\x91\x95P\x93P_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1A\x1CW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1A@\x91\x90a \xF8V[\x90P\x81\x81\x10\x15a\x1A|W`@Q\x7FWk8\xB4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PP[P\x93P\x93\x91PPV[\x80\x15a\x1A\xA6W`3Ta\x1A\xA6\x90`\x01`\x01`\xA0\x1B\x03\x1630\x84a\x1BRV[PV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16`$\x82\x01R`D\x81\x01\x82\x90Ra\x0B\x91\x90\x84\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x92\x17\x90\x91Ra\x1B\xA3V[`@Q`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`$\x83\x01R\x83\x16`D\x82\x01R`d\x81\x01\x82\x90Ra\x08\x1F\x90\x85\x90\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`\x84\x01a\x1A\xEEV[_a\x1B\xF7\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x1C\x87\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x80Q\x90\x91P\x15a\x0B\x91W\x80\x80` \x01\x90Q\x81\x01\x90a\x1C\x15\x91\x90a!%V[a\x0B\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01R\x7Fot succeed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[``a\x1C\x95\x84\x84_\x85a\x1C\x9FV[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x1D\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01R\x7Fr call\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x1DnW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x05\xF0V[_\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x1D\x89\x91\x90a!\x0FV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x1D\xC3W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x1D\xC8V[``\x91P[P\x91P\x91Pa\x1D\xD8\x82\x82\x86a\x1D\xE3V[\x97\x96PPPPPPPV[``\x83\x15a\x1D\xF2WP\x81a\x1C\x98V[\x82Q\x15a\x1E\x02W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF0\x91\x90a!@V[_` \x82\x84\x03\x12\x15a\x1E,W_\x80\xFD[P5\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x1A\xA6W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x1EWW_\x80\xFD[\x815a\x1C\x98\x81a\x1E3V[\x80\x15\x15\x81\x14a\x1A\xA6W_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15a\x1E\x80W_\x80\xFD[\x825a\x1E\x8B\x81a\x1E3V[\x91P` \x83\x015a\x1E\x9B\x81a\x1EbV[\x80\x91PP\x92P\x92\x90PV[_\x80`@\x83\x85\x03\x12\x15a\x1E\xB7W_\x80\xFD[\x825a\x1E\xC2\x81a\x1E3V[\x91P` \x83\x015a\x1E\x9B\x81a\x1E3V[`\xFF\x81\x16\x81\x14a\x1A\xA6W_\x80\xFD[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x1E\xF3W_\x80\xFD[\x845a\x1E\xFE\x81a\x1E\xD2V[\x93P` \x85\x015a\x1F\x0E\x81a\x1E3V[\x93\x96\x93\x95PPPP`@\x82\x015\x91``\x015\x90V[_\x80`@\x83\x85\x03\x12\x15a\x1F4W_\x80\xFD[\x825a\x1F?\x81a\x1E3V[\x94` \x93\x90\x93\x015\x93PPPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x1F`W_\x80\xFD[PP\x825\x94` \x84\x015\x94P`@\x84\x015\x93``\x015\x92P\x90PV[_\x80_\x80``\x85\x87\x03\x12\x15a\x1F\x8FW_\x80\xFD[\x845a\x1F\x9A\x81a\x1E3V[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1F\xBDW_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x1F\xD0W_\x80\xFD[\x815\x81\x81\x11\x15a\x1F\xDEW_\x80\xFD[\x88` \x82\x85\x01\x01\x11\x15a\x1F\xEFW_\x80\xFD[\x95\x98\x94\x97PP` \x01\x94PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x82\x15\x15\x81R`@` \x82\x01R_a\x1C\x95`@\x83\x01\x84a\x1F\xFEV[_` \x82\x84\x03\x12\x15a VW_\x80\xFD[\x81Qa\x1C\x98\x81a\x1E3V[\x81\x81\x03\x81\x81\x11\x15a\r/WcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a \xB8W_\x80\xFD[\x81Qa\x1C\x98\x81a\x1E\xD2V[\x83\x81R`@` \x82\x01R\x81`@\x82\x01R\x81\x83``\x83\x017_\x81\x83\x01``\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01`\x1F\x19\x16\x01\x01\x92\x91PPV[_` \x82\x84\x03\x12\x15a!\x08W_\x80\xFD[PQ\x91\x90PV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a!5W_\x80\xFD[\x81Qa\x1C\x98\x81a\x1EbV[` \x81R_a\r,` \x83\x01\x84a\x1F\xFEV\xFE\xA2dipfsX\"\x12 \x9C`\xC9F\x80\x19\xFB=\x8BqG\xFD\xC2\x92\xD1&W\x9F\xE1\x1A~\xA4`\xC5h\x05\x0Fx?\x96Z\xA8dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061018d575f3560e01c80639e5d4c49116100dc578063d5719dc211610087578063e77145f411610062578063e77145f41461023c578063eca067ad146104be578063ee35f327146104d2578063f81ff3b3146104f1575f80fd5b8063d5719dc214610461578063e1758bd814610480578063e76f5c8d1461049f575f80fd5b8063ae60bd13116100b7578063ae60bd13146103e8578063cb23bcb514610423578063cee3d72814610442575f80fd5b80639e5d4c4914610364578063ab5d894314610391578063ad48cb5e146103a5575f80fd5b80635fca4a161161013c57806386598a561161011757806386598a56146102cf578063919cc7061461030e578063945e11471461032d575f80fd5b80635fca4a161461027c57806375d81e25146102915780637a88b107146102b0575f80fd5b806347fb24c51161016c57806347fb24c51461021d578063485cc9551461023e5780634f61f8501461025d575f80fd5b806284120c1461019157806316bf5579146101b4578063413b35bd146101d3575b5f80fd5b34801561019c575f80fd5b506007545b6040519081526020015b60405180910390f35b3480156101bf575f80fd5b506101a16101ce366004611e1c565b610510565b3480156101de575f80fd5b5061020d6101ed366004611e47565b6001600160a01b03165f9081526002602052604090206001015460ff1690565b60405190151581526020016101ab565b348015610228575f80fd5b5061023c610237366004611e6f565b61052f565b005b348015610249575f80fd5b5061023c610258366004611ea6565b610825565b348015610268575f80fd5b5061023c610277366004611e47565b610b96565b348015610287575f80fd5b506101a1600a5481565b34801561029c575f80fd5b506101a16102ab366004611ee0565b610cbf565b3480156102bb575f80fd5b506101a16102ca366004611f23565b610cd5565b3480156102da575f80fd5b506102ee6102e9366004611f4d565b610d35565b6040805194855260208501939093529183015260608201526080016101ab565b348015610319575f80fd5b5061023c610328366004611e47565b610ec5565b348015610338575f80fd5b5061034c610347366004611e1c565b610fe7565b6040516001600160a01b0390911681526020016101ab565b34801561036f575f80fd5b5061038361037e366004611f7c565b61100f565b6040516101ab92919061202c565b34801561039c575f80fd5b5061034c6111a3565b3480156103b0575f80fd5b506033546103d69074010000000000000000000000000000000000000000900460ff1681565b60405160ff90911681526020016101ab565b3480156103f3575f80fd5b5061020d610402366004611e47565b6001600160a01b03165f908152600160208190526040909120015460ff1690565b34801561042e575f80fd5b5060085461034c906001600160a01b031681565b34801561044d575f80fd5b5061023c61045c366004611e6f565b6111e4565b34801561046c575f80fd5b506101a161047b366004611e1c565b611543565b34801561048b575f80fd5b5060335461034c906001600160a01b031681565b3480156104aa575f80fd5b5061034c6104b9366004611e1c565b611552565b3480156104c9575f80fd5b506006546101a1565b3480156104dd575f80fd5b5060095461034c906001600160a01b031681565b3480156104fc575f80fd5b5061023c61050b366004611e1c565b611561565b6007818154811061051f575f80fd5b5f91825260209091200154905081565b6008546001600160a01b031633146105fb5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610588573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ac9190612046565b9050336001600160a01b038216146105f957600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064015b60405180910390fd5b505b6001600160a01b0382165f818152600160208181526040928390209182015492518515158152919360ff90931692917f6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521910160405180910390a2821515811515036106665750505050565b821561070057604080518082018252600380548252600160208084018281526001600160a01b038a165f818152928490529582209451855551938201805460ff1916941515949094179093558154908101825591527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff1916909117905561081f565b6003805461071090600190612061565b8154811061072057610720612080565b5f918252602090912001548254600380546001600160a01b0390931692909190811061074e5761074e612080565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550815f015460015f6003855f01548154811061079657610796612080565b5f9182526020808320909101546001600160a01b0316835282019290925260400190205560038054806107cb576107cb612094565b5f828152602080822083015f19908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03861682526001908190526040822091825501805460ff191690555b50505050565b5f54610100900460ff161580801561084357505f54600160ff909116105b8061085c5750303b15801561085c57505f5460ff166001145b6108ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105f0565b5f805460ff1916600117905580156108ef575f805461ff0019166101001790555b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361098d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016105f0565b6001600160a01b0382166109d8576040517f06dff6d60000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016105f0565b603380546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff199283168117909355600580548316821790556008805491871691909216179055604080517f313ce567000000000000000000000000000000000000000000000000000000008152905163313ce567916004808201926020929091908290030181865afa925050508015610a8d575060408051601f3d908101601f19168201909252610a8a918101906120a8565b60015b610abe57603380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055610b4c565b602460ff82161115610b01576040517f0e0c276200000000000000000000000000000000000000000000000000000000815260ff821660048201526024016105f0565b6033805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9092169190911790555b8015610b91575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6008546001600160a01b03163314610c5d5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610bef573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c139190612046565b9050336001600160a01b03821614610c5b57600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a906020015b60405180910390a150565b5f610ccc8585858561162d565b95945050505050565b6009545f906001600160a01b03163314610d1d576040517f88f84f040000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b610d2c600d8443424887611694565b90505b92915050565b6009545f908190819081906001600160a01b03163314610d83576040517f88f84f040000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b85600a5414158015610d9457508515155b8015610da15750600a5415155b15610de657600a546040517fe2051feb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018790526044016105f0565b600a85905560075493508315610e1f576007610e03600186612061565b81548110610e1357610e13612080565b905f5260205f20015492505b8615610e4e576006610e32600189612061565b81548110610e4257610e42612080565b905f5260205f20015491505b60408051602081018590529081018990526060810183905260800160408051601f198184030181529190528051602090910120600780546001810182555f919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018190559398929750909550919350915050565b6008546001600160a01b03163314610f8c5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610f1e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f429190612046565b9050336001600160a01b03821614610f8a57600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a90602001610cb4565b60048181548110610ff6575f80fd5b5f918252602090912001546001600160a01b0316905081565b335f9081526002602052604081206001015460609060ff1661105f576040517f32ea82ab0000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b821580159061107657506001600160a01b0386163b155b156110b8576040517fb5cf5b8f0000000000000000000000000000000000000000000000000000000081526001600160a01b03871660048201526024016105f0565b6005805473ffffffffffffffffffffffffffffffffffffffff1981163317909155604080516020601f87018190048102820181019092528581526001600160a01b0390921691611125918991899189908990819084018382808284375f9201919091525061186192505050565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038581169190911790915560405192955090935088169033907f2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d46690611191908a908a908a906120c3565b60405180910390a35094509492505050565b6005545f906001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000181016111df575f91505090565b919050565b6008546001600160a01b031633146112ab5760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561123d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112619190612046565b9050336001600160a01b038216146112a957600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b03831601611318576040517f77abed100000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016105f0565b6001600160a01b0382165f81815260026020908152604091829020600181015492518515158152909360ff90931692917f49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa910160405180910390a2821515811515036113845750505050565b821561141f57604080518082018252600480548252600160208084018281526001600160a01b038a165f81815260029093529582209451855551938201805460ff1916941515949094179093558154908101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff1916909117905561081f565b6004805461142f90600190612061565b8154811061143f5761143f612080565b5f918252602090912001548254600480546001600160a01b0390931692909190811061146d5761146d612080565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550815f015460025f6004855f0154815481106114b5576114b5612080565b5f9182526020808320909101546001600160a01b0316835282019290925260400190205560048054806114ea576114ea612094565b5f828152602080822083015f19908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03861682526002905260408120908155600101805460ff1916905550505050565b6006818154811061051f575f80fd5b60038181548110610ff6575f80fd5b6008546001600160a01b031633146116285760085460408051638da5cb5b60e01b815290515f926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156115ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115de9190612046565b9050336001600160a01b0382161461162657600854604051630739600760e01b81523360048201526001600160a01b03918216602482015290821660448201526064016105f0565b505b600a55565b335f9081526001602081905260408220015460ff1661167a576040517fb6c60ea30000000000000000000000000000000000000000000000000000000081523360048201526024016105f0565b5f611689868643428589611694565b9050610ccc83611a88565b600654604080517fff0000000000000000000000000000000000000000000000000000000000000060f88a901b166020808301919091527fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b1660218301527fffffffffffffffff00000000000000000000000000000000000000000000000060c089811b8216603585015288901b16603d830152604582018490526065820186905260858083018690528351808403909101815260a590920190925280519101205f91905f821561178d576006611771600185612061565b8154811061178157611781612080565b905f5260205f20015490505b6040805160208082018490528183018590528251808303840181526060830180855281519190920120600680546001810182555f919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f015533905260ff8c1660808201526001600160a01b038b1660a082015260c0810187905260e0810188905267ffffffffffffffff89166101008201529051829185917f5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1918190036101200190a3509098975050505050505050565b6033545f906060906001600160a01b039081169086168190036118bb576040517fe16cd2080000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016105f0565b84156118d5576118d56001600160a01b0382168787611aa9565b83516001935015611a7f576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f906001600160a01b038316906370a0823190602401602060405180830381865afa15801561193d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061196191906120f8565b9050866001600160a01b03168560405161197b919061210f565b5f604051808303815f865af19150503d805f81146119b4576040519150601f19603f3d011682016040523d82523d5f602084013e6119b9565b606091505b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291955093505f906001600160a01b038416906370a0823190602401602060405180830381865afa158015611a1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a4091906120f8565b905081811015611a7c576040517f576b38b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b50935093915050565b8015611aa657603354611aa6906001600160a01b0316333084611b52565b50565b6040516001600160a01b038316602482015260448101829052610b919084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611ba3565b6040516001600160a01b038085166024830152831660448201526064810182905261081f9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611aee565b5f611bf7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c879092919063ffffffff16565b805190915015610b915780806020019051810190611c159190612125565b610b915760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105f0565b6060611c9584845f85611c9f565b90505b9392505050565b606082471015611d175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105f0565b6001600160a01b0385163b611d6e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f0565b5f80866001600160a01b03168587604051611d89919061210f565b5f6040518083038185875af1925050503d805f8114611dc3576040519150601f19603f3d011682016040523d82523d5f602084013e611dc8565b606091505b5091509150611dd8828286611de3565b979650505050505050565b60608315611df2575081611c98565b825115611e025782518084602001fd5b8160405162461bcd60e51b81526004016105f09190612140565b5f60208284031215611e2c575f80fd5b5035919050565b6001600160a01b0381168114611aa6575f80fd5b5f60208284031215611e57575f80fd5b8135611c9881611e33565b8015158114611aa6575f80fd5b5f8060408385031215611e80575f80fd5b8235611e8b81611e33565b91506020830135611e9b81611e62565b809150509250929050565b5f8060408385031215611eb7575f80fd5b8235611ec281611e33565b91506020830135611e9b81611e33565b60ff81168114611aa6575f80fd5b5f805f8060808587031215611ef3575f80fd5b8435611efe81611ed2565b93506020850135611f0e81611e33565b93969395505050506040820135916060013590565b5f8060408385031215611f34575f80fd5b8235611f3f81611e33565b946020939093013593505050565b5f805f8060808587031215611f60575f80fd5b5050823594602084013594506040840135936060013592509050565b5f805f8060608587031215611f8f575f80fd5b8435611f9a81611e33565b935060208501359250604085013567ffffffffffffffff80821115611fbd575f80fd5b818701915087601f830112611fd0575f80fd5b813581811115611fde575f80fd5b886020828501011115611fef575f80fd5b95989497505060200194505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201525f611c956040830184611ffe565b5f60208284031215612056575f80fd5b8151611c9881611e33565b81810381811115610d2f57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffd5b5f602082840312156120b8575f80fd5b8151611c9881611ed2565b83815260406020820152816040820152818360608301375f818301606090810191909152601f909201601f1916010192915050565b5f60208284031215612108575f80fd5b5051919050565b5f82518060208501845e5f920191825250919050565b5f60208284031215612135575f80fd5b8151611c9881611e62565b602081525f610d2c6020830184611ffe56fea26469706673582212209c60c9468019fb3d8b7147fdc292d126579fe11a7ea460c568050f783f965aa864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01\x8DW_5`\xE0\x1C\x80c\x9E]LI\x11a\0\xDCW\x80c\xD5q\x9D\xC2\x11a\0\x87W\x80c\xE7qE\xF4\x11a\0bW\x80c\xE7qE\xF4\x14a\x02<W\x80c\xEC\xA0g\xAD\x14a\x04\xBEW\x80c\xEE5\xF3'\x14a\x04\xD2W\x80c\xF8\x1F\xF3\xB3\x14a\x04\xF1W_\x80\xFD[\x80c\xD5q\x9D\xC2\x14a\x04aW\x80c\xE1u\x8B\xD8\x14a\x04\x80W\x80c\xE7o\\\x8D\x14a\x04\x9FW_\x80\xFD[\x80c\xAE`\xBD\x13\x11a\0\xB7W\x80c\xAE`\xBD\x13\x14a\x03\xE8W\x80c\xCB#\xBC\xB5\x14a\x04#W\x80c\xCE\xE3\xD7(\x14a\x04BW_\x80\xFD[\x80c\x9E]LI\x14a\x03dW\x80c\xAB]\x89C\x14a\x03\x91W\x80c\xADH\xCB^\x14a\x03\xA5W_\x80\xFD[\x80c_\xCAJ\x16\x11a\x01<W\x80c\x86Y\x8AV\x11a\x01\x17W\x80c\x86Y\x8AV\x14a\x02\xCFW\x80c\x91\x9C\xC7\x06\x14a\x03\x0EW\x80c\x94^\x11G\x14a\x03-W_\x80\xFD[\x80c_\xCAJ\x16\x14a\x02|W\x80cu\xD8\x1E%\x14a\x02\x91W\x80cz\x88\xB1\x07\x14a\x02\xB0W_\x80\xFD[\x80cG\xFB$\xC5\x11a\x01lW\x80cG\xFB$\xC5\x14a\x02\x1DW\x80cH\\\xC9U\x14a\x02>W\x80cOa\xF8P\x14a\x02]W_\x80\xFD[\x80b\x84\x12\x0C\x14a\x01\x91W\x80c\x16\xBFUy\x14a\x01\xB4W\x80cA;5\xBD\x14a\x01\xD3W[_\x80\xFD[4\x80\x15a\x01\x9CW_\x80\xFD[P`\x07T[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBFW_\x80\xFD[Pa\x01\xA1a\x01\xCE6`\x04a\x1E\x1CV[a\x05\x10V[4\x80\x15a\x01\xDEW_\x80\xFD[Pa\x02\ra\x01\xED6`\x04a\x1EGV[`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x02` R`@\x90 `\x01\x01T`\xFF\x16\x90V[`@Q\x90\x15\x15\x81R` \x01a\x01\xABV[4\x80\x15a\x02(W_\x80\xFD[Pa\x02<a\x0276`\x04a\x1EoV[a\x05/V[\0[4\x80\x15a\x02IW_\x80\xFD[Pa\x02<a\x02X6`\x04a\x1E\xA6V[a\x08%V[4\x80\x15a\x02hW_\x80\xFD[Pa\x02<a\x02w6`\x04a\x1EGV[a\x0B\x96V[4\x80\x15a\x02\x87W_\x80\xFD[Pa\x01\xA1`\nT\x81V[4\x80\x15a\x02\x9CW_\x80\xFD[Pa\x01\xA1a\x02\xAB6`\x04a\x1E\xE0V[a\x0C\xBFV[4\x80\x15a\x02\xBBW_\x80\xFD[Pa\x01\xA1a\x02\xCA6`\x04a\x1F#V[a\x0C\xD5V[4\x80\x15a\x02\xDAW_\x80\xFD[Pa\x02\xEEa\x02\xE96`\x04a\x1FMV[a\r5V[`@\x80Q\x94\x85R` \x85\x01\x93\x90\x93R\x91\x83\x01R``\x82\x01R`\x80\x01a\x01\xABV[4\x80\x15a\x03\x19W_\x80\xFD[Pa\x02<a\x03(6`\x04a\x1EGV[a\x0E\xC5V[4\x80\x15a\x038W_\x80\xFD[Pa\x03La\x03G6`\x04a\x1E\x1CV[a\x0F\xE7V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\xABV[4\x80\x15a\x03oW_\x80\xFD[Pa\x03\x83a\x03~6`\x04a\x1F|V[a\x10\x0FV[`@Qa\x01\xAB\x92\x91\x90a ,V[4\x80\x15a\x03\x9CW_\x80\xFD[Pa\x03La\x11\xA3V[4\x80\x15a\x03\xB0W_\x80\xFD[P`3Ta\x03\xD6\x90t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x81V[`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01\xABV[4\x80\x15a\x03\xF3W_\x80\xFD[Pa\x02\ra\x04\x026`\x04a\x1EGV[`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x01` \x81\x90R`@\x90\x91 \x01T`\xFF\x16\x90V[4\x80\x15a\x04.W_\x80\xFD[P`\x08Ta\x03L\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04MW_\x80\xFD[Pa\x02<a\x04\\6`\x04a\x1EoV[a\x11\xE4V[4\x80\x15a\x04lW_\x80\xFD[Pa\x01\xA1a\x04{6`\x04a\x1E\x1CV[a\x15CV[4\x80\x15a\x04\x8BW_\x80\xFD[P`3Ta\x03L\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04\xAAW_\x80\xFD[Pa\x03La\x04\xB96`\x04a\x1E\x1CV[a\x15RV[4\x80\x15a\x04\xC9W_\x80\xFD[P`\x06Ta\x01\xA1V[4\x80\x15a\x04\xDDW_\x80\xFD[P`\tTa\x03L\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04\xFCW_\x80\xFD[Pa\x02<a\x05\x0B6`\x04a\x1E\x1CV[a\x15aV[`\x07\x81\x81T\x81\x10a\x05\x1FW_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05\xFBW`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x05\x88W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xAC\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x05\xF9W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[P[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x81\x81R`\x01` \x81\x81R`@\x92\x83\x90 \x91\x82\x01T\x92Q\x85\x15\x15\x81R\x91\x93`\xFF\x90\x93\x16\x92\x91\x7Ffu\xCE\x88\x82\xCBqc}\xE5\x90:\x19=!\x8C\xC0TK\xE9\xC0e\x0C\xB8>\tU\xF6\xAA+\xF5!\x91\x01`@Q\x80\x91\x03\x90\xA2\x82\x15\x15\x81\x15\x15\x03a\x06fWPPPPV[\x82\x15a\x07\0W`@\x80Q\x80\x82\x01\x82R`\x03\x80T\x82R`\x01` \x80\x84\x01\x82\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16_\x81\x81R\x92\x84\x90R\x95\x82 \x94Q\x85UQ\x93\x82\x01\x80T`\xFF\x19\x16\x94\x15\x15\x94\x90\x94\x17\x90\x93U\x81T\x90\x81\x01\x82U\x91R\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8[\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90Ua\x08\x1FV[`\x03\x80Ta\x07\x10\x90`\x01\x90a aV[\x81T\x81\x10a\x07 Wa\x07 a \x80V[_\x91\x82R` \x90\x91 \x01T\x82T`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x92\x90\x91\x90\x81\x10a\x07NWa\x07Na \x80V[\x90_R` _ \x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP\x81_\x01T`\x01_`\x03\x85_\x01T\x81T\x81\x10a\x07\x96Wa\x07\x96a \x80V[_\x91\x82R` \x80\x83 \x90\x91\x01T`\x01`\x01`\xA0\x1B\x03\x16\x83R\x82\x01\x92\x90\x92R`@\x01\x90 U`\x03\x80T\x80a\x07\xCBWa\x07\xCBa \x94V[_\x82\x81R` \x80\x82 \x83\x01_\x19\x90\x81\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90U\x90\x92\x01\x90\x92U`\x01`\x01`\xA0\x1B\x03\x86\x16\x82R`\x01\x90\x81\x90R`@\x82 \x91\x82U\x01\x80T`\xFF\x19\x16\x90U[PPPPV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\x08CWP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\x08\\WP0;\x15\x80\x15a\x08\\WP_T`\xFF\x16`\x01\x14[a\x08\xCEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01R\x7Fdy initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\x08\xEFW_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\t\x8DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\t\xD8W`@Q\x7F\x06\xDF\xF6\xD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`3\x80T`\x01`\x01`\xA0\x1B\x03\x80\x85\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x92\x83\x16\x81\x17\x90\x93U`\x05\x80T\x83\x16\x82\x17\x90U`\x08\x80T\x91\x87\x16\x91\x90\x92\x16\x17\x90U`@\x80Q\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90Qc1<\xE5g\x91`\x04\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x92PPP\x80\x15a\n\x8DWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\n\x8A\x91\x81\x01\x90a \xA8V[`\x01[a\n\xBEW`3\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90Ua\x0BLV[`$`\xFF\x82\x16\x11\x15a\x0B\x01W`@Q\x7F\x0E\x0C'b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\xFF\x82\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`3\x80T`\xFF\x90\x92\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x90U[\x80\x15a\x0B\x91W_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPV[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0C]W`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0B\xEFW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x13\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x0C[W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[`\t\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\x8C\x1E`\x03\xED3\xCAgH\xD4\xAD=\xD4\xEC\xC9I\x06\\\x89\xDC\xEB1\xFD\xF5F\xA5(\x92\x02v<j\x90` \x01[`@Q\x80\x91\x03\x90\xA1PV[_a\x0C\xCC\x85\x85\x85\x85a\x16-V[\x95\x94PPPPPV[`\tT_\x90`\x01`\x01`\xA0\x1B\x03\x163\x14a\r\x1DW`@Q\x7F\x88\xF8O\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[a\r,`\r\x84CBH\x87a\x16\x94V[\x90P[\x92\x91PPV[`\tT_\x90\x81\x90\x81\x90\x81\x90`\x01`\x01`\xA0\x1B\x03\x163\x14a\r\x83W`@Q\x7F\x88\xF8O\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[\x85`\nT\x14\x15\x80\x15a\r\x94WP\x85\x15\x15[\x80\x15a\r\xA1WP`\nT\x15\x15[\x15a\r\xE6W`\nT`@Q\x7F\xE2\x05\x1F\xEB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x91\x90\x91R`$\x81\x01\x87\x90R`D\x01a\x05\xF0V[`\n\x85\x90U`\x07T\x93P\x83\x15a\x0E\x1FW`\x07a\x0E\x03`\x01\x86a aV[\x81T\x81\x10a\x0E\x13Wa\x0E\x13a \x80V[\x90_R` _ \x01T\x92P[\x86\x15a\x0ENW`\x06a\x0E2`\x01\x89a aV[\x81T\x81\x10a\x0EBWa\x0EBa \x80V[\x90_R` _ \x01T\x91P[`@\x80Q` \x81\x01\x85\x90R\x90\x81\x01\x89\x90R``\x81\x01\x83\x90R`\x80\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 `\x07\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\xA6l\xC9(\xB5\xED\xB8*\xF9\xBDI\x92)T\x15Z\xB7\xB0\x94&\x94\xBE\xA4\xCEDf\x1D\x9A\x876\xC6\x88\x01\x81\x90U\x93\x98\x92\x97P\x90\x95P\x91\x93P\x91PPV[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0F\x8CW`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0F\x1EW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0FB\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x0F\x8AW`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[`\x08\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x90\x81R\x7F\xAE\x1FZ\xA1_o\xF8D\x89cG\xCE\xCA*<$\xC8\xD3\xA2w\x85\xEF\xDE\xAC\xD5\x81\xA0\xA9QrxJ\x90` \x01a\x0C\xB4V[`\x04\x81\x81T\x81\x10a\x0F\xF6W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x90P\x81V[3_\x90\x81R`\x02` R`@\x81 `\x01\x01T``\x90`\xFF\x16a\x10_W`@Q\x7F2\xEA\x82\xAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[\x82\x15\x80\x15\x90a\x10vWP`\x01`\x01`\xA0\x1B\x03\x86\x16;\x15[\x15a\x10\xB8W`@Q\x7F\xB5\xCF[\x8F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x87\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`\x05\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x81\x163\x17\x90\x91U`@\x80Q` `\x1F\x87\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x85\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91a\x11%\x91\x89\x91\x89\x91\x89\x90\x89\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x18a\x92PPPV[`\x05\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x91\x90\x91\x17\x90\x91U`@Q\x92\x95P\x90\x93P\x88\x16\x903\x90\x7F-\x9D\x11^\xF3\xE4\xA6\x06\xD6\x98\x91;\x1E\xAE\x83\x1A<\xDF\xE2\r\x9A\x83\xD4\x80\x07\xB0RgI\xC3\xD4f\x90a\x11\x91\x90\x8A\x90\x8A\x90\x8A\x90a \xC3V[`@Q\x80\x91\x03\x90\xA3P\x94P\x94\x92PPPV[`\x05T_\x90`\x01`\x01`\xA0\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x11\xDFW_\x91PP\x90V[\x91\x90PV[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x12\xABW`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x12=W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12a\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x12\xA9W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01`\x01`\x01`\xA0\x1B\x03\x83\x16\x01a\x13\x18W`@Q\x7Fw\xAB\xED\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x05\xF0V[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x81\x81R`\x02` \x90\x81R`@\x91\x82\x90 `\x01\x81\x01T\x92Q\x85\x15\x15\x81R\x90\x93`\xFF\x90\x93\x16\x92\x91\x7FIG~sV\xDB\xCBeJ\xB8]u4\xB5\x01&w-\x93\x810\xD15\x0E#\xE2T\x03p\xC8\xDF\xFA\x91\x01`@Q\x80\x91\x03\x90\xA2\x82\x15\x15\x81\x15\x15\x03a\x13\x84WPPPPV[\x82\x15a\x14\x1FW`@\x80Q\x80\x82\x01\x82R`\x04\x80T\x82R`\x01` \x80\x84\x01\x82\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16_\x81\x81R`\x02\x90\x93R\x95\x82 \x94Q\x85UQ\x93\x82\x01\x80T`\xFF\x19\x16\x94\x15\x15\x94\x90\x94\x17\x90\x93U\x81T\x90\x81\x01\x82U\x91R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90Ua\x08\x1FV[`\x04\x80Ta\x14/\x90`\x01\x90a aV[\x81T\x81\x10a\x14?Wa\x14?a \x80V[_\x91\x82R` \x90\x91 \x01T\x82T`\x04\x80T`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x92\x90\x91\x90\x81\x10a\x14mWa\x14ma \x80V[\x90_R` _ \x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP\x81_\x01T`\x02_`\x04\x85_\x01T\x81T\x81\x10a\x14\xB5Wa\x14\xB5a \x80V[_\x91\x82R` \x80\x83 \x90\x91\x01T`\x01`\x01`\xA0\x1B\x03\x16\x83R\x82\x01\x92\x90\x92R`@\x01\x90 U`\x04\x80T\x80a\x14\xEAWa\x14\xEAa \x94V[_\x82\x81R` \x80\x82 \x83\x01_\x19\x90\x81\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90U\x90\x92\x01\x90\x92U`\x01`\x01`\xA0\x1B\x03\x86\x16\x82R`\x02\x90R`@\x81 \x90\x81U`\x01\x01\x80T`\xFF\x19\x16\x90UPPPPV[`\x06\x81\x81T\x81\x10a\x05\x1FW_\x80\xFD[`\x03\x81\x81T\x81\x10a\x0F\xF6W_\x80\xFD[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x16(W`\x08T`@\x80Qc\x8D\xA5\xCB[`\xE0\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x15\xBAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x15\xDE\x91\x90a FV[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x16&W`\x08T`@Qc\x079`\x07`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x05\xF0V[P[`\nUV[3_\x90\x81R`\x01` \x81\x90R`@\x82 \x01T`\xFF\x16a\x16zW`@Q\x7F\xB6\xC6\x0E\xA3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\x05\xF0V[_a\x16\x89\x86\x86CB\x85\x89a\x16\x94V[\x90Pa\x0C\xCC\x83a\x1A\x88V[`\x06T`@\x80Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x8A\x90\x1B\x16` \x80\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0``\x8A\x90\x1B\x16`!\x83\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x89\x81\x1B\x82\x16`5\x85\x01R\x88\x90\x1B\x16`=\x83\x01R`E\x82\x01\x84\x90R`e\x82\x01\x86\x90R`\x85\x80\x83\x01\x86\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`\xA5\x90\x92\x01\x90\x92R\x80Q\x91\x01 _\x91\x90_\x82\x15a\x17\x8DW`\x06a\x17q`\x01\x85a aV[\x81T\x81\x10a\x17\x81Wa\x17\x81a \x80V[\x90_R` _ \x01T\x90P[`@\x80Q` \x80\x82\x01\x84\x90R\x81\x83\x01\x85\x90R\x82Q\x80\x83\x03\x84\x01\x81R``\x83\x01\x80\x85R\x81Q\x91\x90\x92\x01 `\x06\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\xF6R\"#\x13\xE2\x84YR\x8D\x92\x0Be\x11\\\x16\xC0O>\xFC\x82\xAA\xED\xC9{\xE5\x9F?7|\r?\x01U3\x90R`\xFF\x8C\x16`\x80\x82\x01R`\x01`\x01`\xA0\x1B\x03\x8B\x16`\xA0\x82\x01R`\xC0\x81\x01\x87\x90R`\xE0\x81\x01\x88\x90Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16a\x01\0\x82\x01R\x90Q\x82\x91\x85\x91\x7F^<\x13\x11\xEAD&d\xE8\xB1a\x1B\xFA\xBE\xF6Y\x12\x0E\xA7\xA0\xA2\xCF\xC0fw\0\xBE\xBCi\xCB\xFF\xE1\x91\x81\x90\x03a\x01 \x01\x90\xA3P\x90\x98\x97PPPPPPPPV[`3T_\x90``\x90`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x90\x86\x16\x81\x90\x03a\x18\xBBW`@Q\x7F\xE1l\xD2\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x01a\x05\xF0V[\x84\x15a\x18\xD5Wa\x18\xD5`\x01`\x01`\xA0\x1B\x03\x82\x16\x87\x87a\x1A\xA9V[\x83Q`\x01\x93P\x15a\x1A\x7FW`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R_\x90`\x01`\x01`\xA0\x1B\x03\x83\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x19=W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x19a\x91\x90a \xF8V[\x90P\x86`\x01`\x01`\xA0\x1B\x03\x16\x85`@Qa\x19{\x91\x90a!\x0FV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x19\xB4W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x19\xB9V[``\x91P[P`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R\x91\x95P\x93P_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1A\x1CW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1A@\x91\x90a \xF8V[\x90P\x81\x81\x10\x15a\x1A|W`@Q\x7FWk8\xB4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PP[P\x93P\x93\x91PPV[\x80\x15a\x1A\xA6W`3Ta\x1A\xA6\x90`\x01`\x01`\xA0\x1B\x03\x1630\x84a\x1BRV[PV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16`$\x82\x01R`D\x81\x01\x82\x90Ra\x0B\x91\x90\x84\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x92\x17\x90\x91Ra\x1B\xA3V[`@Q`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`$\x83\x01R\x83\x16`D\x82\x01R`d\x81\x01\x82\x90Ra\x08\x1F\x90\x85\x90\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`\x84\x01a\x1A\xEEV[_a\x1B\xF7\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x1C\x87\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x80Q\x90\x91P\x15a\x0B\x91W\x80\x80` \x01\x90Q\x81\x01\x90a\x1C\x15\x91\x90a!%V[a\x0B\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01R\x7Fot succeed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[``a\x1C\x95\x84\x84_\x85a\x1C\x9FV[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\x1D\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01R\x7Fr call\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\xF0V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x1DnW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x05\xF0V[_\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x1D\x89\x91\x90a!\x0FV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x1D\xC3W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x1D\xC8V[``\x91P[P\x91P\x91Pa\x1D\xD8\x82\x82\x86a\x1D\xE3V[\x97\x96PPPPPPPV[``\x83\x15a\x1D\xF2WP\x81a\x1C\x98V[\x82Q\x15a\x1E\x02W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF0\x91\x90a!@V[_` \x82\x84\x03\x12\x15a\x1E,W_\x80\xFD[P5\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x1A\xA6W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x1EWW_\x80\xFD[\x815a\x1C\x98\x81a\x1E3V[\x80\x15\x15\x81\x14a\x1A\xA6W_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15a\x1E\x80W_\x80\xFD[\x825a\x1E\x8B\x81a\x1E3V[\x91P` \x83\x015a\x1E\x9B\x81a\x1EbV[\x80\x91PP\x92P\x92\x90PV[_\x80`@\x83\x85\x03\x12\x15a\x1E\xB7W_\x80\xFD[\x825a\x1E\xC2\x81a\x1E3V[\x91P` \x83\x015a\x1E\x9B\x81a\x1E3V[`\xFF\x81\x16\x81\x14a\x1A\xA6W_\x80\xFD[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x1E\xF3W_\x80\xFD[\x845a\x1E\xFE\x81a\x1E\xD2V[\x93P` \x85\x015a\x1F\x0E\x81a\x1E3V[\x93\x96\x93\x95PPPP`@\x82\x015\x91``\x015\x90V[_\x80`@\x83\x85\x03\x12\x15a\x1F4W_\x80\xFD[\x825a\x1F?\x81a\x1E3V[\x94` \x93\x90\x93\x015\x93PPPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x1F`W_\x80\xFD[PP\x825\x94` \x84\x015\x94P`@\x84\x015\x93``\x015\x92P\x90PV[_\x80_\x80``\x85\x87\x03\x12\x15a\x1F\x8FW_\x80\xFD[\x845a\x1F\x9A\x81a\x1E3V[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1F\xBDW_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x1F\xD0W_\x80\xFD[\x815\x81\x81\x11\x15a\x1F\xDEW_\x80\xFD[\x88` \x82\x85\x01\x01\x11\x15a\x1F\xEFW_\x80\xFD[\x95\x98\x94\x97PP` \x01\x94PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x82\x15\x15\x81R`@` \x82\x01R_a\x1C\x95`@\x83\x01\x84a\x1F\xFEV[_` \x82\x84\x03\x12\x15a VW_\x80\xFD[\x81Qa\x1C\x98\x81a\x1E3V[\x81\x81\x03\x81\x81\x11\x15a\r/WcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a \xB8W_\x80\xFD[\x81Qa\x1C\x98\x81a\x1E\xD2V[\x83\x81R`@` \x82\x01R\x81`@\x82\x01R\x81\x83``\x83\x017_\x81\x83\x01``\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01`\x1F\x19\x16\x01\x01\x92\x91PPV[_` \x82\x84\x03\x12\x15a!\x08W_\x80\xFD[PQ\x91\x90PV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[_` \x82\x84\x03\x12\x15a!5W_\x80\xFD[\x81Qa\x1C\x98\x81a\x1EbV[` \x81R_a\r,` \x83\x01\x84a\x1F\xFEV\xFE\xA2dipfsX\"\x12 \x9C`\xC9F\x80\x19\xFB=\x8BqG\xFD\xC2\x92\xD1&W\x9F\xE1\x1A~\xA4`\xC5h\x05\x0Fx?\x96Z\xA8dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `BadSequencerMessageNumber(uint256,uint256)` and selector `0xe2051feb`.
```solidity
error BadSequencerMessageNumber(uint256 stored, uint256 received);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BadSequencerMessageNumber {
        #[allow(missing_docs)]
        pub stored: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub received: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BadSequencerMessageNumber>
        for UnderlyingRustTuple<'_> {
            fn from(value: BadSequencerMessageNumber) -> Self {
                (value.stored, value.received)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for BadSequencerMessageNumber {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    stored: tuple.0,
                    received: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BadSequencerMessageNumber {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BadSequencerMessageNumber(uint256,uint256)";
            const SELECTOR: [u8; 4] = [226u8, 5u8, 31u8, 235u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.stored),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.received),
                )
            }
        }
    };
    /**Custom error with signature `CallNotAllowed()` and selector `0x576b38b4`.
```solidity
error CallNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CallNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CallNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CallNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CallNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CallNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CallNotAllowed()";
            const SELECTOR: [u8; 4] = [87u8, 107u8, 56u8, 180u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CallTargetNotAllowed(address)` and selector `0xe16cd208`.
```solidity
error CallTargetNotAllowed(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CallTargetNotAllowed {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CallTargetNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CallTargetNotAllowed) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CallTargetNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CallTargetNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CallTargetNotAllowed(address)";
            const SELECTOR: [u8; 4] = [225u8, 108u8, 210u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidOutboxSet(address)` and selector `0x77abed10`.
```solidity
error InvalidOutboxSet(address outbox);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidOutboxSet {
        #[allow(missing_docs)]
        pub outbox: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidOutboxSet> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidOutboxSet) -> Self {
                (value.outbox,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidOutboxSet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { outbox: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidOutboxSet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidOutboxSet(address)";
            const SELECTOR: [u8; 4] = [119u8, 171u8, 237u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.outbox,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidTokenSet(address)` and selector `0x06dff6d6`.
```solidity
error InvalidTokenSet(address token);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidTokenSet {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidTokenSet> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidTokenSet) -> Self {
                (value.token,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidTokenSet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { token: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidTokenSet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidTokenSet(address)";
            const SELECTOR: [u8; 4] = [6u8, 223u8, 246u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `NativeTokenDecimalsTooLarge(uint256)` and selector `0x0e0c2762`.
```solidity
error NativeTokenDecimalsTooLarge(uint256 decimals);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NativeTokenDecimalsTooLarge {
        #[allow(missing_docs)]
        pub decimals: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NativeTokenDecimalsTooLarge>
        for UnderlyingRustTuple<'_> {
            fn from(value: NativeTokenDecimalsTooLarge) -> Self {
                (value.decimals,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NativeTokenDecimalsTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { decimals: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NativeTokenDecimalsTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NativeTokenDecimalsTooLarge(uint256)";
            const SELECTOR: [u8; 4] = [14u8, 12u8, 39u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.decimals),
                )
            }
        }
    };
    /**Custom error with signature `NotContract(address)` and selector `0xb5cf5b8f`.
```solidity
error NotContract(address addr);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotContract {
        #[allow(missing_docs)]
        pub addr: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotContract> for UnderlyingRustTuple<'_> {
            fn from(value: NotContract) -> Self {
                (value.addr,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotContract {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { addr: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotContract {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotContract(address)";
            const SELECTOR: [u8; 4] = [181u8, 207u8, 91u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `NotDelayedInbox(address)` and selector `0xb6c60ea3`.
```solidity
error NotDelayedInbox(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotDelayedInbox {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotDelayedInbox> for UnderlyingRustTuple<'_> {
            fn from(value: NotDelayedInbox) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotDelayedInbox {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotDelayedInbox {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotDelayedInbox(address)";
            const SELECTOR: [u8; 4] = [182u8, 198u8, 14u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `NotOutbox(address)` and selector `0x32ea82ab`.
```solidity
error NotOutbox(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotOutbox {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotOutbox> for UnderlyingRustTuple<'_> {
            fn from(value: NotOutbox) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotOutbox {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotOutbox {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotOutbox(address)";
            const SELECTOR: [u8; 4] = [50u8, 234u8, 130u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `NotRollupOrOwner(address,address,address)` and selector `0x07396007`.
```solidity
error NotRollupOrOwner(address sender, address rollup, address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotRollupOrOwner {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub rollup: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotRollupOrOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotRollupOrOwner) -> Self {
                (value.sender, value.rollup, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotRollupOrOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    rollup: tuple.1,
                    owner: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotRollupOrOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotRollupOrOwner(address,address,address)";
            const SELECTOR: [u8; 4] = [7u8, 57u8, 96u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollup,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `NotSequencerInbox(address)` and selector `0x88f84f04`.
```solidity
error NotSequencerInbox(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotSequencerInbox {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotSequencerInbox> for UnderlyingRustTuple<'_> {
            fn from(value: NotSequencerInbox) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotSequencerInbox {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotSequencerInbox {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotSequencerInbox(address)";
            const SELECTOR: [u8; 4] = [136u8, 248u8, 79u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Event with signature `BridgeCallTriggered(address,address,uint256,bytes)` and selector `0x2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466`.
```solidity
event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeCallTriggered {
        #[allow(missing_docs)]
        pub outbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeCallTriggered {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeCallTriggered(address,address,uint256,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                45u8,
                157u8,
                17u8,
                94u8,
                243u8,
                228u8,
                166u8,
                6u8,
                214u8,
                152u8,
                145u8,
                59u8,
                30u8,
                174u8,
                131u8,
                26u8,
                60u8,
                223u8,
                226u8,
                13u8,
                154u8,
                131u8,
                212u8,
                128u8,
                7u8,
                176u8,
                82u8,
                103u8,
                73u8,
                195u8,
                212u8,
                102u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    outbox: topics.1,
                    to: topics.2,
                    value: data.0,
                    data: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.outbox.clone(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.outbox,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeCallTriggered {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeCallTriggered> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeCallTriggered) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `InboxToggle(address,bool)` and selector `0x6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521`.
```solidity
event InboxToggle(address indexed inbox, bool enabled);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct InboxToggle {
        #[allow(missing_docs)]
        pub inbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub enabled: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for InboxToggle {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "InboxToggle(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                102u8,
                117u8,
                206u8,
                136u8,
                130u8,
                203u8,
                113u8,
                99u8,
                125u8,
                229u8,
                144u8,
                58u8,
                25u8,
                61u8,
                33u8,
                140u8,
                192u8,
                84u8,
                75u8,
                233u8,
                192u8,
                101u8,
                12u8,
                184u8,
                62u8,
                9u8,
                85u8,
                246u8,
                170u8,
                43u8,
                245u8,
                33u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    inbox: topics.1,
                    enabled: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.enabled,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.inbox.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.inbox,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for InboxToggle {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&InboxToggle> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &InboxToggle) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint8)` and selector `0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498`.
```solidity
event Initialized(uint8 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                127u8,
                38u8,
                184u8,
                63u8,
                249u8,
                110u8,
                31u8,
                43u8,
                106u8,
                104u8,
                47u8,
                19u8,
                56u8,
                82u8,
                246u8,
                121u8,
                138u8,
                9u8,
                196u8,
                101u8,
                218u8,
                149u8,
                146u8,
                20u8,
                96u8,
                206u8,
                251u8,
                56u8,
                71u8,
                64u8,
                36u8,
                152u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `MessageDelivered(uint256,bytes32,address,uint8,address,bytes32,uint256,uint64)` and selector `0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1`.
```solidity
event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct MessageDelivered {
        #[allow(missing_docs)]
        pub messageIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub beforeInboxAcc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub inbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub kind: u8,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub messageDataHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub baseFeeL1: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for MessageDelivered {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "MessageDelivered(uint256,bytes32,address,uint8,address,bytes32,uint256,uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                94u8,
                60u8,
                19u8,
                17u8,
                234u8,
                68u8,
                38u8,
                100u8,
                232u8,
                177u8,
                97u8,
                27u8,
                250u8,
                190u8,
                246u8,
                89u8,
                18u8,
                14u8,
                167u8,
                160u8,
                162u8,
                207u8,
                192u8,
                102u8,
                119u8,
                0u8,
                190u8,
                188u8,
                105u8,
                203u8,
                255u8,
                225u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    messageIndex: topics.1,
                    beforeInboxAcc: topics.2,
                    inbox: data.0,
                    kind: data.1,
                    sender: data.2,
                    messageDataHash: data.3,
                    baseFeeL1: data.4,
                    timestamp: data.5,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.inbox,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.kind),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.messageDataHash),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.baseFeeL1),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.messageIndex.clone(),
                    self.beforeInboxAcc.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.messageIndex);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.beforeInboxAcc);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for MessageDelivered {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&MessageDelivered> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &MessageDelivered) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OutboxToggle(address,bool)` and selector `0x49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa`.
```solidity
event OutboxToggle(address indexed outbox, bool enabled);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OutboxToggle {
        #[allow(missing_docs)]
        pub outbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub enabled: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OutboxToggle {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OutboxToggle(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                73u8,
                71u8,
                126u8,
                115u8,
                86u8,
                219u8,
                203u8,
                101u8,
                74u8,
                184u8,
                93u8,
                117u8,
                52u8,
                181u8,
                1u8,
                38u8,
                119u8,
                45u8,
                147u8,
                129u8,
                48u8,
                209u8,
                53u8,
                14u8,
                35u8,
                226u8,
                84u8,
                3u8,
                112u8,
                200u8,
                223u8,
                250u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    outbox: topics.1,
                    enabled: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.enabled,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.outbox.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.outbox,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OutboxToggle {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OutboxToggle> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OutboxToggle) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupUpdated(address)` and selector `0xae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a`.
```solidity
event RollupUpdated(address rollup);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupUpdated {
        #[allow(missing_docs)]
        pub rollup: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "RollupUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                174u8,
                31u8,
                90u8,
                161u8,
                95u8,
                111u8,
                248u8,
                68u8,
                137u8,
                99u8,
                71u8,
                206u8,
                202u8,
                42u8,
                60u8,
                36u8,
                200u8,
                211u8,
                162u8,
                119u8,
                133u8,
                239u8,
                222u8,
                172u8,
                213u8,
                129u8,
                160u8,
                169u8,
                81u8,
                114u8,
                120u8,
                74u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { rollup: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollup,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SequencerInboxUpdated(address)` and selector `0x8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a`.
```solidity
event SequencerInboxUpdated(address newSequencerInbox);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SequencerInboxUpdated {
        #[allow(missing_docs)]
        pub newSequencerInbox: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SequencerInboxUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SequencerInboxUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                30u8,
                96u8,
                3u8,
                237u8,
                51u8,
                202u8,
                103u8,
                72u8,
                212u8,
                173u8,
                61u8,
                212u8,
                236u8,
                201u8,
                73u8,
                6u8,
                92u8,
                137u8,
                220u8,
                235u8,
                49u8,
                253u8,
                245u8,
                70u8,
                165u8,
                40u8,
                146u8,
                2u8,
                118u8,
                60u8,
                106u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newSequencerInbox: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newSequencerInbox,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SequencerInboxUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SequencerInboxUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SequencerInboxUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `acceptFundsFromOldBridge()` and selector `0xe77145f4`.
```solidity
function acceptFundsFromOldBridge() external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptFundsFromOldBridgeCall {}
    ///Container type for the return parameters of the [`acceptFundsFromOldBridge()`](acceptFundsFromOldBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptFundsFromOldBridgeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptFundsFromOldBridgeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: acceptFundsFromOldBridgeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for acceptFundsFromOldBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptFundsFromOldBridgeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: acceptFundsFromOldBridgeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for acceptFundsFromOldBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for acceptFundsFromOldBridgeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = acceptFundsFromOldBridgeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "acceptFundsFromOldBridge()";
            const SELECTOR: [u8; 4] = [231u8, 113u8, 69u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activeOutbox()` and selector `0xab5d8943`.
```solidity
function activeOutbox() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activeOutboxCall {}
    ///Container type for the return parameters of the [`activeOutbox()`](activeOutboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activeOutboxReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeOutboxCall> for UnderlyingRustTuple<'_> {
                fn from(value: activeOutboxCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for activeOutboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeOutboxReturn> for UnderlyingRustTuple<'_> {
                fn from(value: activeOutboxReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for activeOutboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activeOutboxCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activeOutboxReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activeOutbox()";
            const SELECTOR: [u8; 4] = [171u8, 93u8, 137u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowedDelayedInboxList(uint256)` and selector `0xe76f5c8d`.
```solidity
function allowedDelayedInboxList(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDelayedInboxListCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`allowedDelayedInboxList(uint256)`](allowedDelayedInboxListCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDelayedInboxListReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDelayedInboxListCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedDelayedInboxListCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedDelayedInboxListCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDelayedInboxListReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedDelayedInboxListReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedDelayedInboxListReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedDelayedInboxListCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedDelayedInboxListReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedDelayedInboxList(uint256)";
            const SELECTOR: [u8; 4] = [231u8, 111u8, 92u8, 141u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowedDelayedInboxes(address)` and selector `0xae60bd13`.
```solidity
function allowedDelayedInboxes(address inbox) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDelayedInboxesCall {
        #[allow(missing_docs)]
        pub inbox: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowedDelayedInboxes(address)`](allowedDelayedInboxesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDelayedInboxesReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDelayedInboxesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedDelayedInboxesCall) -> Self {
                    (value.inbox,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedDelayedInboxesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { inbox: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDelayedInboxesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedDelayedInboxesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedDelayedInboxesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedDelayedInboxesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedDelayedInboxesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedDelayedInboxes(address)";
            const SELECTOR: [u8; 4] = [174u8, 96u8, 189u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.inbox,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowedOutboxList(uint256)` and selector `0x945e1147`.
```solidity
function allowedOutboxList(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedOutboxListCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`allowedOutboxList(uint256)`](allowedOutboxListCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedOutboxListReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedOutboxListCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedOutboxListCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedOutboxListCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedOutboxListReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedOutboxListReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedOutboxListReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedOutboxListCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedOutboxListReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedOutboxList(uint256)";
            const SELECTOR: [u8; 4] = [148u8, 94u8, 17u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowedOutboxes(address)` and selector `0x413b35bd`.
```solidity
function allowedOutboxes(address outbox) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedOutboxesCall {
        #[allow(missing_docs)]
        pub outbox: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowedOutboxes(address)`](allowedOutboxesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedOutboxesReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedOutboxesCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowedOutboxesCall) -> Self {
                    (value.outbox,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowedOutboxesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { outbox: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedOutboxesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedOutboxesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedOutboxesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedOutboxesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedOutboxesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedOutboxes(address)";
            const SELECTOR: [u8; 4] = [65u8, 59u8, 53u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.outbox,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `delayedInboxAccs(uint256)` and selector `0xd5719dc2`.
```solidity
function delayedInboxAccs(uint256) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delayedInboxAccsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`delayedInboxAccs(uint256)`](delayedInboxAccsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delayedInboxAccsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delayedInboxAccsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: delayedInboxAccsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for delayedInboxAccsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delayedInboxAccsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: delayedInboxAccsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for delayedInboxAccsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delayedInboxAccsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = delayedInboxAccsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delayedInboxAccs(uint256)";
            const SELECTOR: [u8; 4] = [213u8, 113u8, 157u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `delayedMessageCount()` and selector `0xeca067ad`.
```solidity
function delayedMessageCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delayedMessageCountCall {}
    ///Container type for the return parameters of the [`delayedMessageCount()`](delayedMessageCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delayedMessageCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delayedMessageCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: delayedMessageCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for delayedMessageCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delayedMessageCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: delayedMessageCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for delayedMessageCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delayedMessageCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = delayedMessageCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delayedMessageCount()";
            const SELECTOR: [u8; 4] = [236u8, 160u8, 103u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `enqueueDelayedMessage(uint8,address,bytes32,uint256)` and selector `0x75d81e25`.
```solidity
function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash, uint256 tokenFeeAmount) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct enqueueDelayedMessageCall {
        #[allow(missing_docs)]
        pub kind: u8,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub messageDataHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub tokenFeeAmount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`enqueueDelayedMessage(uint8,address,bytes32,uint256)`](enqueueDelayedMessageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct enqueueDelayedMessageReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                u8,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<enqueueDelayedMessageCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: enqueueDelayedMessageCall) -> Self {
                    (
                        value.kind,
                        value.sender,
                        value.messageDataHash,
                        value.tokenFeeAmount,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for enqueueDelayedMessageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        kind: tuple.0,
                        sender: tuple.1,
                        messageDataHash: tuple.2,
                        tokenFeeAmount: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<enqueueDelayedMessageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: enqueueDelayedMessageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for enqueueDelayedMessageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for enqueueDelayedMessageCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = enqueueDelayedMessageReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "enqueueDelayedMessage(uint8,address,bytes32,uint256)";
            const SELECTOR: [u8; 4] = [117u8, 216u8, 30u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.kind),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.messageDataHash),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenFeeAmount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `enqueueSequencerMessage(bytes32,uint256,uint256,uint256)` and selector `0x86598a56`.
```solidity
function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) external returns (uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct enqueueSequencerMessageCall {
        #[allow(missing_docs)]
        pub dataHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub afterDelayedMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub prevMessageCount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newMessageCount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`enqueueSequencerMessage(bytes32,uint256,uint256,uint256)`](enqueueSequencerMessageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct enqueueSequencerMessageReturn {
        #[allow(missing_docs)]
        pub seqMessageIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub beforeAcc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub delayedAcc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub acc: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<enqueueSequencerMessageCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: enqueueSequencerMessageCall) -> Self {
                    (
                        value.dataHash,
                        value.afterDelayedMessagesRead,
                        value.prevMessageCount,
                        value.newMessageCount,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for enqueueSequencerMessageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        dataHash: tuple.0,
                        afterDelayedMessagesRead: tuple.1,
                        prevMessageCount: tuple.2,
                        newMessageCount: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<enqueueSequencerMessageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: enqueueSequencerMessageReturn) -> Self {
                    (value.seqMessageIndex, value.beforeAcc, value.delayedAcc, value.acc)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for enqueueSequencerMessageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        seqMessageIndex: tuple.0,
                        beforeAcc: tuple.1,
                        delayedAcc: tuple.2,
                        acc: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for enqueueSequencerMessageCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = enqueueSequencerMessageReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "enqueueSequencerMessage(bytes32,uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [134u8, 89u8, 138u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.dataHash),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.afterDelayedMessagesRead,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.prevMessageCount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newMessageCount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeCall(address,uint256,bytes)` and selector `0x9e5d4c49`.
```solidity
function executeCall(address to, uint256 value, bytes memory data) external returns (bool success, bytes memory returnData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeCallCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeCall(address,uint256,bytes)`](executeCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeCallReturn {
        #[allow(missing_docs)]
        pub success: bool,
        #[allow(missing_docs)]
        pub returnData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeCallCall) -> Self {
                    (value.to, value.value, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        value: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool, alloy::sol_types::private::Bytes);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeCallReturn) -> Self {
                    (value.success, value.returnData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        success: tuple.0,
                        returnData: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeCallReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeCall(address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [158u8, 93u8, 76u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address rollup_, address nativeToken_) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub rollup_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nativeToken_: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.rollup_, value.nativeToken_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        rollup_: tuple.0,
                        nativeToken_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollup_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.nativeToken_,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `nativeToken()` and selector `0xe1758bd8`.
```solidity
function nativeToken() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nativeTokenCall {}
    ///Container type for the return parameters of the [`nativeToken()`](nativeTokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nativeTokenReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nativeTokenCall> for UnderlyingRustTuple<'_> {
                fn from(value: nativeTokenCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nativeTokenCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nativeTokenReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nativeTokenReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nativeTokenReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nativeTokenCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nativeTokenReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nativeToken()";
            const SELECTOR: [u8; 4] = [225u8, 117u8, 139u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `nativeTokenDecimals()` and selector `0xad48cb5e`.
```solidity
function nativeTokenDecimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nativeTokenDecimalsCall {}
    ///Container type for the return parameters of the [`nativeTokenDecimals()`](nativeTokenDecimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nativeTokenDecimalsReturn {
        #[allow(missing_docs)]
        pub _0: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nativeTokenDecimalsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: nativeTokenDecimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for nativeTokenDecimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nativeTokenDecimalsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: nativeTokenDecimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for nativeTokenDecimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nativeTokenDecimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nativeTokenDecimalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nativeTokenDecimals()";
            const SELECTOR: [u8; 4] = [173u8, 72u8, 203u8, 94u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `rollup()` and selector `0xcb23bcb5`.
```solidity
function rollup() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rollupCall {}
    ///Container type for the return parameters of the [`rollup()`](rollupCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rollupReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rollupCall> for UnderlyingRustTuple<'_> {
                fn from(value: rollupCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rollupCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rollupReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rollupReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rollupReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rollupCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = rollupReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rollup()";
            const SELECTOR: [u8; 4] = [203u8, 35u8, 188u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sequencerInbox()` and selector `0xee35f327`.
```solidity
function sequencerInbox() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerInboxCall {}
    ///Container type for the return parameters of the [`sequencerInbox()`](sequencerInboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerInboxReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerInboxCall> for UnderlyingRustTuple<'_> {
                fn from(value: sequencerInboxCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sequencerInboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerInboxReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerInboxReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerInboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencerInboxCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sequencerInboxReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencerInbox()";
            const SELECTOR: [u8; 4] = [238u8, 53u8, 243u8, 39u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sequencerInboxAccs(uint256)` and selector `0x16bf5579`.
```solidity
function sequencerInboxAccs(uint256) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerInboxAccsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`sequencerInboxAccs(uint256)`](sequencerInboxAccsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerInboxAccsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerInboxAccsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerInboxAccsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerInboxAccsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerInboxAccsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerInboxAccsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerInboxAccsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencerInboxAccsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sequencerInboxAccsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencerInboxAccs(uint256)";
            const SELECTOR: [u8; 4] = [22u8, 191u8, 85u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sequencerMessageCount()` and selector `0x0084120c`.
```solidity
function sequencerMessageCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerMessageCountCall {}
    ///Container type for the return parameters of the [`sequencerMessageCount()`](sequencerMessageCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerMessageCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerMessageCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerMessageCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerMessageCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerMessageCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerMessageCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerMessageCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencerMessageCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sequencerMessageCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencerMessageCount()";
            const SELECTOR: [u8; 4] = [0u8, 132u8, 18u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sequencerReportedSubMessageCount()` and selector `0x5fca4a16`.
```solidity
function sequencerReportedSubMessageCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerReportedSubMessageCountCall {}
    ///Container type for the return parameters of the [`sequencerReportedSubMessageCount()`](sequencerReportedSubMessageCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerReportedSubMessageCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerReportedSubMessageCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerReportedSubMessageCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerReportedSubMessageCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerReportedSubMessageCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerReportedSubMessageCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerReportedSubMessageCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencerReportedSubMessageCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sequencerReportedSubMessageCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencerReportedSubMessageCount()";
            const SELECTOR: [u8; 4] = [95u8, 202u8, 74u8, 22u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDelayedInbox(address,bool)` and selector `0x47fb24c5`.
```solidity
function setDelayedInbox(address inbox, bool enabled) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDelayedInboxCall {
        #[allow(missing_docs)]
        pub inbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub enabled: bool,
    }
    ///Container type for the return parameters of the [`setDelayedInbox(address,bool)`](setDelayedInboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDelayedInboxReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDelayedInboxCall> for UnderlyingRustTuple<'_> {
                fn from(value: setDelayedInboxCall) -> Self {
                    (value.inbox, value.enabled)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDelayedInboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        inbox: tuple.0,
                        enabled: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDelayedInboxReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDelayedInboxReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDelayedInboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDelayedInboxCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDelayedInboxReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDelayedInbox(address,bool)";
            const SELECTOR: [u8; 4] = [71u8, 251u8, 36u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.inbox,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.enabled,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setOutbox(address,bool)` and selector `0xcee3d728`.
```solidity
function setOutbox(address outbox, bool enabled) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setOutboxCall {
        #[allow(missing_docs)]
        pub outbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub enabled: bool,
    }
    ///Container type for the return parameters of the [`setOutbox(address,bool)`](setOutboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setOutboxReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOutboxCall> for UnderlyingRustTuple<'_> {
                fn from(value: setOutboxCall) -> Self {
                    (value.outbox, value.enabled)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setOutboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        outbox: tuple.0,
                        enabled: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOutboxReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setOutboxReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setOutboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setOutboxCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setOutboxReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setOutbox(address,bool)";
            const SELECTOR: [u8; 4] = [206u8, 227u8, 215u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.outbox,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.enabled,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setSequencerInbox(address)` and selector `0x4f61f850`.
```solidity
function setSequencerInbox(address _sequencerInbox) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerInboxCall {
        #[allow(missing_docs)]
        pub _sequencerInbox: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setSequencerInbox(address)`](setSequencerInboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerInboxReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerInboxCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerInboxCall) -> Self {
                    (value._sequencerInbox,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerInboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _sequencerInbox: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerInboxReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerInboxReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerInboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSequencerInboxCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSequencerInboxReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSequencerInbox(address)";
            const SELECTOR: [u8; 4] = [79u8, 97u8, 248u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._sequencerInbox,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setSequencerReportedSubMessageCount(uint256)` and selector `0xf81ff3b3`.
```solidity
function setSequencerReportedSubMessageCount(uint256 newMsgCount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerReportedSubMessageCountCall {
        #[allow(missing_docs)]
        pub newMsgCount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setSequencerReportedSubMessageCount(uint256)`](setSequencerReportedSubMessageCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSequencerReportedSubMessageCountReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerReportedSubMessageCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerReportedSubMessageCountCall) -> Self {
                    (value.newMsgCount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerReportedSubMessageCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newMsgCount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSequencerReportedSubMessageCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSequencerReportedSubMessageCountReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSequencerReportedSubMessageCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSequencerReportedSubMessageCountCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSequencerReportedSubMessageCountReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSequencerReportedSubMessageCount(uint256)";
            const SELECTOR: [u8; 4] = [248u8, 31u8, 243u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newMsgCount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `submitBatchSpendingReport(address,bytes32)` and selector `0x7a88b107`.
```solidity
function submitBatchSpendingReport(address sender, bytes32 messageDataHash) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitBatchSpendingReportCall {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub messageDataHash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`submitBatchSpendingReport(address,bytes32)`](submitBatchSpendingReportCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitBatchSpendingReportReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitBatchSpendingReportCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: submitBatchSpendingReportCall) -> Self {
                    (value.sender, value.messageDataHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for submitBatchSpendingReportCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sender: tuple.0,
                        messageDataHash: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitBatchSpendingReportReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: submitBatchSpendingReportReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for submitBatchSpendingReportReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for submitBatchSpendingReportCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = submitBatchSpendingReportReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "submitBatchSpendingReport(address,bytes32)";
            const SELECTOR: [u8; 4] = [122u8, 136u8, 177u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.messageDataHash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupAddress(address)` and selector `0x919cc706`.
```solidity
function updateRollupAddress(address _rollup) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupAddressCall {
        #[allow(missing_docs)]
        pub _rollup: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupAddress(address)`](updateRollupAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupAddressReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupAddressCall) -> Self {
                    (value._rollup,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _rollup: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupAddressReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupAddressReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupAddress(address)";
            const SELECTOR: [u8; 4] = [145u8, 156u8, 199u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._rollup,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ERC20Bridge`](self) function calls.
    pub enum ERC20BridgeCalls {
        #[allow(missing_docs)]
        acceptFundsFromOldBridge(acceptFundsFromOldBridgeCall),
        #[allow(missing_docs)]
        activeOutbox(activeOutboxCall),
        #[allow(missing_docs)]
        allowedDelayedInboxList(allowedDelayedInboxListCall),
        #[allow(missing_docs)]
        allowedDelayedInboxes(allowedDelayedInboxesCall),
        #[allow(missing_docs)]
        allowedOutboxList(allowedOutboxListCall),
        #[allow(missing_docs)]
        allowedOutboxes(allowedOutboxesCall),
        #[allow(missing_docs)]
        delayedInboxAccs(delayedInboxAccsCall),
        #[allow(missing_docs)]
        delayedMessageCount(delayedMessageCountCall),
        #[allow(missing_docs)]
        enqueueDelayedMessage(enqueueDelayedMessageCall),
        #[allow(missing_docs)]
        enqueueSequencerMessage(enqueueSequencerMessageCall),
        #[allow(missing_docs)]
        executeCall(executeCallCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        nativeToken(nativeTokenCall),
        #[allow(missing_docs)]
        nativeTokenDecimals(nativeTokenDecimalsCall),
        #[allow(missing_docs)]
        rollup(rollupCall),
        #[allow(missing_docs)]
        sequencerInbox(sequencerInboxCall),
        #[allow(missing_docs)]
        sequencerInboxAccs(sequencerInboxAccsCall),
        #[allow(missing_docs)]
        sequencerMessageCount(sequencerMessageCountCall),
        #[allow(missing_docs)]
        sequencerReportedSubMessageCount(sequencerReportedSubMessageCountCall),
        #[allow(missing_docs)]
        setDelayedInbox(setDelayedInboxCall),
        #[allow(missing_docs)]
        setOutbox(setOutboxCall),
        #[allow(missing_docs)]
        setSequencerInbox(setSequencerInboxCall),
        #[allow(missing_docs)]
        setSequencerReportedSubMessageCount(setSequencerReportedSubMessageCountCall),
        #[allow(missing_docs)]
        submitBatchSpendingReport(submitBatchSpendingReportCall),
        #[allow(missing_docs)]
        updateRollupAddress(updateRollupAddressCall),
    }
    #[automatically_derived]
    impl ERC20BridgeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 132u8, 18u8, 12u8],
            [22u8, 191u8, 85u8, 121u8],
            [65u8, 59u8, 53u8, 189u8],
            [71u8, 251u8, 36u8, 197u8],
            [72u8, 92u8, 201u8, 85u8],
            [79u8, 97u8, 248u8, 80u8],
            [95u8, 202u8, 74u8, 22u8],
            [117u8, 216u8, 30u8, 37u8],
            [122u8, 136u8, 177u8, 7u8],
            [134u8, 89u8, 138u8, 86u8],
            [145u8, 156u8, 199u8, 6u8],
            [148u8, 94u8, 17u8, 71u8],
            [158u8, 93u8, 76u8, 73u8],
            [171u8, 93u8, 137u8, 67u8],
            [173u8, 72u8, 203u8, 94u8],
            [174u8, 96u8, 189u8, 19u8],
            [203u8, 35u8, 188u8, 181u8],
            [206u8, 227u8, 215u8, 40u8],
            [213u8, 113u8, 157u8, 194u8],
            [225u8, 117u8, 139u8, 216u8],
            [231u8, 111u8, 92u8, 141u8],
            [231u8, 113u8, 69u8, 244u8],
            [236u8, 160u8, 103u8, 173u8],
            [238u8, 53u8, 243u8, 39u8],
            [248u8, 31u8, 243u8, 179u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ERC20BridgeCalls {
        const NAME: &'static str = "ERC20BridgeCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 25usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::acceptFundsFromOldBridge(_) => {
                    <acceptFundsFromOldBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activeOutbox(_) => {
                    <activeOutboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowedDelayedInboxList(_) => {
                    <allowedDelayedInboxListCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowedDelayedInboxes(_) => {
                    <allowedDelayedInboxesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowedOutboxList(_) => {
                    <allowedOutboxListCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowedOutboxes(_) => {
                    <allowedOutboxesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::delayedInboxAccs(_) => {
                    <delayedInboxAccsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::delayedMessageCount(_) => {
                    <delayedMessageCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::enqueueDelayedMessage(_) => {
                    <enqueueDelayedMessageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::enqueueSequencerMessage(_) => {
                    <enqueueSequencerMessageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeCall(_) => {
                    <executeCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::nativeToken(_) => {
                    <nativeTokenCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::nativeTokenDecimals(_) => {
                    <nativeTokenDecimalsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::rollup(_) => <rollupCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::sequencerInbox(_) => {
                    <sequencerInboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sequencerInboxAccs(_) => {
                    <sequencerInboxAccsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sequencerMessageCount(_) => {
                    <sequencerMessageCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sequencerReportedSubMessageCount(_) => {
                    <sequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDelayedInbox(_) => {
                    <setDelayedInboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setOutbox(_) => {
                    <setOutboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSequencerInbox(_) => {
                    <setSequencerInboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSequencerReportedSubMessageCount(_) => {
                    <setSequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::submitBatchSpendingReport(_) => {
                    <submitBatchSpendingReportCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupAddress(_) => {
                    <updateRollupAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ERC20BridgeCalls>] = &[
                {
                    fn sequencerMessageCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <sequencerMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::sequencerMessageCount)
                    }
                    sequencerMessageCount
                },
                {
                    fn sequencerInboxAccs(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <sequencerInboxAccsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::sequencerInboxAccs)
                    }
                    sequencerInboxAccs
                },
                {
                    fn allowedOutboxes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <allowedOutboxesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::allowedOutboxes)
                    }
                    allowedOutboxes
                },
                {
                    fn setDelayedInbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <setDelayedInboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::setDelayedInbox)
                    }
                    setDelayedInbox
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::initialize)
                    }
                    initialize
                },
                {
                    fn setSequencerInbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <setSequencerInboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::setSequencerInbox)
                    }
                    setSequencerInbox
                },
                {
                    fn sequencerReportedSubMessageCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <sequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::sequencerReportedSubMessageCount)
                    }
                    sequencerReportedSubMessageCount
                },
                {
                    fn enqueueDelayedMessage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <enqueueDelayedMessageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::enqueueDelayedMessage)
                    }
                    enqueueDelayedMessage
                },
                {
                    fn submitBatchSpendingReport(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <submitBatchSpendingReportCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::submitBatchSpendingReport)
                    }
                    submitBatchSpendingReport
                },
                {
                    fn enqueueSequencerMessage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <enqueueSequencerMessageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::enqueueSequencerMessage)
                    }
                    enqueueSequencerMessage
                },
                {
                    fn updateRollupAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <updateRollupAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::updateRollupAddress)
                    }
                    updateRollupAddress
                },
                {
                    fn allowedOutboxList(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <allowedOutboxListCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::allowedOutboxList)
                    }
                    allowedOutboxList
                },
                {
                    fn executeCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <executeCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::executeCall)
                    }
                    executeCall
                },
                {
                    fn activeOutbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <activeOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::activeOutbox)
                    }
                    activeOutbox
                },
                {
                    fn nativeTokenDecimals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <nativeTokenDecimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::nativeTokenDecimals)
                    }
                    nativeTokenDecimals
                },
                {
                    fn allowedDelayedInboxes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <allowedDelayedInboxesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::allowedDelayedInboxes)
                    }
                    allowedDelayedInboxes
                },
                {
                    fn rollup(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <rollupCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::rollup)
                    }
                    rollup
                },
                {
                    fn setOutbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <setOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::setOutbox)
                    }
                    setOutbox
                },
                {
                    fn delayedInboxAccs(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <delayedInboxAccsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::delayedInboxAccs)
                    }
                    delayedInboxAccs
                },
                {
                    fn nativeToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <nativeTokenCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::nativeToken)
                    }
                    nativeToken
                },
                {
                    fn allowedDelayedInboxList(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <allowedDelayedInboxListCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::allowedDelayedInboxList)
                    }
                    allowedDelayedInboxList
                },
                {
                    fn acceptFundsFromOldBridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <acceptFundsFromOldBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::acceptFundsFromOldBridge)
                    }
                    acceptFundsFromOldBridge
                },
                {
                    fn delayedMessageCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <delayedMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::delayedMessageCount)
                    }
                    delayedMessageCount
                },
                {
                    fn sequencerInbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <sequencerInboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::sequencerInbox)
                    }
                    sequencerInbox
                },
                {
                    fn setSequencerReportedSubMessageCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeCalls> {
                        <setSequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeCalls::setSequencerReportedSubMessageCount)
                    }
                    setSequencerReportedSubMessageCount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::acceptFundsFromOldBridge(inner) => {
                    <acceptFundsFromOldBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::activeOutbox(inner) => {
                    <activeOutboxCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowedDelayedInboxList(inner) => {
                    <allowedDelayedInboxListCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowedDelayedInboxes(inner) => {
                    <allowedDelayedInboxesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowedOutboxList(inner) => {
                    <allowedOutboxListCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowedOutboxes(inner) => {
                    <allowedOutboxesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::delayedInboxAccs(inner) => {
                    <delayedInboxAccsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::delayedMessageCount(inner) => {
                    <delayedMessageCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::enqueueDelayedMessage(inner) => {
                    <enqueueDelayedMessageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::enqueueSequencerMessage(inner) => {
                    <enqueueSequencerMessageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeCall(inner) => {
                    <executeCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::nativeToken(inner) => {
                    <nativeTokenCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::nativeTokenDecimals(inner) => {
                    <nativeTokenDecimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::rollup(inner) => {
                    <rollupCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::sequencerInbox(inner) => {
                    <sequencerInboxCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sequencerInboxAccs(inner) => {
                    <sequencerInboxAccsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sequencerMessageCount(inner) => {
                    <sequencerMessageCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sequencerReportedSubMessageCount(inner) => {
                    <sequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDelayedInbox(inner) => {
                    <setDelayedInboxCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setOutbox(inner) => {
                    <setOutboxCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setSequencerInbox(inner) => {
                    <setSequencerInboxCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSequencerReportedSubMessageCount(inner) => {
                    <setSequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::submitBatchSpendingReport(inner) => {
                    <submitBatchSpendingReportCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupAddress(inner) => {
                    <updateRollupAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::acceptFundsFromOldBridge(inner) => {
                    <acceptFundsFromOldBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activeOutbox(inner) => {
                    <activeOutboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowedDelayedInboxList(inner) => {
                    <allowedDelayedInboxListCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowedDelayedInboxes(inner) => {
                    <allowedDelayedInboxesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowedOutboxList(inner) => {
                    <allowedOutboxListCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowedOutboxes(inner) => {
                    <allowedOutboxesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delayedInboxAccs(inner) => {
                    <delayedInboxAccsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delayedMessageCount(inner) => {
                    <delayedMessageCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::enqueueDelayedMessage(inner) => {
                    <enqueueDelayedMessageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::enqueueSequencerMessage(inner) => {
                    <enqueueSequencerMessageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeCall(inner) => {
                    <executeCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::nativeToken(inner) => {
                    <nativeTokenCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::nativeTokenDecimals(inner) => {
                    <nativeTokenDecimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::rollup(inner) => {
                    <rollupCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::sequencerInbox(inner) => {
                    <sequencerInboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sequencerInboxAccs(inner) => {
                    <sequencerInboxAccsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sequencerMessageCount(inner) => {
                    <sequencerMessageCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sequencerReportedSubMessageCount(inner) => {
                    <sequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDelayedInbox(inner) => {
                    <setDelayedInboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setOutbox(inner) => {
                    <setOutboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSequencerInbox(inner) => {
                    <setSequencerInboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSequencerReportedSubMessageCount(inner) => {
                    <setSequencerReportedSubMessageCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::submitBatchSpendingReport(inner) => {
                    <submitBatchSpendingReportCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupAddress(inner) => {
                    <updateRollupAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ERC20Bridge`](self) custom errors.
    pub enum ERC20BridgeErrors {
        #[allow(missing_docs)]
        BadSequencerMessageNumber(BadSequencerMessageNumber),
        #[allow(missing_docs)]
        CallNotAllowed(CallNotAllowed),
        #[allow(missing_docs)]
        CallTargetNotAllowed(CallTargetNotAllowed),
        #[allow(missing_docs)]
        InvalidOutboxSet(InvalidOutboxSet),
        #[allow(missing_docs)]
        InvalidTokenSet(InvalidTokenSet),
        #[allow(missing_docs)]
        NativeTokenDecimalsTooLarge(NativeTokenDecimalsTooLarge),
        #[allow(missing_docs)]
        NotContract(NotContract),
        #[allow(missing_docs)]
        NotDelayedInbox(NotDelayedInbox),
        #[allow(missing_docs)]
        NotOutbox(NotOutbox),
        #[allow(missing_docs)]
        NotRollupOrOwner(NotRollupOrOwner),
        #[allow(missing_docs)]
        NotSequencerInbox(NotSequencerInbox),
    }
    #[automatically_derived]
    impl ERC20BridgeErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [6u8, 223u8, 246u8, 214u8],
            [7u8, 57u8, 96u8, 7u8],
            [14u8, 12u8, 39u8, 98u8],
            [50u8, 234u8, 130u8, 171u8],
            [87u8, 107u8, 56u8, 180u8],
            [119u8, 171u8, 237u8, 16u8],
            [136u8, 248u8, 79u8, 4u8],
            [181u8, 207u8, 91u8, 143u8],
            [182u8, 198u8, 14u8, 163u8],
            [225u8, 108u8, 210u8, 8u8],
            [226u8, 5u8, 31u8, 235u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ERC20BridgeErrors {
        const NAME: &'static str = "ERC20BridgeErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::BadSequencerMessageNumber(_) => {
                    <BadSequencerMessageNumber as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CallNotAllowed(_) => {
                    <CallNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CallTargetNotAllowed(_) => {
                    <CallTargetNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidOutboxSet(_) => {
                    <InvalidOutboxSet as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidTokenSet(_) => {
                    <InvalidTokenSet as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NativeTokenDecimalsTooLarge(_) => {
                    <NativeTokenDecimalsTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotContract(_) => {
                    <NotContract as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotDelayedInbox(_) => {
                    <NotDelayedInbox as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotOutbox(_) => <NotOutbox as alloy_sol_types::SolError>::SELECTOR,
                Self::NotRollupOrOwner(_) => {
                    <NotRollupOrOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotSequencerInbox(_) => {
                    <NotSequencerInbox as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ERC20BridgeErrors>] = &[
                {
                    fn InvalidTokenSet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <InvalidTokenSet as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::InvalidTokenSet)
                    }
                    InvalidTokenSet
                },
                {
                    fn NotRollupOrOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <NotRollupOrOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::NotRollupOrOwner)
                    }
                    NotRollupOrOwner
                },
                {
                    fn NativeTokenDecimalsTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <NativeTokenDecimalsTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::NativeTokenDecimalsTooLarge)
                    }
                    NativeTokenDecimalsTooLarge
                },
                {
                    fn NotOutbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <NotOutbox as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::NotOutbox)
                    }
                    NotOutbox
                },
                {
                    fn CallNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <CallNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::CallNotAllowed)
                    }
                    CallNotAllowed
                },
                {
                    fn InvalidOutboxSet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <InvalidOutboxSet as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::InvalidOutboxSet)
                    }
                    InvalidOutboxSet
                },
                {
                    fn NotSequencerInbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <NotSequencerInbox as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::NotSequencerInbox)
                    }
                    NotSequencerInbox
                },
                {
                    fn NotContract(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <NotContract as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::NotContract)
                    }
                    NotContract
                },
                {
                    fn NotDelayedInbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <NotDelayedInbox as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::NotDelayedInbox)
                    }
                    NotDelayedInbox
                },
                {
                    fn CallTargetNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <CallTargetNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::CallTargetNotAllowed)
                    }
                    CallTargetNotAllowed
                },
                {
                    fn BadSequencerMessageNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC20BridgeErrors> {
                        <BadSequencerMessageNumber as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC20BridgeErrors::BadSequencerMessageNumber)
                    }
                    BadSequencerMessageNumber
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::BadSequencerMessageNumber(inner) => {
                    <BadSequencerMessageNumber as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CallNotAllowed(inner) => {
                    <CallNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CallTargetNotAllowed(inner) => {
                    <CallTargetNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidOutboxSet(inner) => {
                    <InvalidOutboxSet as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidTokenSet(inner) => {
                    <InvalidTokenSet as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NativeTokenDecimalsTooLarge(inner) => {
                    <NativeTokenDecimalsTooLarge as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotContract(inner) => {
                    <NotContract as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotDelayedInbox(inner) => {
                    <NotDelayedInbox as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotOutbox(inner) => {
                    <NotOutbox as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotRollupOrOwner(inner) => {
                    <NotRollupOrOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotSequencerInbox(inner) => {
                    <NotSequencerInbox as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::BadSequencerMessageNumber(inner) => {
                    <BadSequencerMessageNumber as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CallNotAllowed(inner) => {
                    <CallNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CallTargetNotAllowed(inner) => {
                    <CallTargetNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidOutboxSet(inner) => {
                    <InvalidOutboxSet as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidTokenSet(inner) => {
                    <InvalidTokenSet as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NativeTokenDecimalsTooLarge(inner) => {
                    <NativeTokenDecimalsTooLarge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotContract(inner) => {
                    <NotContract as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotDelayedInbox(inner) => {
                    <NotDelayedInbox as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotOutbox(inner) => {
                    <NotOutbox as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NotRollupOrOwner(inner) => {
                    <NotRollupOrOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotSequencerInbox(inner) => {
                    <NotSequencerInbox as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ERC20Bridge`](self) events.
    pub enum ERC20BridgeEvents {
        #[allow(missing_docs)]
        BridgeCallTriggered(BridgeCallTriggered),
        #[allow(missing_docs)]
        InboxToggle(InboxToggle),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        MessageDelivered(MessageDelivered),
        #[allow(missing_docs)]
        OutboxToggle(OutboxToggle),
        #[allow(missing_docs)]
        RollupUpdated(RollupUpdated),
        #[allow(missing_docs)]
        SequencerInboxUpdated(SequencerInboxUpdated),
    }
    #[automatically_derived]
    impl ERC20BridgeEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                45u8,
                157u8,
                17u8,
                94u8,
                243u8,
                228u8,
                166u8,
                6u8,
                214u8,
                152u8,
                145u8,
                59u8,
                30u8,
                174u8,
                131u8,
                26u8,
                60u8,
                223u8,
                226u8,
                13u8,
                154u8,
                131u8,
                212u8,
                128u8,
                7u8,
                176u8,
                82u8,
                103u8,
                73u8,
                195u8,
                212u8,
                102u8,
            ],
            [
                73u8,
                71u8,
                126u8,
                115u8,
                86u8,
                219u8,
                203u8,
                101u8,
                74u8,
                184u8,
                93u8,
                117u8,
                52u8,
                181u8,
                1u8,
                38u8,
                119u8,
                45u8,
                147u8,
                129u8,
                48u8,
                209u8,
                53u8,
                14u8,
                35u8,
                226u8,
                84u8,
                3u8,
                112u8,
                200u8,
                223u8,
                250u8,
            ],
            [
                94u8,
                60u8,
                19u8,
                17u8,
                234u8,
                68u8,
                38u8,
                100u8,
                232u8,
                177u8,
                97u8,
                27u8,
                250u8,
                190u8,
                246u8,
                89u8,
                18u8,
                14u8,
                167u8,
                160u8,
                162u8,
                207u8,
                192u8,
                102u8,
                119u8,
                0u8,
                190u8,
                188u8,
                105u8,
                203u8,
                255u8,
                225u8,
            ],
            [
                102u8,
                117u8,
                206u8,
                136u8,
                130u8,
                203u8,
                113u8,
                99u8,
                125u8,
                229u8,
                144u8,
                58u8,
                25u8,
                61u8,
                33u8,
                140u8,
                192u8,
                84u8,
                75u8,
                233u8,
                192u8,
                101u8,
                12u8,
                184u8,
                62u8,
                9u8,
                85u8,
                246u8,
                170u8,
                43u8,
                245u8,
                33u8,
            ],
            [
                127u8,
                38u8,
                184u8,
                63u8,
                249u8,
                110u8,
                31u8,
                43u8,
                106u8,
                104u8,
                47u8,
                19u8,
                56u8,
                82u8,
                246u8,
                121u8,
                138u8,
                9u8,
                196u8,
                101u8,
                218u8,
                149u8,
                146u8,
                20u8,
                96u8,
                206u8,
                251u8,
                56u8,
                71u8,
                64u8,
                36u8,
                152u8,
            ],
            [
                140u8,
                30u8,
                96u8,
                3u8,
                237u8,
                51u8,
                202u8,
                103u8,
                72u8,
                212u8,
                173u8,
                61u8,
                212u8,
                236u8,
                201u8,
                73u8,
                6u8,
                92u8,
                137u8,
                220u8,
                235u8,
                49u8,
                253u8,
                245u8,
                70u8,
                165u8,
                40u8,
                146u8,
                2u8,
                118u8,
                60u8,
                106u8,
            ],
            [
                174u8,
                31u8,
                90u8,
                161u8,
                95u8,
                111u8,
                248u8,
                68u8,
                137u8,
                99u8,
                71u8,
                206u8,
                202u8,
                42u8,
                60u8,
                36u8,
                200u8,
                211u8,
                162u8,
                119u8,
                133u8,
                239u8,
                222u8,
                172u8,
                213u8,
                129u8,
                160u8,
                169u8,
                81u8,
                114u8,
                120u8,
                74u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ERC20BridgeEvents {
        const NAME: &'static str = "ERC20BridgeEvents";
        const COUNT: usize = 7usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <BridgeCallTriggered as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeCallTriggered as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeCallTriggered)
                }
                Some(<InboxToggle as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <InboxToggle as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::InboxToggle)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(<MessageDelivered as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <MessageDelivered as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::MessageDelivered)
                }
                Some(<OutboxToggle as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <OutboxToggle as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OutboxToggle)
                }
                Some(<RollupUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RollupUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupUpdated)
                }
                Some(
                    <SequencerInboxUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SequencerInboxUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SequencerInboxUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ERC20BridgeEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BridgeCallTriggered(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::InboxToggle(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::MessageDelivered(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OutboxToggle(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SequencerInboxUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BridgeCallTriggered(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::InboxToggle(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::MessageDelivered(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OutboxToggle(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SequencerInboxUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ERC20Bridge`](self) contract instance.

See the [wrapper's documentation](`ERC20BridgeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ERC20BridgeInstance<T, P, N> {
        ERC20BridgeInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ERC20BridgeInstance<T, P, N>>,
    > {
        ERC20BridgeInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ERC20BridgeInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ERC20Bridge`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ERC20Bridge`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ERC20BridgeInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ERC20BridgeInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ERC20BridgeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC20BridgeInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ERC20Bridge`](self) contract instance.

See the [wrapper's documentation](`ERC20BridgeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ERC20BridgeInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ERC20BridgeInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ERC20BridgeInstance<T, P, N> {
            ERC20BridgeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC20BridgeInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`acceptFundsFromOldBridge`] function.
        pub fn acceptFundsFromOldBridge(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, acceptFundsFromOldBridgeCall, N> {
            self.call_builder(&acceptFundsFromOldBridgeCall {})
        }
        ///Creates a new call builder for the [`activeOutbox`] function.
        pub fn activeOutbox(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, activeOutboxCall, N> {
            self.call_builder(&activeOutboxCall {})
        }
        ///Creates a new call builder for the [`allowedDelayedInboxList`] function.
        pub fn allowedDelayedInboxList(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedDelayedInboxListCall, N> {
            self.call_builder(&allowedDelayedInboxListCall { _0 })
        }
        ///Creates a new call builder for the [`allowedDelayedInboxes`] function.
        pub fn allowedDelayedInboxes(
            &self,
            inbox: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedDelayedInboxesCall, N> {
            self.call_builder(&allowedDelayedInboxesCall { inbox })
        }
        ///Creates a new call builder for the [`allowedOutboxList`] function.
        pub fn allowedOutboxList(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedOutboxListCall, N> {
            self.call_builder(&allowedOutboxListCall { _0 })
        }
        ///Creates a new call builder for the [`allowedOutboxes`] function.
        pub fn allowedOutboxes(
            &self,
            outbox: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedOutboxesCall, N> {
            self.call_builder(&allowedOutboxesCall { outbox })
        }
        ///Creates a new call builder for the [`delayedInboxAccs`] function.
        pub fn delayedInboxAccs(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, delayedInboxAccsCall, N> {
            self.call_builder(&delayedInboxAccsCall { _0 })
        }
        ///Creates a new call builder for the [`delayedMessageCount`] function.
        pub fn delayedMessageCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, delayedMessageCountCall, N> {
            self.call_builder(&delayedMessageCountCall {})
        }
        ///Creates a new call builder for the [`enqueueDelayedMessage`] function.
        pub fn enqueueDelayedMessage(
            &self,
            kind: u8,
            sender: alloy::sol_types::private::Address,
            messageDataHash: alloy::sol_types::private::FixedBytes<32>,
            tokenFeeAmount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, enqueueDelayedMessageCall, N> {
            self.call_builder(
                &enqueueDelayedMessageCall {
                    kind,
                    sender,
                    messageDataHash,
                    tokenFeeAmount,
                },
            )
        }
        ///Creates a new call builder for the [`enqueueSequencerMessage`] function.
        pub fn enqueueSequencerMessage(
            &self,
            dataHash: alloy::sol_types::private::FixedBytes<32>,
            afterDelayedMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
            prevMessageCount: alloy::sol_types::private::primitives::aliases::U256,
            newMessageCount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, enqueueSequencerMessageCall, N> {
            self.call_builder(
                &enqueueSequencerMessageCall {
                    dataHash,
                    afterDelayedMessagesRead,
                    prevMessageCount,
                    newMessageCount,
                },
            )
        }
        ///Creates a new call builder for the [`executeCall`] function.
        pub fn executeCall(
            &self,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeCallCall, N> {
            self.call_builder(&executeCallCall { to, value, data })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            rollup_: alloy::sol_types::private::Address,
            nativeToken_: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    rollup_,
                    nativeToken_,
                },
            )
        }
        ///Creates a new call builder for the [`nativeToken`] function.
        pub fn nativeToken(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, nativeTokenCall, N> {
            self.call_builder(&nativeTokenCall {})
        }
        ///Creates a new call builder for the [`nativeTokenDecimals`] function.
        pub fn nativeTokenDecimals(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, nativeTokenDecimalsCall, N> {
            self.call_builder(&nativeTokenDecimalsCall {})
        }
        ///Creates a new call builder for the [`rollup`] function.
        pub fn rollup(&self) -> alloy_contract::SolCallBuilder<T, &P, rollupCall, N> {
            self.call_builder(&rollupCall {})
        }
        ///Creates a new call builder for the [`sequencerInbox`] function.
        pub fn sequencerInbox(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, sequencerInboxCall, N> {
            self.call_builder(&sequencerInboxCall {})
        }
        ///Creates a new call builder for the [`sequencerInboxAccs`] function.
        pub fn sequencerInboxAccs(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, sequencerInboxAccsCall, N> {
            self.call_builder(&sequencerInboxAccsCall { _0 })
        }
        ///Creates a new call builder for the [`sequencerMessageCount`] function.
        pub fn sequencerMessageCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, sequencerMessageCountCall, N> {
            self.call_builder(&sequencerMessageCountCall {})
        }
        ///Creates a new call builder for the [`sequencerReportedSubMessageCount`] function.
        pub fn sequencerReportedSubMessageCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            sequencerReportedSubMessageCountCall,
            N,
        > {
            self.call_builder(
                &sequencerReportedSubMessageCountCall {
                },
            )
        }
        ///Creates a new call builder for the [`setDelayedInbox`] function.
        pub fn setDelayedInbox(
            &self,
            inbox: alloy::sol_types::private::Address,
            enabled: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDelayedInboxCall, N> {
            self.call_builder(
                &setDelayedInboxCall {
                    inbox,
                    enabled,
                },
            )
        }
        ///Creates a new call builder for the [`setOutbox`] function.
        pub fn setOutbox(
            &self,
            outbox: alloy::sol_types::private::Address,
            enabled: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setOutboxCall, N> {
            self.call_builder(&setOutboxCall { outbox, enabled })
        }
        ///Creates a new call builder for the [`setSequencerInbox`] function.
        pub fn setSequencerInbox(
            &self,
            _sequencerInbox: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSequencerInboxCall, N> {
            self.call_builder(
                &setSequencerInboxCall {
                    _sequencerInbox,
                },
            )
        }
        ///Creates a new call builder for the [`setSequencerReportedSubMessageCount`] function.
        pub fn setSequencerReportedSubMessageCount(
            &self,
            newMsgCount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            setSequencerReportedSubMessageCountCall,
            N,
        > {
            self.call_builder(
                &setSequencerReportedSubMessageCountCall {
                    newMsgCount,
                },
            )
        }
        ///Creates a new call builder for the [`submitBatchSpendingReport`] function.
        pub fn submitBatchSpendingReport(
            &self,
            sender: alloy::sol_types::private::Address,
            messageDataHash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, submitBatchSpendingReportCall, N> {
            self.call_builder(
                &submitBatchSpendingReportCall {
                    sender,
                    messageDataHash,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupAddress`] function.
        pub fn updateRollupAddress(
            &self,
            _rollup: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupAddressCall, N> {
            self.call_builder(&updateRollupAddressCall { _rollup })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC20BridgeInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BridgeCallTriggered`] event.
        pub fn BridgeCallTriggered_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeCallTriggered, N> {
            self.event_filter::<BridgeCallTriggered>()
        }
        ///Creates a new event filter for the [`InboxToggle`] event.
        pub fn InboxToggle_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, InboxToggle, N> {
            self.event_filter::<InboxToggle>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`MessageDelivered`] event.
        pub fn MessageDelivered_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, MessageDelivered, N> {
            self.event_filter::<MessageDelivered>()
        }
        ///Creates a new event filter for the [`OutboxToggle`] event.
        pub fn OutboxToggle_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OutboxToggle, N> {
            self.event_filter::<OutboxToggle>()
        }
        ///Creates a new event filter for the [`RollupUpdated`] event.
        pub fn RollupUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupUpdated, N> {
            self.event_filter::<RollupUpdated>()
        }
        ///Creates a new event filter for the [`SequencerInboxUpdated`] event.
        pub fn SequencerInboxUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SequencerInboxUpdated, N> {
            self.event_filter::<SequencerInboxUpdated>()
        }
    }
}
