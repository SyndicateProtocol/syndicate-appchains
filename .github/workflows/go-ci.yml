name: Go CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  enclave-build:
    name: build enclave
    runs-on: shared-medium-01
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pull submodules
        run: |
          cd synd-withdrawals/synd-enclave && \
          git submodule update --init --recursive

      - name: Build enclave image
        run: |
          cd synd-withdrawals/synd-enclave
          docker build --target eif-bin .
          docker build --target local-dev .

  proposer-test:
    name: test synd-proposer
    runs-on: ubuntu-latest
    env:
      CARGOFLAGS: ""
      RUSTFLAGS: "-C target-cpu=native"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential cmake lld-14 libudev-dev wabt clang
          sudo ln -s /usr/bin/wasm-ld-14 /usr/local/bin/wasm-ld
          # Verify WASM tools are available
          which wat2wasm
          which wasm-ld

      - name: Install Rust toolchain & WASM targets
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.84.1"
          targets: "wasm32-wasip1, wasm32-unknown-unknown"
          components: "cargo, rustc, clippy"

      - name: Verify Rust installation
        run: |
          rustc --version
          cargo --version
          rustup component list | grep clippy

      - name: Clean up corrupted Rust downloads (if any)
        run: |
          # Clean up any corrupted downloads
          rm -rf ~/.rustup/downloads/*.partial || true
          # Ensure clippy is properly installed
          rustup component add clippy --toolchain 1.84.1 || true

      - name: Install nightly Rust toolchain
        run: |
          rustup toolchain install nightly
          rustup component add rust-src --toolchain nightly

      - name: Clear cargo cache if needed
        run: |
          # Clear cargo cache if it's corrupted
          cargo clean || true
          # Clear rustup downloads if corrupted
          rm -rf ~/.rustup/downloads/*.partial ~/.rustup/downloads/*.tmp || true

      - name: Build all lint dependencies
        run: |
          cd synd-withdrawals/synd-enclave/nitro
          # Show environment and toolchain info for debugging
          echo "Rust toolchain info:"
          rustup show
          echo "Cargo version:"
          cargo --version
          echo "Available targets:"
          rustup target list --installed
          # Retry the build up to 3 times in case of transient failures
          for i in {1..3}; do
            echo "Build attempt $i of 3"
            if make -j build-node-deps; then
              echo "Build successful on attempt $i"
              break
            else
              echo "Build failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "All build attempts failed"
                exit 1
              fi
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          done

      - name: Pull all submodules
        run: |
          git submodule update --init --recursive
          cd synd-withdrawals/synd-proposer
          git submodule update --init --recursive

      - name: Tidy modules
        run: |
          cd synd-withdrawals/synd-proposer
          go mod tidy

      - name: Run Go tests
        run: |
          cd synd-withdrawals/synd-proposer
          go test ./...
