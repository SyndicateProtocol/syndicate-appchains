name: Rust Workspace CI

on:
  # Run workflow on every push to main
  push:
    branches:
      - main
  # Mandatory checks - must run on all PRs
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  # Make sure CI fails on all warnings, including Clippy lints
  RUSTFLAGS: "-Dwarnings"
  # Use a shared cache key for all jobs in the same PR/run
  CACHE_KEY: "${{ github.event.pull_request.number || github.sha }}"

jobs:
  taplo:
    name: Cargo.toml format validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install taplo using cargo
      - name: Install Taplo
        uses: clechasseur/rs-cargo@v2
        with:
          command: install
          args: taplo-cli@0.9.0

      # Run Taplo validation on all Cargo.toml files in the workspace
      - name: Validate Cargo.toml files
        run: taplo lint "**/Cargo.toml" --verbose

      # Check Cargo.toml formatting
      - name: Check Cargo.toml formatting. Remove `--check` from command to apply changes
        run: taplo fmt --check "**/Cargo.toml" --verbose

  machete:
    name: Machete
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install cargo-machete
        uses: clechasseur/rs-cargo@v2
        with:
          command: install
          args: cargo-machete@0.7.0
      - name: Machete
        uses: clechasseur/rs-cargo@v2
        with:
          command: machete
          # args are specified one by one to avoid issues with git submodules (particularly inside synd-withdrawals)
          args: |
            "Cargo.toml"
            "shared"
            "synd-batch-sequencer"
            "synd-maestro"
            "synd-mchain"
            "synd-translator"
            "synd-withdrawals/synd-tee-attestation-zk-proofs/aws-nitro"
            "synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program"
            "test-framework"


  fmt:
    name: Fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain and rustfmt
        run: |
          rustup toolchain install nightly --profile minimal
          rustup component add --toolchain nightly-x86_64-unknown-linux-gnu rustfmt

      - name: Run Fmt
        run: cargo +nightly fmt --all --check -- --unstable-features

  build:
    name: Build Dependencies
    runs-on: shared-large-01
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup toolchain install stable --profile minimal --component clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ env.CACHE_KEY }}
          save-if: true

      - name: Cache SP1 toolchain
        id: cache-sp1
        uses: actions/cache@v4
        with:
          path: ~/.sp1
          key: ${{ runner.os }}-sp1-toolchain-v1

      - name: Install SP1 toolchain
        if: steps.cache-sp1.outputs.cache-hit != 'true'
        run: |
          curl -L https://sp1.succinct.xyz | bash
          $HOME/.sp1/bin/sp1up

      - name: Verify SP1 installation
        run: $HOME/.sp1/bin/cargo-prove prove --version

      - name: Debug SP1 paths
        run: |
          echo "=== Pre-build debugging ==="
          echo "Current directory: $(pwd)"
          echo "Checking if SP1 program directory exists:"
          ls -la synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/ || echo "Directory not found"
          echo ""
          echo "Finding all .rs files:"
          find synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program -name "*.rs" -type f 2>/dev/null | head -10 || echo "No .rs files found"
          echo ""
          echo "Finding Cargo.toml:"
          find synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program -name "Cargo.toml" -type f 2>/dev/null || echo "No Cargo.toml found"
          echo ""
          echo "Checking for existing elf/target directories:"
          ls -la synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/elf 2>/dev/null || echo "No elf directory yet"
          ls -la synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/target 2>/dev/null || echo "No target directory yet"

      - name: Cache SP1 ELF program
        id: cache-sp1-elf
        uses: actions/cache@v4
        with:
          path: |
            synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/elf
            synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/target
          key: ${{ runner.os }}-sp1-elf-${{ hashFiles('synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/**/*.rs', 'synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-sp1-elf-

      - name: Debug cache result
        run: |
          echo "=== Cache debugging ==="
          echo "Cache hit: ${{ steps.cache-sp1-elf.outputs.cache-hit }}"
          echo "Cache primary key: ${{ runner.os }}-sp1-elf-${{ hashFiles('synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/**/*.rs', 'synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/Cargo.toml') }}"
          echo "Did we get a partial restore? Check if directories exist:"
          ls -la synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/elf 2>/dev/null && echo "elf directory restored from cache" || echo "No elf from cache"
          ls -la synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/target 2>/dev/null && echo "target directory restored from cache" || echo "No target from cache"

      - name: Build SP1 ELF program
        if: steps.cache-sp1-elf.outputs.cache-hit != 'true'
        run: |
          echo "=== Building SP1 ELF (cache miss) ==="
          cd synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program
          $HOME/.sp1/bin/cargo-prove prove build

          echo ""
          echo "=== Post-build verification ==="
          echo "Current directory after build: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for elf artifacts:"
          find . -name "*.elf" -o -type d -name "elf" | head -20
          echo ""
          echo "Checking specific paths that will be cached:"
          echo "From repo root:"
          cd ${{ github.workspace }}
          ls -la synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/elf || echo "elf directory not found from repo root"
          ls -la synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/target || echo "target directory not found from repo root"

      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      # Build everything that will be needed by other jobs
      - name: Build workspace
        run: |
          cargo build --workspace --all-targets --all-features
          cargo nextest run --no-run --workspace

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup toolchain install stable --profile minimal --component clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ env.CACHE_KEY }}
          save-if: false

      - name: Cache SP1 toolchain
        uses: actions/cache@v4
        with:
          path: ~/.sp1
          key: ${{ runner.os }}-sp1-toolchain-v1

      - name: Cache SP1 ELF program
        uses: actions/cache@v4
        with:
          path: |
            synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/elf
            synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/target
          key: ${{ runner.os }}-sp1-elf-${{ hashFiles('synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/**/*.rs', 'synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/Cargo.toml') }}

      # Run Clippy checks on the entire workspace
      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --all-features

  test:
    name: Tests
    runs-on: shared-large-01
    timeout-minutes: 45
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup toolchain install stable --profile minimal --component clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ env.CACHE_KEY }}
          save-if: false

      - name: Cache SP1 toolchain
        uses: actions/cache@v4
        with:
          path: ~/.sp1
          key: ${{ runner.os }}-sp1-toolchain-v1

      - name: Cache SP1 ELF program
        uses: actions/cache@v4
        with:
          path: |
            synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/elf
            synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/target
          key: ${{ runner.os }}-sp1-elf-${{ hashFiles('synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/**/*.rs', 'synd-withdrawals/synd-tee-attestation-zk-proofs/sp1/program/Cargo.toml') }}

      - name: Pre-download docker test docker images
        run: |
          docker pull ghcr.io/syndicateprotocol/generate_batch
          docker pull valkey/valkey:latest
          docker pull offchainlabs/nitro-node:v3.6.2-5b41a2d-slim

      # Install Foundry (required for Anvil, a local Ethereum node simulator)
      # Anvil is a critical dependency for tests, particularly
      # the block builder component which uses it to simulate blockchain operations
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Verify Foundry Installation
        run: |
          which anvil
          anvil --version

      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run Integration Tests with Nextest
        run: cargo nextest run --workspace --fail-fast