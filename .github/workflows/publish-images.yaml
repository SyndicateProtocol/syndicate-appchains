# This workflow builds and publishes all Docker images to our container registry.
# By default it publishes the `latest` tag, but you can specify different tags to use.
# You can also specify a service to build and publish, or leave blank to build and publish all services.

name: Publish Service Images

on:
  workflow_dispatch:
    inputs:
      service:
        description: "Service to build (leave empty for all)"
        required: false
        type: string
      dry_run:
        description: "Dry run mode"
        required: false
        type: boolean
        default: false
      runner_label:
        description: "Which runner label(s) to use"
        required: false
        type: string
        default: "ubuntu-latest"
      tags:
        description: "Tags to use (string of JSON array)"
        required: false
        type: string
        default: '["latest"]'
  workflow_call:
    inputs:
      service:
        required: false
        type: string
      dry_run:
        required: false
        type: boolean
        default: false
      runner_label:
        required: false
        type: string
        default: "ubuntu-latest"
        description: "Which runner label(s) to use"
      tags:
        required: false
        type: string
        default: '["latest"]'
        description: "Tags to use (JSON array)"

env:
  GITHUB_REGISTRY: ghcr.io

jobs:
  docker:
    name: Build and Push Services
    runs-on: ${{ inputs.runner_label || 'ubuntu-latest' }}
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Parse image tags
        id: parse_tags
        run: |
          TAGS_INPUT='${{ inputs.tags }}'
          if [ -z "$TAGS_INPUT" ] || [ "$TAGS_INPUT" = "null" ]; then
            TAGS_INPUT='["latest"]'
          fi
          
          echo "Raw tags input: $TAGS_INPUT"
          
          # Convert single quotes to double quotes for valid JSON if needed
          TAGS_JSON_FIXED=$(echo "$TAGS_INPUT" | sed "s/'/\"/g")
          echo "Fixed JSON: $TAGS_JSON_FIXED"
          
          # Parse JSON array and convert to bash array
          TAGS_ARRAY=()
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              TAGS_ARRAY+=("$tag")
            fi
          done <<< "$(echo "$TAGS_JSON_FIXED" | jq -r '.[]')"
          
          # Export for use in subsequent steps
          printf '%s\n' "${TAGS_ARRAY[@]}" > /tmp/tags_array
          echo "Parsed tags: ${TAGS_ARRAY[*]}"

      - name: Build and push services
        run: |
          if [ -z "${{ inputs.service }}" ]; then
            SERVICES=("synd-translator" "synd-proposer" "synd-maestro" "synd-mchain" "synd-batch-sequencer" "synd-chain-ingestor")
          else
            SERVICES=("${{ inputs.service }}")
          fi

          # Read tags from file
          readarray -t TAGS < /tmp/tags_array

          for service in "${SERVICES[@]}"; do
            echo "Building $service with tags: ${TAGS[*]}"
          
            # Build tag arguments for docker buildx
            TAG_ARGS=""
            for tag in "${TAGS[@]}"; do
              TAG_ARGS="$TAG_ARGS --tag ${{ env.GITHUB_REGISTRY }}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')/$service:$tag"
            done

            docker buildx build \
              --platform linux/amd64 \
              --push=${{ !inputs.dry_run }} \
              --target "$service" \
              $TAG_ARGS \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              .
          done

          echo "Pruning buildx and system..."
          docker buildx prune --all --force
          docker system prune --all --volumes --force
